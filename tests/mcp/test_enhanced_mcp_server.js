#!/usr/bin/env node
const { spawn } = require("child_process");
const readline = require("readline");

async function testEnhancedMcpServer() {
    console.log("üöÄ Testing Enhanced BSL MCP Server...\n");
    
    const server = spawn("cargo", ["run", "--bin", "bsl-mcp-server"], {
        cwd: "../..",  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
        env: {
            ...process.env,
            BSL_CONFIG_PATH: "examples/ConfTest",
            BSL_PLATFORM_VERSION: "8.3.25"
        }
    });
    
    const rl = readline.createInterface({
        input: server.stdout,
        crlfDelay: Infinity
    });
    
    // Handle server responses
    rl.on("line", (line) => {
        console.log("üì® Response:", line);
        try {
            const response = JSON.parse(line);
            console.log("‚úÖ Parsed:", JSON.stringify(response, null, 2));
        } catch (e) {
            // Not JSON, maybe debug output
        }
    });
    
    // Handle server errors
    server.stderr.on("data", (data) => {
        console.error("üîß [Server]", data.toString());
    });
    
    server.on("error", (err) => {
        console.error("‚ùå Failed to start server:", err);
    });
    
    // Send requests
    const sendRequest = (request) => {
        console.log(`\nüì§ Sending: ${JSON.stringify(request, null, 2)}`);
        server.stdin.write(JSON.stringify(request) + "\n");
    };
    
    // Wait a bit for server to start
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    console.log("\n" + "=".repeat(60));
    console.log("üß™ TESTING ENHANCED MCP PROTOCOL");
    console.log("=".repeat(60) + "\n");
    
    // 1. Initialize
    console.log("1Ô∏è‚É£ Initialize Protocol");
    sendRequest({
        jsonrpc: "2.0",
        method: "initialize",
        params: {
            protocolVersion: "0.1.0",
            clientInfo: {
                name: "enhanced-test-client",
                version: "1.0.0"
            }
        },
        id: 1
    });
    
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // 2. List tools (should show 4 tools now!)
    console.log("2Ô∏è‚É£ List Available Tools");
    sendRequest({
        jsonrpc: "2.0",
        method: "tools/list",
        params: {},
        id: 2
    });
    
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // 3. Test find_type tool
    console.log("3Ô∏è‚É£ Test find_type Tool");
    sendRequest({
        jsonrpc: "2.0",
        method: "tools/call",
        params: {
            name: "find_type",
            arguments: {
                type_name: "–ú–∞—Å—Å–∏–≤"
            }
        },
        id: 3
    });
    
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // 4. Test NEW analyze_code tool with Base64 example
    console.log("4Ô∏è‚É£ Test NEW analyze_code Tool");
    const testBslCode = `–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µBase64()
    –î–∞–Ω–Ω—ã–µ = "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ";
    –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è–°—Ç—Ä–æ–∫–∞ = Base64–ó–Ω–∞—á–µ–Ω–∏–µ(–î–∞–Ω–Ω—ã–µ);  // ‚úÖ –î–æ–ª–∂–Ω–∞ –Ω–∞–π—Ç–∏—Å—å
    –°–æ–æ–±—â–∏—Ç—å(–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è–°—Ç—Ä–æ–∫–∞);
    
    // –û—à–∏–±–∫–∞ - –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è–§—É–Ω–∫—Ü–∏—è();  // ‚ùå –î–æ–ª–∂–Ω–∞ –≤—ã–¥–∞—Ç—å –æ—à–∏–±–∫—É
–ö–æ–Ω–µ—Ü–ü—Ä–æ—Ü–µ–¥—É—Ä—ã`;

    sendRequest({
        jsonrpc: "2.0",
        method: "tools/call",
        params: {
            name: "analyze_code",
            arguments: {
                bsl_code: testBslCode,
                file_name: "test_base64.bsl"
            }
        },
        id: 4
    });
    
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // 5. Test NEW validate_syntax tool
    console.log("5Ô∏è‚É£ Test NEW validate_syntax Tool");
    sendRequest({
        jsonrpc: "2.0",
        method: "tools/call",
        params: {
            name: "validate_syntax",
            arguments: {
                bsl_code: "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –¢–µ—Å—Ç() –ö–æ–Ω–µ—Ü–ü—Ä–æ—Ü–µ–¥—É—Ä—ã"
            }
        },
        id: 5
    });
    
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // 6. Test NEW get_suggestions tool
    console.log("6Ô∏è‚É£ Test NEW get_suggestions Tool");
    sendRequest({
        jsonrpc: "2.0",
        method: "tools/call",
        params: {
            name: "get_suggestions",
            arguments: {
                error_code: "BSL003",
                context: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è–§—É–Ω–∫—Ü–∏—è() –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            }
        },
        id: 6
    });
    
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // 7. Test syntax validation with invalid code
    console.log("7Ô∏è‚É£ Test Syntax Validation with Invalid Code");
    sendRequest({
        jsonrpc: "2.0",
        method: "tools/call",
        params: {
            name: "validate_syntax",
            arguments: {
                bsl_code: "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –¢–µ—Å—Ç( // –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å"
            }
        },
        id: 7
    });
    
    // Wait for all responses
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // Close server
    server.stdin.end();
    server.kill();
    
    console.log("\n" + "=".repeat(60));
    console.log("üéâ Enhanced MCP Server Test completed!");
    console.log("=".repeat(60));
    console.log("‚úÖ Tested 4 BSL MCP Tools:");
    console.log("   ‚Ä¢ find_type - –ø–æ–∏—Å–∫ —Ç–∏–ø–æ–≤ –≤ UnifiedBslIndex");
    console.log("   ‚Ä¢ analyze_code - –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ BSL –∫–æ–¥–∞");  
    console.log("   ‚Ä¢ validate_syntax - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞");
    console.log("   ‚Ä¢ get_suggestions - –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é");
}

testEnhancedMcpServer().catch(console.error);