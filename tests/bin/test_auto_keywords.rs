//! –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ BSL –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
//!
//! –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∑–∞–º–µ–Ω—É —Ä—É—á–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
//! –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã

use bsl_analyzer::bsl_parser::keywords::keyword_generator::GeneratedBslKeywords;
use bsl_analyzer::bsl_parser::keywords::{
    is_bsl_builtin_type, is_bsl_global_function, is_bsl_platform_object, BslContext,
    GENERATED_BSL_KEYWORDS,
};

fn main() -> anyhow::Result<()> {
    println!("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ BSL –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤");
    println!("===============================================================");

    // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    println!("\nüìä –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã 8.3.25...");

    match GeneratedBslKeywords::load_from_platform_cache("8.3.25") {
        Ok(keywords) => {
            test_generated_keywords(&keywords)?;
        }
        Err(e) => {
            println!("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ—à–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: {}", e);
            println!("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: cargo run --bin extract_platform_docs -- --archive path/to/archive.zip --version 8.3.25");

            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π fallback
            test_global_fallback()?;
            return Ok(());
        }
    }

    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API (—Ä—É—á–Ω—ã–µ + –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ)
    test_combined_api()?;

    // 3. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Ä—É—á–Ω–æ–≥–æ –≤–µ–¥–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤
    demonstrate_scalability_solution()?;

    println!("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!");
    println!("üéØ –¢–µ–ø–µ—Ä—å –ø–∞—Ä—Å–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã 1–°");

    Ok(())
}

fn test_generated_keywords(keywords: &GeneratedBslKeywords) -> anyhow::Result<()> {
    println!("‚úÖ –ë–∞–∑–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:");
    println!("   üìö –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤: {}", keywords.builtin_types.len());
    println!(
        "   üîß –ì–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {}",
        keywords.global_functions.len()
    );
    println!(
        "   üèõÔ∏è  –°–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: {}",
        keywords.system_objects.len()
    );
    println!(
        "   üìã –ì–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤: {}",
        keywords.global_properties.len()
    );

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã
    println!("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤:");
    let test_types = [
        "–°—Ç—Ä–æ–∫–∞",
        "–ß–∏—Å–ª–æ",
        "–ú–∞—Å—Å–∏–≤",
        "–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π",
        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞",
        "–°–ø–∏—Å–æ–∫–ó–Ω–∞—á–µ–Ω–∏–π",
    ];

    for type_name in &test_types {
        let found = keywords.is_builtin_type(type_name);
        let status = if found { "‚úÖ" } else { "‚ùå" };
        println!("   {} {}: {}", status, type_name, found);
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    println!("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:");
    let test_functions = [
        "–°–æ–æ–±—â–∏—Ç—å",
        "–§–æ—Ä–º–∞—Ç",
        "–°—Ç—Ä–î–ª–∏–Ω–∞",
        "–¢–µ–∫—É—â–∞—è–î–∞—Ç–∞",
        "–ü—Ä–æ—á–∏—Ç–∞—Ç—åJSON",
    ];

    for func_name in &test_functions {
        let found = keywords.is_global_function(func_name);
        let status = if found { "‚úÖ" } else { "‚ùå" };
        println!("   {} {}: {}", status, func_name, found);
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    println!("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤:");
    let test_objects = [
        "–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ",
        "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏",
        "–î–æ–∫—É–º–µ–Ω—Ç—ã",
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π–ë–∞–∑—ã",
    ];

    for obj_name in &test_objects {
        let found = keywords.is_system_object(obj_name);
        let status = if found { "‚úÖ" } else { "‚ùå" };
        println!("   {} {}: {}", status, obj_name, found);
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    println!("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:");
    test_context_dependent_parsing(keywords);

    Ok(())
}

fn test_context_dependent_parsing(keywords: &GeneratedBslKeywords) {
    let test_cases = [
        (
            "–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π",
            BslContext::Expression,
            true,
            "–í –≤—ã—Ä–∞–∂–µ–Ω–∏–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π",
        ),
        (
            "–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π",
            BslContext::AfterNew,
            true,
            "–ü–æ—Å–ª–µ '–ù–æ–≤—ã–π' —è–≤–ª—è–µ—Ç—Å—è —Ç–∏–ø–æ–º",
        ),
        (
            "–ü–æ–ø—ã—Ç–∫–∞",
            BslContext::StatementStart,
            false,
            "–í –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ - –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ",
        ),
        (
            "–ü–æ–ø—ã—Ç–∫–∞",
            BslContext::Expression,
            false,
            "–í –≤—ã—Ä–∞–∂–µ–Ω–∏–∏ - —Å—Ç—Ä–æ–≥–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ",
        ),
        (
            "–°–æ–æ–±—â–∏—Ç—å",
            BslContext::Expression,
            false,
            "–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –Ω–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è",
        ),
    ];

    for (word, context, expected, description) in &test_cases {
        let result = keywords.can_be_variable(word, *context);
        let status = if result == *expected { "‚úÖ" } else { "‚ùå" };
        println!(
            "   {} {} –≤ {:?}: {} ({})",
            status, word, context, result, description
        );
    }
}

fn test_global_fallback() -> anyhow::Result<()> {
    println!("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ fallback (GENERATED_BSL_KEYWORDS):");

    // –î–∞–∂–µ –±–µ–∑ –∫–µ—à–∞, –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø—É—Å—Ç—ã–º–∏ —Å–ø–∏—Å–∫–∞–º–∏
    println!(
        "   üìä –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤: {}",
        GENERATED_BSL_KEYWORDS.builtin_types.len()
    );
    println!(
        "   üîß –ì–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {}",
        GENERATED_BSL_KEYWORDS.global_functions.len()
    );

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback –Ω–∞ —Ä—É—á–Ω—ã–µ —Å–ø–∏—Å–∫–∏
    println!("\n‚ö° Fallback –Ω–∞ —Ä—É—á–Ω—ã–µ —Å–ø–∏—Å–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");

    Ok(())
}

fn test_combined_api() -> anyhow::Result<()> {
    println!("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ API (—Ä—É—á–Ω—ã–µ + –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ):");

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —Ä—É—á–Ω—ã—Ö —Å–ø–∏—Å–∫–∞—Ö
    let manual_types = ["–°—Ç—Ä–æ–∫–∞", "–ß–∏—Å–ª–æ", "–ú–∞—Å—Å–∏–≤"];
    for type_name in &manual_types {
        let found = is_bsl_builtin_type(type_name);
        println!("   ‚úÖ {} (—Ä—É—á–Ω–æ–π —Å–ø–∏—Å–æ–∫): {}", type_name, found);
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
    let test_functions = ["–°–æ–æ–±—â–∏—Ç—å", "–¢–µ–∫—É—â–∞—è–î–∞—Ç–∞", "–§–æ—Ä–º–∞—Ç"];
    for func_name in &test_functions {
        let found = is_bsl_global_function(func_name);
        println!("   ‚úÖ {} (–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞): {}", func_name, found);
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    let test_objects = ["–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ", "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏"];
    for obj_name in &test_objects {
        let found = is_bsl_platform_object(obj_name);
        println!("   ‚úÖ {} (—Å–∏—Å—Ç–µ–º–Ω—ã–π –æ–±—ä–µ–∫—Ç): {}", obj_name, found);
    }

    println!("\nüí° –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥:");
    println!("   1Ô∏è‚É£  –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ä—É—á–Ω—ã–º —Å–ø–∏—Å–∫–∞–º");
    println!("   2Ô∏è‚É£  –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö");
    println!("   3Ô∏è‚É£  –ü–æ–ª–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ 3,918 —Ç–∏–ø–æ–≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã + —Ä—É—á–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è");

    Ok(())
}

fn demonstrate_scalability_solution() -> anyhow::Result<()> {
    println!("\nüéØ –†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –ú–ê–°–®–¢–ê–ë–ò–†–£–ï–ú–û–°–¢–ò:");
    println!("=====================================");

    println!("\n‚ùå –°–¢–ê–†–´–ô –ü–û–î–•–û–î (—Ä—É—á–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤):");
    println!("   ‚Ä¢ –ù—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å BSL_STRICT_KEYWORDS_RU");
    println!("   ‚Ä¢ –ù—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å BSL_BUILTIN_TYPES");
    println!("   ‚Ä¢ –ù—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å BSL_GLOBAL_FUNCTIONS");
    println!("   ‚Ä¢ –ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ 1–° - –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é");
    println!("   ‚Ä¢ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫");
    println!("   ‚Ä¢ –ù–µ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç—Å—è –¥–ª—è 3,918 —Ç–∏–ø–æ–≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã");

    println!("\n‚úÖ –ù–û–í–´–ô –ü–û–î–•–û–î (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è):");
    println!("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ ~/.bsl_analyzer/platform_cache/8.3.25.jsonl");
    println!("   ‚Ä¢ –ü–æ–ª–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö 3,918 —Ç–∏–ø–æ–≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã 1–°");
    println!("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–º–µ–Ω–µ –≤–µ—Ä—Å–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã");
    println!("   ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä—É—á–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏ fallback");
    println!("   ‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö");

    println!("\nüîß –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:");
    println!("   ‚Ä¢ Hybrid approach: —Ä—É—á–Ω—ã–µ —Å–ø–∏—Å–∫–∏ (–±—ã—Å—Ç—Ä–æ) + –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (–ø–æ–ª–Ω–æ)");
    println!("   ‚Ä¢ –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (Lazy<T>) - –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏");
    println!("   ‚Ä¢ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏");
    println!("   ‚Ä¢ Graceful fallback –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–µ—à–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã");

    println!("\n‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:");
    println!("   ‚Ä¢ O(1) lookup –≤ HashSet –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤");
    println!("   ‚Ä¢ –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ —Ä—É—á–Ω—ã—Ö —Å–ø–∏—Å–∫–∞—Ö (–¥–µ—Å—è—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤)");
    println!("   ‚Ä¢ –í—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (—Ç—ã—Å—è—á–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤)");
    println!("   ‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ~100-200 –Ω–∞–Ω–æ—Å–µ–∫—É–Ω–¥");

    println!("\nüöÄ –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:");
    println!("   // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –Ω–æ–≤—ã–µ —Ç–∏–ø—ã –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã");
    println!("   let is_type = is_bsl_builtin_type(\"–ù–æ–≤—ã–π–¢–∏–ø–ò–∑1–°8.3.26\");");
    println!("   ");
    println!("   // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö");
    println!("   let can_be_var = GENERATED_BSL_KEYWORDS.can_be_variable(");
    println!("       \"–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π\", BslContext::Expression);");

    Ok(())
}
