// –¢–µ—Å—Ç CLI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –Ω–æ–≤—ã–º BslAnalyzer
use bsl_analyzer::unified_index::UnifiedIndexBuilder;
use bsl_analyzer::{analyze_file, BslAnalyzer};
use std::path::Path;

fn main() -> anyhow::Result<()> {
    println!("üß™ –¢–µ—Å—Ç CLI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –Ω–æ–≤—ã–º BslAnalyzer");
    println!("=============================================");

    let test_file = "test_config/cli_test.bsl";

    if !Path::new(test_file).exists() {
        println!("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", test_file);
        return Ok(());
    }

    // 1. –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ (–±–µ–∑ UnifiedBslIndex)
    println!("\nüîß –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞");
    match analyze_file(test_file) {
        Ok(result) => {
            println!("‚úÖ {}", result);
        }
        Err(e) => {
            println!("‚ùå –û—à–∏–±–∫–∞: {}", e);
        }
    }

    // 2. –¢–µ—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å UnifiedBslIndex
    println!("\nüîß –¢–µ—Å—Ç 2: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å UnifiedBslIndex");

    // –°–æ–∑–¥–∞–µ–º UnifiedBslIndex (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    let config_path = Path::new("examples/ConfTest");
    if config_path.exists() {
        println!("üìö –°–æ–∑–¥–∞–Ω–∏–µ UnifiedBslIndex...");
        let mut builder = UnifiedIndexBuilder::new()?;
        let index = builder.build_index(config_path, "8.3.25")?;
        println!(
            "‚úÖ UnifiedBslIndex —Å–æ–∑–¥–∞–Ω: {} —Å—É—â–Ω–æ—Å—Ç–µ–π",
            index.get_all_entities().len()
        );

        // –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –∏–Ω–¥–µ–∫—Å–æ–º
        let mut analyzer = BslAnalyzer::with_index(index)?;

        // –ß–∏—Ç–∞–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª
        let content = std::fs::read_to_string(test_file)?;
        match analyzer.analyze_code(&content, test_file) {
            Ok(()) => {
                let results = analyzer.get_results();
                println!("‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω:");
                println!("   - –û—à–∏–±–∫–∏: {}", results.error_count());
                println!("   - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {}", results.warning_count());

                if results.has_errors() || results.has_warnings() {
                    println!("\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:");
                    println!("{}", results);
                }
            }
            Err(e) => {
                println!("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {}", e);
            }
        }
    } else {
        println!(
            "‚ö†Ô∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è examples/ConfTest –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å UnifiedBslIndex"
        );

        // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –±–µ–∑ UnifiedBslIndex
        let mut analyzer = BslAnalyzer::new()?;
        let content = std::fs::read_to_string(test_file)?;

        match analyzer.analyze_code(&content, test_file) {
            Ok(()) => {
                let results = analyzer.get_results();
                println!("‚úÖ –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω:");
                println!("   - –û—à–∏–±–∫–∏: {}", results.error_count());
                println!("   - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {}", results.warning_count());

                if results.has_errors() || results.has_warnings() {
                    println!("\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:");
                    println!("{}", results);
                }
            }
            Err(e) => {
                println!("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {}", e);
            }
        }
    }

    // 3. –¢–µ—Å—Ç —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    println!("\nüîß –¢–µ—Å—Ç 3: –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —Ç–∏–ø–∞–º–∏ –æ—à–∏–±–æ–∫");
    let mut analyzer = BslAnalyzer::new()?;
    let content = std::fs::read_to_string(test_file)?;

    match analyzer.analyze_code(&content, test_file) {
        Ok(()) => {
            let (errors, warnings) = analyzer.get_errors_and_warnings();

            println!("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
            println!("   - –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {}", errors.len());
            println!("   - –í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {}", warnings.len());

            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
            let mut error_codes = std::collections::HashMap::new();
            for error in &errors {
                if let Some(code) = &error.error_code {
                    *error_codes.entry(code.clone()).or_insert(0) += 1;
                }
            }

            for warning in &warnings {
                if let Some(code) = &warning.error_code {
                    *error_codes.entry(code.clone()).or_insert(0) += 1;
                }
            }

            if !error_codes.is_empty() {
                println!("\nüè∑Ô∏è  –ö–æ–¥—ã –æ—à–∏–±–æ–∫:");
                for (code, count) in &error_codes {
                    println!("   - {}: {} —Ä–∞–∑", code, count);
                }
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—à–∏–±–æ–∫
            if !errors.is_empty() {
                println!("\nüî¥ –ü–µ—Ä–≤—ã–µ –æ—à–∏–±–∫–∏:");
                for (i, error) in errors.iter().take(3).enumerate() {
                    println!(
                        "   {}. {}:{} - {}",
                        i + 1,
                        error.position.line,
                        error.position.column,
                        error.message
                    );
                    if let Some(code) = &error.error_code {
                        println!("      –ö–æ–¥: {}", code);
                    }
                }
            }
        }
        Err(e) => {
            println!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {}", e);
        }
    }

    println!("\nüéØ –¢–µ—Å—Ç CLI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω");
    println!(
        "üí° –î–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å main.rs –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ BslAnalyzer"
    );

    Ok(())
}
