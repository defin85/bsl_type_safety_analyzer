// –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ BSL –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å UnifiedBslIndex
use bsl_analyzer::unified_index::UnifiedIndexBuilder;
use bsl_analyzer::BslAnalyzer;
use std::path::Path;

fn main() -> anyhow::Result<()> {
    println!("üéØ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ BSL Type Safety Analyzer v1.2.0");
    println!("===========================================================");

    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π BSL –∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    let test_code = r#"
// –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤ –∏ –º–µ—Ç–æ–¥–æ–≤

#–û–±–ª–∞—Å—Ç—å –ü–æ–ª–Ω—ã–π–¢–µ—Å—Ç

// 1. –§—É–Ω–∫—Ü–∏—è —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ BSL010)
–§—É–Ω–∫—Ü–∏—è –¢–µ—Å—Ç–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ–ü–∞—Ä–∞–º–µ—Ç—Ä—ã(–ü–∞—Ä–∞–º–µ—Ç—Ä1, –ü–∞—Ä–∞–º–µ—Ç—Ä2, –ü–∞—Ä–∞–º–µ—Ç—Ä1) –≠–∫—Å–ø–æ—Ä—Ç
    –í–æ–∑–≤—Ä–∞—Ç –ü–∞—Ä–∞–º–µ—Ç—Ä1 + –ü–∞—Ä–∞–º–µ—Ç—Ä2;
–ö–æ–Ω–µ—Ü–§—É–Ω–∫—Ü–∏–∏

// 2. –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –≤—ã–∑–æ–≤–∞–º–∏ –º–µ—Ç–æ–¥–æ–≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤
–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ–í—ã–∑–æ–≤—ã–ú–µ—Ç–æ–¥–æ–≤() –≠–∫—Å–ø–æ—Ä—Ç
    
    // –ú–∞—Å—Å–∏–≤ - –≤—Å–µ –º–µ—Ç–æ–¥—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    –ú–∞—Å—Å–∏–≤ = –ù–æ–≤—ã–π –ú–∞—Å—Å–∏–≤();
    –ú–∞—Å—Å–∏–≤.–î–æ–±–∞–≤–∏—Ç—å("–≠–ª–µ–º–µ–Ω—Ç1");
    –ú–∞—Å—Å–∏–≤.–î–æ–±–∞–≤–∏—Ç—å("–≠–ª–µ–º–µ–Ω—Ç2");
    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ = –ú–∞—Å—Å–∏–≤.–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ();
    –≠–ª–µ–º–µ–Ω—Ç = –ú–∞—Å—Å–∏–≤.–ü–æ–ª—É—á–∏—Ç—å(0);
    
    // –°—Ç—Ä–æ–∫–∞ - –≤—Å–µ –º–µ—Ç–æ–¥—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç  
    –°—Ç—Ä–æ–∫–∞ = "–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞";
    –í–µ—Ä—Ö–Ω—è—è–°—Ç—Ä–æ–∫–∞ = –°—Ç—Ä–æ–∫–∞.–í–†–µ–≥();
    –ü–æ–∑–∏—Ü–∏—è = –°—Ç—Ä–æ–∫–∞.–ù–∞–π—Ç–∏("—Å—Ç—Ä–æ–∫–∞");
    
–ö–æ–Ω–µ—Ü–ü—Ä–æ—Ü–µ–¥—É—Ä—ã

// 3. –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –≤—ã–∑–æ–≤–∞–º–∏ –º–µ—Ç–æ–¥–æ–≤ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—à–∏–±–∫–∏ BSL003, BSL004)
–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ–í—ã–∑–æ–≤—ã–ú–µ—Ç–æ–¥–æ–≤() –≠–∫—Å–ø–æ—Ä—Ç
    
    // –í—ã–∑–æ–≤ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ—Ç–æ–¥–∞ –Ω–∞ –º–∞—Å—Å–∏–≤–µ
    –ú–∞—Å—Å–∏–≤ = –ù–æ–≤—ã–π –ú–∞—Å—Å–∏–≤();
    –ú–∞—Å—Å–∏–≤.–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π–ú–µ—Ç–æ–¥(); // BSL003
    
    // –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    –ú–∞—Å—Å–∏–≤.–î–æ–±–∞–≤–∏—Ç—å("–≠–ª–µ–º–µ–Ω—Ç", "–õ–∏—à–Ω–∏–π–ü–∞—Ä–∞–º–µ—Ç—Ä"); // BSL004 (–µ—Å–ª–∏ –ø–∞—Ä—Å–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã)
    
    // –í—ã–∑–æ–≤ –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º —Ç–∏–ø–µ
    –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π–¢–∏–ø.–°–¥–µ–ª–∞—Ç—å–ß—Ç–æ–¢–æ(); // BSL002 Warning
    
–ö–æ–Ω–µ—Ü–ü—Ä–æ—Ü–µ–¥—É—Ä—ã

// 4. –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —Å –Ω–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è BSL009)
–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –ù–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ() –≠–∫—Å–ø–æ—Ä—Ç
    
    –ü–µ—Ä–µ–º –ù–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è;
    –ü–µ—Ä–µ–º –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è = "–ó–Ω–∞—á–µ–Ω–∏–µ";
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)
    –ï—Å–ª–∏ –ù–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è <> –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –¢–æ–≥–¥–∞
        –°–æ–æ–±—â–∏—Ç—å("–ü—Ä–æ–±–ª–µ–º–∞");
    –ö–æ–Ω–µ—Ü–ï—Å–ª–∏;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å OK)
    –°–æ–æ–±—â–∏—Ç—å(–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è);
    
–ö–æ–Ω–µ—Ü–ü—Ä–æ—Ü–µ–¥—É—Ä—ã

// 5. –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —Å –Ω–µ–æ–±—ä—è–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—à–∏–±–∫–∏ BSL007)
–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –ù–µ–æ–±—ä—è–≤–ª–µ–Ω–Ω—ã–µ–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ() –≠–∫—Å–ø–æ—Ä—Ç
    
    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—ä—è–≤–ª–µ–Ω–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    –ù–µ–æ–±—ä—è–≤–ª–µ–Ω–Ω–∞—è–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è = "–û—à–∏–±–∫–∞"; // BSL007
    –°–æ–æ–±—â–∏—Ç—å(–ù–µ–æ–±—ä—è–≤–ª–µ–Ω–Ω–∞—è–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è);
    
–ö–æ–Ω–µ—Ü–ü—Ä–æ—Ü–µ–¥—É—Ä—ã

#–ö–æ–Ω–µ—Ü–û–±–ª–∞—Å—Ç–∏
"#;

    println!("üìñ –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω: {} —Å–∏–º–≤–æ–ª–æ–≤", test_code.len());

    // –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º UnifiedBslIndex
    println!("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ UnifiedBslIndex...");
    let config_path = Path::new("examples/ConfTest");
    let platform_version = "8.3.25";

    let mut builder = UnifiedIndexBuilder::new()?;
    let index = builder.build_index(config_path, platform_version)?;

    println!("‚úÖ UnifiedBslIndex —Å–æ–∑–¥–∞–Ω:");
    println!("   - –í—Å–µ–≥–æ —Å—É—â–Ω–æ—Å—Ç–µ–π: {}", index.get_all_entities().len());

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö —Ç–∏–ø–æ–≤
    let key_types = ["–ú–∞—Å—Å–∏–≤", "Array", "–°—Ç—Ä–æ–∫–∞", "String"];
    for type_name in &key_types {
        if let Some(entity) = index.find_entity(type_name) {
            let methods = index.get_all_methods(&entity.qualified_name);
            println!("   - {}: {} –º–µ—Ç–æ–¥–æ–≤", type_name, methods.len());
        }
    }

    // –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º BslAnalyzer —Å UnifiedBslIndex
    println!("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ BslAnalyzer —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π UnifiedBslIndex...");
    let mut analyzer = BslAnalyzer::with_index(index)?;

    // –®–∞–≥ 3: –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    println!("\nüîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ BSL –∫–æ–¥–∞...");
    match analyzer.analyze_code(test_code, "test_full_integration.bsl") {
        Ok(()) => {
            println!("‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");

            let results = analyzer.get_results();
            println!("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:");
            println!("   - –û—à–∏–±–∫–∏: {}", results.error_count());
            println!("   - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {}", results.warning_count());

            if results.has_errors() || results.has_warnings() {
                println!("\nüìã –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:");
                println!("{}", results);
            }

            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
            let (errors, warnings) = analyzer.get_errors_and_warnings();

            let mut bsl003_count = 0; // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã
            let mut bsl004_count = 0; // –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            let mut bsl007_count = 0; // –ù–µ–æ–±—ä—è–≤–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            let mut bsl009_count = 0; // –ù–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            let mut bsl010_count = 0; // –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

            for error in &errors {
                if let Some(code) = &error.error_code {
                    match code.as_str() {
                        "BSL003" => bsl003_count += 1,
                        "BSL004" => bsl004_count += 1,
                        "BSL007" => bsl007_count += 1,
                        "BSL009" => bsl009_count += 1,
                        "BSL010" => bsl010_count += 1,
                        _ => {}
                    }
                }
            }

            for warning in &warnings {
                if let Some(code) = &warning.error_code {
                    match code.as_str() {
                        "BSL007" => bsl007_count += 1,
                        "BSL009" => bsl009_count += 1,
                        _ => {}
                    }
                }
            }

            println!("\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫:");
            println!(
                "   - BSL003 (–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã): {} {}",
                bsl003_count,
                if bsl003_count > 0 { "‚úÖ" } else { "‚ùå" }
            );
            println!(
                "   - BSL004 (–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã): {} {}",
                bsl004_count,
                if bsl004_count > 0 { "‚úÖ" } else { "‚ùå" }
            );
            println!(
                "   - BSL007 (–ù–µ–æ–±—ä—è–≤–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ): {} {}",
                bsl007_count,
                if bsl007_count > 0 { "‚úÖ" } else { "‚ùå" }
            );
            println!(
                "   - BSL009 (–ù–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ): {} {}",
                bsl009_count,
                if bsl009_count > 0 { "‚úÖ" } else { "‚ùå" }
            );
            println!(
                "   - BSL010 (–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã): {} {}",
                bsl010_count,
                if bsl010_count > 0 { "‚úÖ" } else { "‚ùå" }
            );

            // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–µ–∑ –∏–Ω–¥–µ–∫—Å–∞
            println!("\nüîß –¢–µ—Å—Ç –±–µ–∑ UnifiedBslIndex (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)...");
            let mut simple_analyzer = BslAnalyzer::new()?;
            simple_analyzer.analyze_code(test_code, "test_simple.bsl")?;

            let simple_results = simple_analyzer.get_results();
            println!("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–∑ UnifiedBslIndex:");
            println!("   - –û—à–∏–±–∫–∏: {}", simple_results.error_count());
            println!("   - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {}", simple_results.warning_count());

            println!("\n‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ:");
            println!(
                "   - –° UnifiedBslIndex: {} –æ—à–∏–±–æ–∫, {} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π",
                results.error_count(),
                results.warning_count()
            );
            println!(
                "   - –ë–µ–∑ UnifiedBslIndex: {} –æ—à–∏–±–æ–∫, {} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π",
                simple_results.error_count(),
                simple_results.warning_count()
            );

            let improvement = results.error_count() + results.warning_count()
                - simple_results.error_count()
                - simple_results.warning_count();

            if improvement > 0 {
                println!(
                    "   üéØ –£–ª—É—á—à–µ–Ω–∏–µ: +{} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ",
                    improvement
                );
            }
        }
        Err(e) => {
            println!("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {}", e);
            return Err(e);
        }
    }

    println!("\nüéØ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω");
    println!("‚úÖ BSL Type Safety Analyzer v1.2.0 - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–µ–º–∞–Ω—Ç–∏–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!");

    Ok(())
}
