// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
use bsl_analyzer::bsl_parser::{SemanticAnalysisConfig, SemanticAnalyzer};
use bsl_analyzer::{BslAnalyzer, BslParser};

fn main() -> anyhow::Result<()> {
    println!("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ BSL");
    println!("==========================================");

    // –¢–µ—Å—Ç 1: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏
    println!("\nüìÅ –¢–µ—Å—Ç 1: –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ —Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏");

    let content = std::fs::read_to_string("test_semantic.bsl")?;
    println!("üìñ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {} —Å–∏–º–≤–æ–ª–æ–≤", content.len());

    // –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    let mut analyzer = BslAnalyzer::new()?;
    println!("üöÄ BslAnalyzer —Å–æ–∑–¥–∞–Ω");

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥
    match analyzer.analyze_code(&content, "test_semantic.bsl") {
        Ok(()) => {
            println!("‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");

            let results = analyzer.get_results();
            println!("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:");
            println!("   - –û—à–∏–±–∫–∏: {}", results.error_count());
            println!("   - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {}", results.warning_count());

            if results.has_errors() || results.has_warnings() {
                println!("\nüìã –î–µ—Ç–∞–ª–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:");
                println!("{}", results);
            } else {
                println!(
                    "‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã—è–≤–∏–ª –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø—Ä–æ–±–ª–µ–º - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä"
                );
            }
        }
        Err(e) => {
            println!("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {}", e);
        }
    }

    // –¢–µ—Å—Ç 2: –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    println!("\nüîß –¢–µ—Å—Ç 2: –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SemanticAnalyzer");

    let parser = BslParser::new()?;
    let parse_result = parser.parse(&content, "test_semantic.bsl");

    if let Some(ast) = parse_result.ast {
        println!("‚úÖ AST –ø–æ–ª—É—á–µ–Ω");

        let config = SemanticAnalysisConfig::default();
        let mut semantic = SemanticAnalyzer::new(config);

        match semantic.analyze(&ast) {
            Ok(()) => {
                let diagnostics = semantic.get_diagnostics();
                println!("üìä –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:");
                println!("   - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: {} —ç–ª–µ–º–µ–Ω—Ç–æ–≤", diagnostics.len());

                if !diagnostics.is_empty() {
                    println!("\nüìã –î–µ—Ç–∞–ª–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:");
                    for diag in diagnostics {
                        println!(
                            "  - {:?} –≤ {}:{}: {}",
                            diag.severity, diag.location.line, diag.location.column, diag.message
                        );
                    }
                } else {
                    println!("‚ö†Ô∏è –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã—è–≤–∏–ª –ø—Ä–æ–±–ª–µ–º");
                }
            }
            Err(e) => {
                println!("‚ùå –û—à–∏–±–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {}", e);
            }
        }
    } else {
        println!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å AST");
    }

    // –¢–µ—Å—Ç 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –∫–æ–¥–µ
    println!("\n‚ú® –¢–µ—Å—Ç 3: –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∫–æ–¥–∞");

    let correct_code = r#"
        –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è–ü—Ä–æ—Ü–µ–¥—É—Ä–∞(–ü–∞—Ä–∞–º–µ—Ç—Ä1, –ü–∞—Ä–∞–º–µ—Ç—Ä2) –≠–∫—Å–ø–æ—Ä—Ç
            –ü–µ—Ä–µ–º –õ–æ–∫–∞–ª—å–Ω–∞—è–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è;
            –õ–æ–∫–∞–ª—å–Ω–∞—è–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è = –ü–∞—Ä–∞–º–µ—Ç—Ä1 + –ü–∞—Ä–∞–º–µ—Ç—Ä2;
            –°–æ–æ–±—â–∏—Ç—å(–õ–æ–∫–∞–ª—å–Ω–∞—è–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è);
        –ö–æ–Ω–µ—Ü–ü—Ä–æ—Ü–µ–¥—É—Ä—ã
    "#;

    let mut analyzer2 = BslAnalyzer::new()?;
    match analyzer2.analyze_code(correct_code, "correct.bsl") {
        Ok(()) => {
            let results = analyzer2.get_results();
            println!(
                "‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥: {} –æ—à–∏–±–æ–∫, {} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π",
                results.error_count(),
                results.warning_count()
            );

            if results.has_errors() || results.has_warnings() {
                println!("üìã –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:");
                println!("{}", results);
            }
        }
        Err(e) => {
            println!("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∫–æ–¥–∞: {}", e);
        }
    }

    println!("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
    Ok(())
}
