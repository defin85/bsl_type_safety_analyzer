/*!
# Direct Base64 Test

–ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Base64 —Ñ—É–Ω–∫—Ü–∏–π –≤ UnifiedBslIndex
*/

use std::path::Path;
use anyhow::Result;
use bsl_analyzer::unified_index::{UnifiedIndexBuilder};

fn main() -> Result<()> {
    println!("üîç –ü–†–Ø–ú–ê–Ø –ü–†–û–í–ï–†–ö–ê BASE64 –§–£–ù–ö–¶–ò–ô");
    println!("{}", "=".repeat(60));
    
    // –°—Ç—Ä–æ–∏–º –∏–Ω–¥–µ–∫—Å
    let config_path = Path::new("examples/ConfTest");
    let platform_version = "8.3.25";
    
    let mut builder = UnifiedIndexBuilder::new()?;
    let index = builder.build_index(config_path, platform_version)?;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if let Some(global_entity) = index.find_entity("–ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç") {
        println!("‚úÖ –ù–∞–π–¥–µ–Ω –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å {} –º–µ—Ç–æ–¥–∞–º–∏", 
            global_entity.interface.methods.len());
        
        // –ò—â–µ–º Base64 —Ñ—É–Ω–∫—Ü–∏–∏
        let mut base64_functions = Vec::new();
        for (method_name, method) in &global_entity.interface.methods {
            if method_name.contains("Base64") || method_name.contains("base64") {
                base64_functions.push((method_name.clone(), method.clone()));
            }
        }
        
        println!("\nüìã –ù–∞–π–¥–µ–Ω–æ Base64 —Ñ—É–Ω–∫—Ü–∏–π: {}", base64_functions.len());
        println!("{}", "-".repeat(60));
        
        for (name, method) in base64_functions {
            let params: Vec<String> = method.parameters.iter().map(|p| {
                format!("{}: {}", p.name, p.type_name.as_deref().unwrap_or("–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π"))
            }).collect();
            
            let return_type = method.return_type.as_deref().unwrap_or("void");
            println!("‚úÖ {}({}): {}", 
                name.replace("–ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.", ""),
                params.join(", "), return_type);
                
            if let Some(doc) = &method.documentation {
                println!("   üìù {}", doc);
            }
            println!();
        }
        
    } else {
        println!("‚ùå –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    }
    
    Ok(())
}