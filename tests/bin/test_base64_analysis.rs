/*!
# Test Base64 Analysis

–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ BSL —Ñ–∞–π–ª–∞ —Å Base64 —Ñ—É–Ω–∫—Ü–∏—è–º–∏.
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ MethodVerifier –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ.
*/

use std::path::Path;
use anyhow::Result;
use bsl_analyzer::unified_index::{UnifiedIndexBuilder};
use bsl_analyzer::verifiers::method_verifier::{MethodVerifier, ArgumentInfo};

fn main() -> Result<()> {
    println!("üéØ –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó BSL –§–ê–ô–õ–ê –° BASE64 –§–£–ù–ö–¶–ò–Ø–ú–ò");
    println!("{}",  "=".repeat(80));
    
    // –°—Ç—Ä–æ–∏–º –µ–¥–∏–Ω—ã–π –∏–Ω–¥–µ–∫—Å
    println!("üìñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...");
    let config_path = Path::new("examples/ConfTest");
    let platform_version = "8.3.25";
    
    let mut builder = UnifiedIndexBuilder::new()?;
    let index = builder.build_index(config_path, platform_version)?;
    println!("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {} —Ç–∏–ø–æ–≤ BSL –≤ –∏–Ω–¥–µ–∫—Å", index.get_entity_count());
    
    // –°–æ–∑–¥–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–µ—Ç–æ–¥–æ–≤
    let verifier = MethodVerifier::new(index);
    println!("‚úÖ MethodVerifier –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    
    println!("\n{}", "=".repeat(80));
    println!("üîç –ê–ù–ê–õ–ò–ó BASE64 –§–£–ù–ö–¶–ò–ô –í BSL –ö–û–î–ï");
    println!("{}", "=".repeat(80));
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º Base64 —Ñ—É–Ω–∫—Ü–∏–∏
    analyze_base64_functions(&verifier);
    
    println!("\n{}", "=".repeat(80));
    println!("üîç –ê–ù–ê–õ–ò–ó –ú–ï–¢–û–î–û–í –û–ë–™–ï–ö–¢–û–í");
    println!("{}", "=".repeat(80));
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
    analyze_object_methods(&verifier);
    
    println!("\n{}", "=".repeat(80));
    println!("‚ùå –ê–ù–ê–õ–ò–ó –û–®–ò–ë–û–ö –í –ö–û–î–ï");
    println!("{}", "=".repeat(80));
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—à–∏–±–æ—á–Ω—ã–µ –≤—ã–∑–æ–≤—ã
    analyze_error_cases(&verifier);
    
    println!("\n{}", "=".repeat(80));
    println!("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ù–ê–õ–ò–ó–ê");
    println!("{}", "=".repeat(80));
    
    print_analysis_summary(&verifier);
    
    Ok(())
}

fn analyze_base64_functions(verifier: &MethodVerifier) {
    println!("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ Base64 —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ test_base64_example.bsl:");
    println!("{}", "-".repeat(60));
    
    let base64_functions = vec![
        ("Base64–ó–Ω–∞—á–µ–Ω–∏–µ", vec!["–î–∞–Ω–Ω—ã–µ"]),
        ("Base64–°—Ç—Ä–æ–∫–∞", vec!["–î–∞–Ω–Ω—ã–µ"], ),
        ("–ü–æ–ª—É—á–∏—Ç—å–î–≤–æ–∏—á–Ω—ã–µ–î–∞–Ω–Ω—ã–µ–ò–∑Base64–°—Ç—Ä–æ–∫–∏", vec!["–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è–°—Ç—Ä–æ–∫–∞"]),
    ];
    
    for (func_name, params) in base64_functions {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —á–µ—Ä–µ–∑ Global –∫–æ–Ω—Ç–µ–∫—Å—Ç
        let exists = verifier.verify_method_exists("–ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç", func_name);
        
        if exists {
            if let Some(signature) = verifier.get_method_signature("–ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç", func_name) {
                println!("‚úÖ {}: {}", func_name, signature);
                
                // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                let arguments: Vec<ArgumentInfo> = params.iter().enumerate().map(|(i, param)| {
                    ArgumentInfo {
                        arg_type: "–°—Ç—Ä–æ–∫–∞".to_string(),
                        value: Some(format!("\"{}\"", param)),
                        position: i,
                    }
                }).collect();
                
                let mut verifier_mut = create_verifier_copy(verifier);
                let result = verifier_mut.verify_call("–ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç", func_name, &arguments, 1);
                
                if result.is_valid {
                    println!("   ‚úÖ –í—ã–∑–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: –ö–û–†–†–ï–ö–¢–ï–ù");
                } else {
                    println!("   ‚ùå –í—ã–∑–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: –û–®–ò–ë–ö–ê - {}", 
                        result.error_message.unwrap_or("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞".to_string()));
                }
            } else {
                println!("‚ö†Ô∏è  {}: –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", func_name);
            }
        } else {
            println!("‚ùå {}: –ù–ï –ù–ê–ô–î–ï–ù–ê", func_name);
        }
    }
}

fn analyze_object_methods(verifier: &MethodVerifier) {
    println!("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞:");
    println!("{}", "-".repeat(60));
    
    let object_methods = vec![
        ("–°—Ç—Ä–æ–∫–∞", "–î–ª–∏–Ω–∞", vec![]),
        ("–°—Ç—Ä–æ–∫–∞", "–í–†–µ–≥", vec![]),
        ("–ú–∞—Å—Å–∏–≤", "–î–æ–±–∞–≤–∏—Ç—å", vec!["—ç–ª–µ–º–µ–Ω—Ç"]),
        ("–ú–∞—Å—Å–∏–≤", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", vec![]),
    ];
    
    for (object_type, method_name, params) in object_methods {
        let exists = verifier.verify_method_exists(object_type, method_name);
        
        if exists {
            if let Some(signature) = verifier.get_method_signature(object_type, method_name) {
                println!("‚úÖ {}.{}: {}", object_type, method_name, signature);
                
                if !params.is_empty() {
                    let arguments: Vec<ArgumentInfo> = params.iter().enumerate().map(|(i, param)| {
                        ArgumentInfo {
                            arg_type: "–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π".to_string(),
                            value: Some(format!("\"{}\"", param)),
                            position: i,
                        }
                    }).collect();
                    
                    let mut verifier_mut = create_verifier_copy(verifier); 
                    let result = verifier_mut.verify_call(object_type, method_name, &arguments, 1);
                    
                    if result.is_valid {
                        println!("   ‚úÖ –í—ã–∑–æ–≤: {}.{}({})", object_type, method_name, 
                            params.join(", "));
                    } else {
                        println!("   ‚ùå –í—ã–∑–æ–≤: –û–®–ò–ë–ö–ê - {}", 
                            result.error_message.unwrap_or("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞".to_string()));
                    }
                } else {
                    println!("   ‚úÖ –í—ã–∑–æ–≤: {}.{}() - –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", object_type, method_name);
                }
            } else {
                println!("‚ö†Ô∏è  {}.{}: –Ω–∞–π–¥–µ–Ω, –Ω–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", object_type, method_name);
            }
        } else {
            println!("‚ùå {}.{}: –ù–ï –ù–ê–ô–î–ï–ù", object_type, method_name);
        }
    }
}

fn analyze_error_cases(verifier: &MethodVerifier) {
    println!("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ—á–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞:");
    println!("{}", "-".repeat(60));
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    test_error_case(verifier, "–ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç", "Base64–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è–§—É–Ω–∫—Ü–∏—è", 
        vec!["–î–∞–Ω–Ω—ã–µ"], "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è Base64 —Ñ—É–Ω–∫—Ü–∏—è");
    
    test_error_case(verifier, "–ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç", "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è–§—É–Ω–∫—Ü–∏—è", 
        vec![], "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è");
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è Base64–ó–Ω–∞—á–µ–Ω–∏–µ
    test_error_case(verifier, "–ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç", "Base64–ó–Ω–∞—á–µ–Ω–∏–µ", 
        vec![], "Base64–ó–Ω–∞—á–µ–Ω–∏–µ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤");
    
    test_error_case(verifier, "–ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç", "Base64–ó–Ω–∞—á–µ–Ω–∏–µ", 
        vec!["–î–∞–Ω–Ω—ã–µ", "–ª–∏—à–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä"], "Base64–ó–Ω–∞—á–µ–Ω–∏–µ —Å –ª–∏—à–Ω–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º");
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã –æ–±—ä–µ–∫—Ç–æ–≤
    test_error_case(verifier, "–°—Ç—Ä–æ–∫–∞", "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π–ú–µ—Ç–æ–¥", 
        vec![], "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ —Å—Ç—Ä–æ–∫–∏");
}

fn test_error_case(verifier: &MethodVerifier, object_type: &str, method_name: &str, 
    params: Vec<&str>, description: &str) {
    
    let arguments: Vec<ArgumentInfo> = params.iter().enumerate().map(|(i, param)| {
        ArgumentInfo {
            arg_type: "–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π".to_string(),
            value: Some(format!("\"{}\"", param)),
            position: i,
        }
    }).collect();
    
    let mut verifier_mut = create_verifier_copy(verifier);
    let result = verifier_mut.verify_call(object_type, method_name, &arguments, 1);
    
    if !result.is_valid {
        println!("‚úÖ {}: –ö–û–†–†–ï–ö–¢–ù–û –û–ë–ù–ê–†–£–ñ–ï–ù–ê –û–®–ò–ë–ö–ê", description);
        if let Some(error) = &result.error_message {
            println!("   üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {}", error);
        }
        if !result.suggestions.is_empty() {
            println!("   üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {}", result.suggestions.join("; "));
        }
    } else {
        println!("‚ùå {}: –û–®–ò–ë–ö–ê –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–ê (—ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞!)", description);
    }
}

fn print_analysis_summary(verifier: &MethodVerifier) {
    println!("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏ –º–µ—Ç–æ–¥–æ–≤:");
    println!("{}", "-".repeat(60));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–ª—é—á–µ–≤—ã–º —Ç–∏–ø–∞–º
    let key_types = vec!["–°—Ç—Ä–æ–∫–∞", "–ú–∞—Å—Å–∏–≤", "–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π", "–ß—Ç–µ–Ω–∏–µXML"];
    
    for type_name in key_types {
        if verifier.verify_object_type(type_name) {
            let methods = verifier.get_available_methods(type_name);
            println!("‚úÖ {}: {} –º–µ—Ç–æ–¥–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ", type_name, methods.len());
            
            if methods.len() <= 5 {
                println!("   –ú–µ—Ç–æ–¥—ã: {}", methods.join(", "));
            } else {
                let sample: Vec<String> = methods.into_iter().take(3).collect();
                println!("   –ü—Ä–∏–º–µ—Ä—ã –º–µ—Ç–æ–¥–æ–≤: {}, ... (–∏ –¥—Ä—É–≥–∏–µ)", sample.join(", "));
            }
        } else {
            println!("‚ùå {}: —Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω", type_name);
        }
    }
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Global –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    if verifier.verify_object_type("–ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç") {
        let global_methods = verifier.get_available_methods("–ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç");
        println!("‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {} —Ñ—É–Ω–∫—Ü–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ", global_methods.len());
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º Base64 —Ñ—É–Ω–∫—Ü–∏–∏
        let base64_count = global_methods.iter()
            .filter(|method| method.to_lowercase().contains("base64"))
            .count();
        println!("   üìä –ò–∑ –Ω–∏—Ö Base64 —Ñ—É–Ω–∫—Ü–∏–π: {}", base64_count);
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º—É—Ç–∞–±–µ–ª—å–Ω–æ–π –∫–æ–ø–∏–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
fn create_verifier_copy(verifier: &MethodVerifier) -> MethodVerifier {
    MethodVerifier::new(verifier.unified_index.clone())
}