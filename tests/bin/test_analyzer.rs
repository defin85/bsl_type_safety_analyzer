// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
use bsl_analyzer::{analyze_file, BslAnalyzer, BslParser};

fn main() -> anyhow::Result<()> {
    println!("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ BSL Type Safety Analyzer v1.2.0");
    println!("==================================================");

    // –¢–µ—Å—Ç 1: –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ—á–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    println!("\nüìÅ –¢–µ—Å—Ç 1: –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ analyze_file()");
    match analyze_file("test_sample.bsl") {
        Ok(result) => {
            println!("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {}", result);
        }
        Err(e) => {
            println!("‚ùå –û—à–∏–±–∫–∞: {}", e);
        }
    }

    // –¢–µ—Å—Ç 2: –ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    println!("\nüîß –¢–µ—Å—Ç 2: –ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ BslAnalyzer");

    let content = std::fs::read_to_string("test_sample.bsl")?;
    println!("üìñ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {} —Å–∏–º–≤–æ–ª–æ–≤", content.len());

    // –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    let mut analyzer = BslAnalyzer::new()?;
    println!("üöÄ BslAnalyzer —Å–æ–∑–¥–∞–Ω");

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥
    match analyzer.analyze_code(&content, "test_sample.bsl") {
        Ok(()) => {
            println!("‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");

            // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            let results = analyzer.get_results();
            println!("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:");
            println!("   - –û—à–∏–±–∫–∏: {}", results.error_count());
            println!("   - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {}", results.warning_count());

            if results.has_errors() || results.has_warnings() {
                println!("\nüìã –î–µ—Ç–∞–ª–∏:");
                println!("{}", results);
            } else {
                println!("‚ú® –ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã—è–≤–∏–ª –ø—Ä–æ–±–ª–µ–º");
            }
        }
        Err(e) => {
            println!("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {}", e);
        }
    }

    // –¢–µ—Å—Ç 3: –ü–∞—Ä—Å–µ—Ä –æ—Ç–¥–µ–ª—å–Ω–æ
    println!("\n‚öôÔ∏è –¢–µ—Å—Ç 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞");

    let parser = BslParser::new()?;
    println!("üîß BslParser —Å–æ–∑–¥–∞–Ω");

    let parse_result = parser.parse(&content, "test_sample.bsl");
    match parse_result.ast {
        Some(ast) => {
            println!("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");
            println!(
                "üå≥ AST —Å–æ–¥–µ—Ä–∂–∏—Ç –º–æ–¥—É–ª—å —Å {} –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏",
                ast.module.declarations.len()
            );

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É AST
            for (i, decl) in ast.module.declarations.iter().enumerate() {
                match decl {
                    bsl_analyzer::bsl_parser::ast::Declaration::Procedure(proc) => {
                        println!(
                            "  {}. –ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {} (—ç–∫—Å–ø–æ—Ä—Ç: {})",
                            i + 1,
                            proc.name,
                            proc.export
                        );
                    }
                    bsl_analyzer::bsl_parser::ast::Declaration::Function(func) => {
                        println!(
                            "  {}. –§—É–Ω–∫—Ü–∏—è: {} (—ç–∫—Å–ø–æ—Ä—Ç: {})",
                            i + 1,
                            func.name,
                            func.export
                        );
                    }
                    bsl_analyzer::bsl_parser::ast::Declaration::Variable(var) => {
                        println!(
                            "  {}. –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {:?} (—ç–∫—Å–ø–æ—Ä—Ç: {})",
                            i + 1,
                            var.names,
                            var.export
                        );
                    }
                }
            }
        }
        None => {
            println!("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞");
        }
    }

    if !parse_result.diagnostics.is_empty() {
        println!("\n‚ö†Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞:");
        for diag in &parse_result.diagnostics {
            println!("  - {:?}: {}", diag.severity, diag.message);
        }
    }

    println!("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
    Ok(())
}
