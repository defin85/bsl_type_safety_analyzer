// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
use bsl_analyzer::{BslAnalyzer, BslParser};
use bsl_analyzer::bsl_parser::{SemanticAnalyzer, SemanticAnalysisConfig};

fn main() -> anyhow::Result<()> {
    println!("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞");
    println!("===================================================");
    
    // –¢–µ—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    println!("\nüìÅ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ –Ω–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏");
    
    let content = std::fs::read_to_string("test_advanced_semantic.bsl")?;
    println!("üìñ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {} —Å–∏–º–≤–æ–ª–æ–≤", content.len());
    
    // –¢–µ—Å—Ç 1: –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ BslAnalyzer
    println!("\nüîß –¢–µ—Å—Ç 1: –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ BslAnalyzer");
    let mut analyzer = BslAnalyzer::new()?;
    
    match analyzer.analyze_code(&content, "test_advanced_semantic.bsl") {
        Ok(()) => {
            let results = analyzer.get_results();
            println!("‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω:");
            println!("   - –û—à–∏–±–∫–∏: {}", results.error_count());
            println!("   - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {}", results.warning_count());
            
            if results.has_errors() || results.has_warnings() {
                println!("\nüìã –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:");
                println!("{}", results);
            }
        }
        Err(e) => {
            println!("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {}", e);
        }
    }
    
    // –¢–µ—Å—Ç 2: –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    println!("\nüîß –¢–µ—Å—Ç 2: –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑");
    
    let parser = BslParser::new()?;
    let parse_result = parser.parse(&content, "test_advanced_semantic.bsl");
    
    if let Some(ast) = parse_result.ast {
        println!("‚úÖ AST –ø–æ–ª—É—á–µ–Ω: {} –æ–±—ä—è–≤–ª–µ–Ω–∏–π", ast.module.declarations.len());
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        for (i, decl) in ast.module.declarations.iter().enumerate() {
            match decl {
                bsl_analyzer::bsl_parser::ast::Declaration::Procedure(proc) => {
                    println!("  {}. –ü—Ä–æ—Ü–µ–¥—É—Ä–∞: {} ({} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)", i+1, proc.name, proc.params.len());
                }
                bsl_analyzer::bsl_parser::ast::Declaration::Function(func) => {
                    println!("  {}. –§—É–Ω–∫—Ü–∏—è: {} ({} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)", i+1, func.name, func.params.len());
                }
                bsl_analyzer::bsl_parser::ast::Declaration::Variable(var) => {
                    println!("  {}. –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {:?}", i+1, var.names);
                }
            }
        }
        
        let mut config = SemanticAnalysisConfig::default();
        config.check_duplicate_parameters = true;
        config.check_uninitialized_variables = true;
        config.check_undeclared_variables = true;
        
        let mut semantic = SemanticAnalyzer::new(config);
        
        match semantic.analyze(&ast) {
            Ok(()) => {
                let diagnostics = semantic.get_diagnostics();
                println!("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:");
                println!("   - –í—Å–µ–≥–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫: {}", diagnostics.len());
                
                let mut errors = 0;
                let mut warnings = 0;
                
                for diag in diagnostics {
                    match diag.severity {
                        bsl_analyzer::bsl_parser::DiagnosticSeverity::Error => errors += 1,
                        _ => warnings += 1,
                    }
                    
                    println!("  {:?} –≤ {}:{}: {}", 
                        diag.severity, 
                        diag.location.line, 
                        diag.location.column,
                        diag.message
                    );
                }
                
                println!("\nüìà –°–≤–æ–¥–∫–∞: {} –æ—à–∏–±–æ–∫, {} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π", errors, warnings);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—à–ª–∏ –æ–∂–∏–¥–∞–µ–º—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
                let messages: Vec<&str> = diagnostics.iter().map(|d| d.message.as_str()).collect();
                
                let has_duplicate_params = messages.iter().any(|m| m.contains("–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä"));
                let has_undeclared_vars = messages.iter().any(|m| m.contains("–Ω–µ –æ–±—ä—è–≤–ª–µ–Ω–∞"));
                
                println!("\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø—Ä–æ–±–ª–µ–º:");
                println!("   - –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {}", if has_duplicate_params { "‚úÖ –Ω–∞–π–¥–µ–Ω—ã" } else { "‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" });
                println!("   - –ù–µ–æ–±—ä—è–≤–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {}", if has_undeclared_vars { "‚úÖ –Ω–∞–π–¥–µ–Ω—ã" } else { "‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" });
                
            }
            Err(e) => {
                println!("‚ùå –û—à–∏–±–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {}", e);
            }
        }
    } else {
        println!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å AST");
    }
    
    println!("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
    Ok(())
}