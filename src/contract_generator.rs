/*!
# Contract Generator Launcher

–ï–¥–∏–Ω—ã–π –∑–∞–ø—É—Å–∫–∞—Ç–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö 1–°.
–ü–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —Å Python –ø—Ä–æ–µ–∫—Ç–∞ onec-contract-generator –Ω–∞ Rust.

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é:
- –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Ç.–¥.)
- –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Ñ–æ—Ä–º
- –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –º–æ–¥—É–ª–µ–π (–∑–∞–≥–ª—É—à–∫–∞)
*/

use std::path::{Path, PathBuf};
use anyhow::{Context, Result};
use serde_json;
use console::style;
use indicatif::{ProgressBar, ProgressStyle};

use crate::configuration::{
    MetadataReportParser, FormXmlParser, ModuleGenerator,
    MetadataContract, FormContract, ModuleContract
};

/// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
#[derive(Debug, Clone)]
pub struct GenerationComponents {
    pub metadata: bool,
    pub forms: bool,
    pub modules: bool,
}

impl Default for GenerationComponents {
    fn default() -> Self {
        Self {
            metadata: true,
            forms: true,
            modules: false, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
        }
    }
}

/// –ï–¥–∏–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
pub struct ContractGeneratorLauncher {
    conf_dir: PathBuf,
    report_path: Option<PathBuf>,
    output_dir: PathBuf,
    components: GenerationComponents,
}

impl ContractGeneratorLauncher {
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    pub fn new<P: AsRef<Path>>(conf_dir: P, output_dir: P) -> Self {
        Self {
            conf_dir: conf_dir.as_ref().to_path_buf(),
            report_path: None,
            output_dir: output_dir.as_ref().to_path_buf(),
            components: GenerationComponents::default(),
        }
    }
    
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—É—Ç—å –∫ –æ—Ç—á–µ—Ç—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    pub fn with_report_path<P: AsRef<Path>>(mut self, report_path: P) -> Self {
        self.report_path = Some(report_path.as_ref().to_path_buf());
        self
    }
    
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    pub fn with_components(mut self, components: GenerationComponents) -> Self {
        self.components = components;
        self
    }
    
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    pub fn run_generation(&self) -> Result<GenerationResult> {
        println!("\n{}", style("=".repeat(60)).blue());
        println!("{}", style("üöÄ –ó–ê–ü–£–°–ö –ì–ï–ù–ï–†–ê–¶–ò–ò –ö–û–ù–¢–†–ê–ö–¢–û–í").bold().cyan());
        println!("{}", style("=".repeat(60)).blue());
        
        let mut result = GenerationResult::default();
        
        // –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        std::fs::create_dir_all(&self.output_dir)
            .context("Failed to create output directory")?;
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        if self.components.metadata {
            println!("\n{}", style("üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...").yellow());
            
            match self.generate_metadata_contracts() {
                Ok(contracts) => {
                    result.metadata_count = contracts.len();
                    result.metadata_success = true;
                    println!("{}", style(format!("‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö", contracts.len())).green());
                }
                Err(e) => {
                    result.metadata_error = Some(e.to_string());
                    println!("{}", style(format!("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {}", e)).red());
                }
            }
        }
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Ñ–æ—Ä–º
        if self.components.forms {
            println!("\n{}", style("üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Ñ–æ—Ä–º...").yellow());
            
            let pb = ProgressBar::new_spinner();
            pb.set_style(
                ProgressStyle::default_spinner()
                    .template("{spinner:.cyan} {msg}")
                    .unwrap()
            );
            pb.set_message("–ü–æ–∏—Å–∫ —Ñ–æ—Ä–º...");
            
            match self.generate_form_contracts() {
                Ok(contracts) => {
                    pb.finish_and_clear();
                    result.forms_count = contracts.len();
                    result.forms_success = true;
                    println!("{}", style(format!("‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Ñ–æ—Ä–º", contracts.len())).green());
                }
                Err(e) => {
                    pb.finish_and_clear();
                    result.forms_error = Some(e.to_string());
                    println!("{}", style(format!("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–º: {}", e)).red());
                }
            }
        }
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–æ–¥—É–ª–µ–π (–∑–∞–≥–ª—É—à–∫–∞)
        if self.components.modules {
            println!("\n{}", style("üì¶ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–æ–¥—É–ª–µ–π...").yellow());
            
            match self.generate_module_contracts() {
                Ok(_) => {
                    result.modules_success = true;
                    println!("{}", style("‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –º–æ–¥—É–ª–µ–π (–∑–∞–≥–ª—É—à–∫–∞) —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã").green());
                }
                Err(e) => {
                    result.modules_error = Some(e.to_string());
                    println!("{}", style(format!("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π: {}", e)).red());
                }
            }
        }
        
        // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.print_summary(&result);
        
        Ok(result)
    }
    
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    fn generate_metadata_contracts(&self) -> Result<Vec<MetadataContract>> {
        let output_dir = self.output_dir.join("metadata");
        std::fs::create_dir_all(&output_dir)?;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –æ—Ç—á–µ—Ç—É
        let report_path = if let Some(ref path) = self.report_path {
            path.clone()
        } else {
            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –æ—Ç—á–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            let possible_paths = vec![
                self.conf_dir.join("config_report.txt"),
                self.conf_dir.join("–û—Ç—á–µ—Ç–ü–æ–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.txt"),
                self.conf_dir.join("ConfigurationReport.txt"),
            ];
            
            possible_paths.into_iter()
                .find(|p| p.exists())
                .ok_or_else(|| anyhow::anyhow!("Configuration report not found"))?
        };
        
        // –ü–∞—Ä—Å–∏–º –æ—Ç—á–µ—Ç
        let parser = MetadataReportParser::new()?;
        let contracts = parser.parse_report(report_path)?;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
        for contract in &contracts {
            let filename = format!("{}.{}.json", contract.object_type, contract.name);
            let filepath = output_dir.join(filename);
            
            let json = serde_json::to_string_pretty(contract)?;
            std::fs::write(filepath, json)?;
        }
        
        Ok(contracts)
    }
    
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Ñ–æ—Ä–º
    fn generate_form_contracts(&self) -> Result<Vec<FormContract>> {
        let output_dir = self.output_dir.join("forms");
        std::fs::create_dir_all(&output_dir)?;
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Ñ–æ—Ä–º
        let parser = FormXmlParser::new();
        let contracts = parser.generate_all_contracts(&self.conf_dir)?;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
        for contract in &contracts {
            let filename = format!("{}.json", contract.name);
            let filepath = output_dir.join(filename);
            
            let json = serde_json::to_string_pretty(contract)?;
            std::fs::write(filepath, json)?;
        }
        
        Ok(contracts)
    }
    
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –º–æ–¥—É–ª–µ–π (–∑–∞–≥–ª—É—à–∫–∞)
    fn generate_module_contracts(&self) -> Result<Vec<ModuleContract>> {
        let output_dir = self.output_dir.join("modules");
        
        let mut generator = ModuleGenerator::new(&self.conf_dir, &output_dir);
        generator.generate()?;
        generator.print_logs();
        
        Ok(vec![])
    }
    
    /// –í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    fn print_summary(&self, result: &GenerationResult) {
        println!("\n{}", style("=".repeat(60)).blue());
        println!("{}", style("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê").bold().cyan());
        println!("{}", style("=".repeat(60)).blue());
        
        if self.components.metadata {
            let status = if result.metadata_success {
                style("‚úÖ –£—Å–ø–µ—à–Ω–æ").green()
            } else {
                style("‚ùå –û—à–∏–±–∫–∞").red()
            };
            println!("–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {} ({})", result.metadata_count, status);
        }
        
        if self.components.forms {
            let status = if result.forms_success {
                style("‚úÖ –£—Å–ø–µ—à–Ω–æ").green()
            } else {
                style("‚ùå –û—à–∏–±–∫–∞").red()
            };
            println!("–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Ñ–æ—Ä–º: {} ({})", result.forms_count, status);
        }
        
        if self.components.modules {
            let status = if result.modules_success {
                style("‚úÖ –ó–∞–≥–ª—É—à–∫–∞").green()
            } else {
                style("‚ùå –û—à–∏–±–∫–∞").red()
            };
            println!("–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –º–æ–¥—É–ª–µ–π: {}", status);
        }
        
        println!("\n–í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {}", self.output_dir.display());
        println!("{}", style("=".repeat(60)).blue());
    }
}

/// –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
#[derive(Default)]
pub struct GenerationResult {
    pub metadata_count: usize,
    pub metadata_success: bool,
    pub metadata_error: Option<String>,
    
    pub forms_count: usize,
    pub forms_success: bool,
    pub forms_error: Option<String>,
    
    pub modules_count: usize,
    pub modules_success: bool,
    pub modules_error: Option<String>,
}

#[cfg(test)]
mod tests {
    use super::*;
    use tempfile::TempDir;
    
    #[test]
    fn test_contract_generator_creation() {
        let temp_dir = TempDir::new().unwrap();
        let generator = ContractGeneratorLauncher::new(temp_dir.path(), temp_dir.path());
        
        assert_eq!(generator.conf_dir, temp_dir.path());
        assert_eq!(generator.output_dir, temp_dir.path());
    }
}