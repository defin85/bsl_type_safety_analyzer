/*!
# Text Reporter

–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è BSL –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞.

## –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ANSI)
- –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ñ–∞–π–ª–∞–º –∏ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
- –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —É—Ä–æ–≤–Ω—é —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
- –ö—Ä–∞—Ç–∫–∏–π –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
- –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å CI/CD (–±–µ–∑ —Ü–≤–µ—Ç–æ–≤)

## –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:

```rust
use bsl_analyzer::reports::text::TextReporter;

let reporter = TextReporter::new();
let text_output = reporter.generate_report(&analysis_results, &config)?;
println!("{}", text_output);
```
*/

use std::collections::HashMap;
use anyhow::Result;
use crate::core::AnalysisResults;
use super::{ReportGenerator, ReportConfig, ReportFormat};

/// –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
pub struct TextReporter {
    /// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥
    use_colors: bool,
    /// –î–µ—Ç–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    detailed_format: bool,
    /// –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ñ–∞–π–ª–∞–º
    group_by_files: bool,
}

/// –¶–≤–µ—Ç–∞ –¥–ª—è ANSI –≤—ã–≤–æ–¥–∞
struct Colors;

impl Colors {
    const RESET: &'static str = "\x1b[0m";
    const BOLD: &'static str = "\x1b[1m";
    const RED: &'static str = "\x1b[31m";
    const YELLOW: &'static str = "\x1b[33m";
    const BLUE: &'static str = "\x1b[34m";
    const GREEN: &'static str = "\x1b[32m";
    const CYAN: &'static str = "\x1b[36m";
    const GRAY: &'static str = "\x1b[90m";
}

impl TextReporter {
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç–µ—Ä
    pub fn new() -> Self {
        Self {
            use_colors: Self::supports_colors(),
            detailed_format: true,
            group_by_files: true,
        }
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç —Ä–µ–ø–æ—Ä—Ç–µ—Ä —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    pub fn with_config(use_colors: bool, detailed: bool, group_by_files: bool) -> Self {
        Self {
            use_colors,
            detailed_format: detailed,
            group_by_files,
        }
    }
    
    /// –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–π —Ä–µ–ø–æ—Ä—Ç–µ—Ä –¥–ª—è CI/CD
    pub fn brief() -> Self {
        Self {
            use_colors: false,
            detailed_format: false,
            group_by_files: false,
        }
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ü–≤–µ—Ç–æ–≤ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
    fn supports_colors() -> bool {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if std::env::var("NO_COLOR").is_ok() {
            return false;
        }
        
        if std::env::var("FORCE_COLOR").is_ok() {
            return true;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º TERM
        if let Ok(term) = std::env::var("TERM") {
            if term == "dumb" || term.is_empty() {
                return false;
            }
        }
        
        // –í Windows –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É ANSI
        #[cfg(windows)]
        {
            
            unsafe {
                let console_mode = winapi::um::wincon::GetConsoleMode;
                let std_output_handle = winapi::um::winbase::GetStdHandle;
                let enable_virtual_terminal = winapi::um::wincon::ENABLE_VIRTUAL_TERMINAL_PROCESSING;
                
                let handle = std_output_handle(winapi::um::winbase::STD_OUTPUT_HANDLE);
                if handle != winapi::um::handleapi::INVALID_HANDLE_VALUE {
                    let mut mode = 0;
                    if console_mode(handle, &mut mode) != 0 {
                        return (mode & enable_virtual_terminal) != 0;
                    }
                }
            }
            
            false
        }
        
        #[cfg(not(windows))]
        {
            true // –ù–∞ Unix —Å–∏—Å—Ç–µ–º–∞—Ö –æ–±—ã—á–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ü–≤–µ—Ç–∞
        }
    }
    
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
    fn generate_text_report(&self, results: &AnalysisResults, config: &ReportConfig) -> Result<String> {
        let mut output = String::new();
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
        output.push_str(&self.generate_header());
        
        // –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        output.push_str(&self.generate_summary(results));
        
        // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        if self.group_by_files {
            output.push_str(&self.generate_results_by_files(results, config));
        } else {
            output.push_str(&self.generate_results_list(results, config));
        }
        
        // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã)
        if config.include_dependencies {
            output.push_str(&self.generate_dependencies_summary(results));
        }
        
        // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
        if config.include_performance {
            output.push_str(&self.generate_performance_summary(results));
        }
        
        Ok(output)
    }
    
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
    fn generate_header(&self) -> String {
        let title = if self.use_colors {
            format!("{}{}üîç BSL Analysis Report{}\n", Colors::BOLD, Colors::CYAN, Colors::RESET)
        } else {
            "BSL Analysis Report\n".to_string()
        };
        
        let separator = if self.use_colors {
            format!("{}{}{}\n", Colors::GRAY, "=".repeat(50), Colors::RESET)
        } else {
            format!("{}\n", "=".repeat(50))
        };
        
        format!("{}{}\n", title, separator)
    }
    
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    fn generate_summary(&self, results: &AnalysisResults) -> String {
        let errors_count = results.get_errors().len();
        let warnings_count = results.get_warnings().len();
        let total_files = self.get_unique_files_count(results);
        
        let mut summary = String::new();
        
        if self.use_colors {
            summary.push_str(&format!("{}Summary:{}\n", Colors::BOLD, Colors::RESET));
            summary.push_str(&format!("  {}Errors:{} {}{}{}\n", 
                Colors::BOLD, Colors::RESET, Colors::RED, errors_count, Colors::RESET));
            summary.push_str(&format!("  {}Warnings:{} {}{}{}\n", 
                Colors::BOLD, Colors::RESET, Colors::YELLOW, warnings_count, Colors::RESET));
            summary.push_str(&format!("  {}Files analyzed:{} {}{}{}\n", 
                Colors::BOLD, Colors::RESET, Colors::BLUE, total_files, Colors::RESET));
        } else {
            summary.push_str("Summary:\n");
            summary.push_str(&format!("  Errors: {}\n", errors_count));
            summary.push_str(&format!("  Warnings: {}\n", warnings_count));
            summary.push_str(&format!("  Files analyzed: {}\n", total_files));
        }
        
        summary.push('\n');
        summary
    }
    
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Ñ–∞–π–ª–∞–º
    fn generate_results_by_files(&self, results: &AnalysisResults, config: &ReportConfig) -> String {
        let mut output = String::new();
        let mut files_map: HashMap<String, Vec<&crate::core::AnalysisError>> = HashMap::new();
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ —Ñ–∞–π–ª–∞–º
        for error in results.get_errors() {
            let file_path = error.file_path.display().to_string();
            files_map.entry(file_path).or_default().push(error);
        }
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ —Ñ–∞–π–ª–∞–º
        for warning in results.get_warnings() {
            let file_path = warning.file_path.display().to_string();
            files_map.entry(file_path).or_default().push(warning);
        }
        
        if files_map.is_empty() {
            output.push_str(&self.colorize("‚úÖ No issues found!\n", Colors::GREEN));
            return output;
        }
        
        output.push_str(&self.colorize("Issues by files:\n", Colors::BOLD));
        output.push('\n');
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–±–ª–µ–º
        let mut sorted_files: Vec<_> = files_map.iter().collect();
        sorted_files.sort_by(|a, b| b.1.len().cmp(&a.1.len()));
        
        for (file_path, errors) in sorted_files {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞
            let file_name = std::path::Path::new(file_path)
                .file_name()
                .and_then(|n| n.to_str())
                .unwrap_or(file_path);
            
            output.push_str(&self.colorize(&format!("üìÅ {} ({} issues)\n", file_name, errors.len()), Colors::BOLD));
            
            if self.use_colors {
                output.push_str(&format!("   {}{}{}\n", Colors::GRAY, file_path, Colors::RESET));
            } else {
                output.push_str(&format!("   {}\n", file_path));
            }
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
            let mut sorted_errors = errors.clone();
            sorted_errors.sort_by(|a, b| a.position.line.cmp(&b.position.line));
            
            for error in sorted_errors {
                output.push_str(&self.format_error_line(error, config, true));
            }
            
            output.push('\n');
        }
        
        output
    }
    
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    fn generate_results_list(&self, results: &AnalysisResults, config: &ReportConfig) -> String {
        let mut output = String::new();
        
        let total_issues = results.get_errors().len() + results.get_warnings().len();
        if total_issues == 0 {
            output.push_str(&self.colorize("‚úÖ No issues found!\n", Colors::GREEN));
            return output;
        }
        
        output.push_str(&self.colorize("Issues found:\n", Colors::BOLD));
        output.push('\n');
        
        // –û—à–∏–±–∫–∏
        if !results.get_errors().is_empty() {
            output.push_str(&self.colorize("Errors:\n", Colors::RED));
            for error in results.get_errors() {
                output.push_str(&self.format_error_line(error, config, true));
            }
            output.push('\n');
        }
        
        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if !results.get_warnings().is_empty() {
            output.push_str(&self.colorize("Warnings:\n", Colors::YELLOW));
            for warning in results.get_warnings() {
                output.push_str(&self.format_error_line(warning, config, false));
            }
        }
        
        output
    }
    
    /// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –æ—à–∏–±–∫–∏
    fn format_error_line(&self, error: &crate::core::AnalysisError, _config: &ReportConfig, is_error: bool) -> String {
        let mut line = String::new();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å –ø–æ —Ç–∏–ø—É
        let (severity_symbol, severity_color) = if is_error {
            ("‚ùå", Colors::RED)
        } else {
            ("‚ö†Ô∏è", Colors::YELLOW)
        };
        
        if self.detailed_format {
            // –î–µ—Ç–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            let file_name = error.file_path.file_name()
                .and_then(|n| n.to_str())
                .unwrap_or("unknown");
            
            let position = format!("{}:{}", error.position.line, error.position.column);
            let error_code = error.error_code.as_deref().unwrap_or("N/A");
            
            if self.use_colors {
                line.push_str(&format!("  {} {}[{}]{} {}{}:{}{} {}{}{}\n",
                    severity_symbol,
                    severity_color, error_code, Colors::RESET,
                    Colors::CYAN, file_name, Colors::RESET,
                    Colors::GRAY, position, Colors::RESET,
                    error.message
                ));
            } else {
                line.push_str(&format!("  [{}] {}:{} {}\n", 
                    error_code, file_name, position, error.message));
            }
        } else {
            // –ö—Ä–∞—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
            if self.use_colors {
                line.push_str(&format!("  {} {}\n", severity_symbol, error.message));
            } else {
                line.push_str(&format!("  {}\n", error.message));
            }
        }
        
        line
    }
    
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    fn generate_dependencies_summary(&self, _results: &AnalysisResults) -> String {
        let mut output = String::new();
        output.push_str(&self.colorize("Dependencies Analysis:\n", Colors::BOLD));
        output.push_str("  Dependencies analysis will be available in the next version.\n");
        output.push('\n');
        output
    }
    
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    fn generate_performance_summary(&self, _results: &AnalysisResults) -> String {
        let mut output = String::new();
        output.push_str(&self.colorize("Performance Metrics:\n", Colors::BOLD));
        output.push_str("  Performance metrics will be available in the next version.\n");
        output.push('\n');
        output
    }
    
    /// –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç –∫ —Ç–µ–∫—Å—Ç—É –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã —Ü–≤–µ—Ç–∞
    fn colorize(&self, text: &str, color: &str) -> String {
        if self.use_colors {
            format!("{}{}{}", color, text, Colors::RESET)
        } else {
            text.to_string()
        }
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    fn get_unique_files_count(&self, results: &AnalysisResults) -> usize {
        let mut files = std::collections::HashSet::new();
        
        for error in results.get_errors() {
            files.insert(&error.file_path);
        }
        
        for warning in results.get_warnings() {
            files.insert(&warning.file_path);
        }
        
        files.len()
    }
}

impl ReportGenerator for TextReporter {
    fn generate_report(&self, results: &AnalysisResults, config: &ReportConfig) -> Result<String> {
        self.generate_text_report(results, config)
    }
    
    fn supported_format() -> ReportFormat {
        ReportFormat::Text
    }
}

impl Default for TextReporter {
    fn default() -> Self {
        Self::new()
    }
}

// –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è Windows API (—É—Å–ª–æ–≤–Ω–∞—è –∫–æ–º–ø–∏–ª—è—Ü–∏—è)
#[cfg(windows)]
mod winapi {
    pub mod um {
        pub mod wincon {
            pub const ENABLE_VIRTUAL_TERMINAL_PROCESSING: u32 = 0x0004;
            
            extern "system" {
                pub fn GetConsoleMode(
                    hConsoleHandle: *mut std::ffi::c_void,
                    lpMode: *mut u32,
                ) -> i32;
            }
        }
        
        pub mod winbase {
            pub const STD_OUTPUT_HANDLE: u32 = 0xFFFFFFF5;
            
            extern "system" {
                pub fn GetStdHandle(nStdHandle: u32) -> *mut std::ffi::c_void;
            }
        }
        
        pub mod handleapi {
            pub const INVALID_HANDLE_VALUE: *mut std::ffi::c_void = -1isize as *mut std::ffi::c_void;
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use std::path::PathBuf;
    use crate::core::{AnalysisResults, AnalysisError};
    use crate::parser::Position;
    
    fn create_test_results() -> AnalysisResults {
        let mut results = AnalysisResults::new();
        
        results.add_error(AnalysisError {
            message: "–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞".to_string(),
            file_path: PathBuf::from("test.bsl"),
            position: Position { line: 10, column: 5, offset: 100 },
            level: crate::core::ErrorLevel::Error,
            error_code: Some("BSL001".to_string()),
            suggestion: None,
            related_positions: Vec::new(),
        });
        
        results.add_warning(AnalysisError {
            message: "–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ".to_string(),
            file_path: PathBuf::from("module.bsl"),
            position: Position { line: 25, column: 12, offset: 250 },
            level: crate::core::ErrorLevel::Warning,
            error_code: Some("BSL004".to_string()),
            suggestion: None,
            related_positions: Vec::new(),
        });
        
        results
    }
    
    #[test]
    fn test_text_reporter_creation() {
        let reporter = TextReporter::new();
        assert!(reporter.detailed_format);
        assert!(reporter.group_by_files);
    }
    
    #[test]
    fn test_brief_reporter() {
        let reporter = TextReporter::brief();
        assert!(!reporter.use_colors);
        assert!(!reporter.detailed_format);
        assert!(!reporter.group_by_files);
    }
    
    #[test]
    fn test_text_report_generation() {
        let reporter = TextReporter::with_config(false, true, false); // –ë–µ–∑ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
        let results = create_test_results();
        let config = ReportConfig::default();
        
        let text_output = reporter.generate_report(&results, &config).unwrap();
        
        assert!(text_output.contains("BSL Analysis Report"));
        assert!(text_output.contains("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞"));
        assert!(text_output.contains("–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"));
        assert!(text_output.contains("Errors: 1"));
        assert!(text_output.contains("Warnings: 1"));
    }
    
    #[test]
    fn test_colorize() {
        let reporter_with_colors = TextReporter::with_config(true, true, false);
        let reporter_no_colors = TextReporter::with_config(false, true, false);
        
        let colored_text = reporter_with_colors.colorize("test", Colors::RED);
        let plain_text = reporter_no_colors.colorize("test", Colors::RED);
        
        assert!(colored_text.contains("\x1b[31m")); // ANSI –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
        assert_eq!(plain_text, "test");
    }
    
    #[test]
    fn test_unique_files_count() {
        let reporter = TextReporter::new();
        let results = create_test_results();
        
        assert_eq!(reporter.get_unique_files_count(&results), 2); // test.bsl –∏ module.bsl
    }
}