/*!
# Module Generator

–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–æ–¥—É–ª–µ–π 1–°.
–ü–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —Å Python –ø—Ä–æ–µ–∫—Ç–∞ onec-contract-generator –Ω–∞ Rust.

–°–¢–ê–¢–£–°: –ó–ê–ì–õ–£–®–ö–ê
–≠—Ç–æ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ –º–æ–¥—É–ª–µ–π.
–¢–µ–∫—É—â–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (–∞–Ω–∞–ª–∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö) —É–∂–µ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–æ—Ä–º.

–ü–ª–∞–Ω—ã —Ä–∞–∑–≤–∏—Ç–∏—è:
- –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤ –º–æ–¥—É–ª–µ–π (.bsl, .os)
- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä
- –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ —Ç–∏–ø–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
- –°–æ–∑–¥–∞–Ω–∏–µ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –º–æ–¥—É–ª–µ–π
- –ê–Ω–∞–ª–∏–∑ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
*/

use std::path::{Path, PathBuf};
use std::collections::HashMap;
use anyhow::Result;
use serde::{Deserialize, Serialize};
use walkdir::WalkDir;
use chrono::Utc;

/// –ö–æ–Ω—Ç—Ä–∞–∫—Ç –º–æ–¥—É–ª—è 1–° (–∑–∞–≥–ª—É—à–∫–∞)
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ModuleContract {
    pub metadata_type: String, // –í—Å–µ–≥–¥–∞ "Module"
    pub name: String,
    pub module_type: String,
    pub status: String,
    pub description: String,
    pub generation_metadata: ModuleGenerationMetadata,
}

/// –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ModuleGenerationMetadata {
    pub generated_at: String,
    pub generator_version: String,
}

/// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–æ–¥—É–ª–µ–π (–∑–∞–≥–ª—É—à–∫–∞)
pub struct ModuleGenerator {
    conf_dir: PathBuf,
    output_dir: PathBuf,
    logs: HashMap<String, Vec<String>>,
}

impl ModuleGenerator {
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–æ–¥—É–ª–µ–π
    pub fn new<P: AsRef<Path>>(conf_dir: P, output_dir: P) -> Self {
        Self {
            conf_dir: conf_dir.as_ref().to_path_buf(),
            output_dir: output_dir.as_ref().to_path_buf(),
            logs: HashMap::new(),
        }
    }
    
    /// –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥
    fn log(&mut self, category: &str, message: String) {
        self.logs.entry(category.to_string())
            .or_insert_with(Vec::new)
            .push(message);
    }
    
    /// –í—ã–≤–æ–¥–∏—Ç —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–∏
    pub fn print_logs(&self) {
        println!("\nüìã –°–≤–æ–¥–∫–∞ –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–æ–¥—É–ª–µ–π:");
        println!("{}", "=".repeat(50));
        
        for (category, messages) in &self.logs {
            if !messages.is_empty() {
                println!("\nüîç {} ({}):", category, messages.len());
                for msg in messages.iter().take(5) {
                    println!("  ‚Ä¢ {}", msg);
                }
                if messages.len() > 5 {
                    println!("  ‚Ä¢ ... –∏ –µ—â–µ {} —Å–æ–æ–±—â–µ–Ω–∏–π", messages.len() - 5);
                }
            }
        }
        
        println!("{}", "=".repeat(50));
    }
    
    /// –û—á–∏—â–∞–µ—Ç —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É
    pub fn clean_output_directory(&mut self) -> Result<()> {
        if self.output_dir.exists() {
            self.log("info", format!("–û—á–∏—â–∞—é —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É: {}", self.output_dir.display()));
            
            // –£–¥–∞–ª—è–µ–º –≤—Å–µ JSON —Ñ–∞–π–ª—ã
            let mut deleted_files = 0;
            for entry in WalkDir::new(&self.output_dir)
                .min_depth(1)
                .max_depth(1)
                .into_iter()
                .filter_map(|e| e.ok())
            {
                let path = entry.path();
                if path.extension().and_then(|s| s.to_str()) == Some("json") {
                    std::fs::remove_file(path)?;
                    deleted_files += 1;
                }
            }
            
            self.log("success", format!("–¶–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞ –æ—á–∏—â–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {} —Ñ–∞–π–ª–æ–≤", deleted_files));
        } else {
            self.log("info", format!("–¶–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞: {}", self.output_dir.display()));
        }
        
        Ok(())
    }
    
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –º–æ–¥—É–ª–µ–π (–∑–∞–≥–ª—É—à–∫–∞)
    pub fn generate(&mut self) -> Result<bool> {
        self.log("info", format!("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {}", self.conf_dir.display()));
        self.log("info", format!("–í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {}", self.output_dir.display()));
        
        // –û—á–∏—â–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É
        self.clean_output_directory()?;
        std::fs::create_dir_all(&self.output_dir)?;
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –æ —Å—Ç–∞—Ç—É—Å–µ
        let info_contract = ModuleContract {
            metadata_type: "ModuleGenerator".to_string(),
            status: "STUB".to_string(),
            name: "ModuleGenerator".to_string(),
            module_type: "Info".to_string(),
            description: "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–æ–¥—É–ª–µ–π - –∑–∞–≥–ª—É—à–∫–∞".to_string(),
            generation_metadata: ModuleGenerationMetadata {
                generated_at: Utc::now().to_rfc3339(),
                generator_version: env!("CARGO_PKG_VERSION").to_string(),
            },
        };
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
        let info_path = self.output_dir.join("_module_generator_info.json");
        let json = serde_json::to_string_pretty(&info_contract)?;
        std::fs::write(info_path, json)?;
        
        self.log("info", "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –º–æ–¥—É–ª–µ–π - —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞".to_string());
        self.log("info", "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–æ–∫—Ä—ã–≤–∞–µ—Ç—Å—è –¥—Ä—É–≥–∏–º–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞–º–∏".to_string());
        self.log("success", "–°–æ–∑–¥–∞–Ω –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –æ —Å—Ç–∞—Ç—É—Å–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞".to_string());
        
        Ok(true)
    }
    
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞–º–∏)
    pub fn generate_all_contracts(&mut self) -> Result<Vec<ModuleContract>> {
        self.generate()?;
        Ok(vec![])
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use tempfile::TempDir;
    
    #[test]
    fn test_module_generator_creation() {
        let temp_dir = TempDir::new().unwrap();
        let generator = ModuleGenerator::new(temp_dir.path(), temp_dir.path());
        assert!(generator.logs.is_empty());
    }
    
    #[test]
    fn test_module_generator_stub() {
        let temp_dir = TempDir::new().unwrap();
        let mut generator = ModuleGenerator::new(temp_dir.path(), temp_dir.path());
        
        let result = generator.generate().unwrap();
        assert!(result);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        let info_file = temp_dir.path().join("_module_generator_info.json");
        assert!(info_file.exists());
    }
}