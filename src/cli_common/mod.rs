//! –û–±—â–∏–π –º–æ–¥—É–ª—å –¥–ª—è CLI —É—Ç–∏–ª–∏—Ç
//!
//! –°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é –≤—Å–µ–º–∏ CLI –±–∏–Ω–∞—Ä–Ω–∏–∫–∞–º–∏:
//! - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
//! - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
//! - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞
//! - –û–±—â–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ —Ç—Ä–µ–π—Ç—ã

use anyhow::{Context, Result};
use colored::Colorize;
use std::path::{Path, PathBuf};
use tracing_subscriber::EnvFilter;

pub mod args;
pub mod output;
pub mod progress;

pub use args::{CommonArgs, ConfigArgs, PlatformArgs};
pub use output::{OutputFormat, OutputWriter};
pub use progress::{ProgressReporter, ProgressStyle};

/// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
pub fn init_logging(verbose: bool) -> Result<()> {
    let level = if verbose {
        tracing::Level::DEBUG
    } else {
        tracing::Level::INFO
    };

    let filter = EnvFilter::from_default_env().add_directive(level.into());

    tracing_subscriber::fmt()
        .with_env_filter(filter)
        .with_target(false)
        .with_thread_ids(false)
        .with_thread_names(false)
        .init();

    Ok(())
}

/// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ WARN –∏ ERROR)
pub fn init_minimal_logging() -> Result<()> {
    let filter = EnvFilter::from_default_env().add_directive(tracing::Level::WARN.into());

    tracing_subscriber::fmt()
        .with_env_filter(filter)
        .with_target(false)
        .with_thread_ids(false)
        .with_thread_names(false)
        .init();

    Ok(())
}

/// –í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ CLI —É—Ç–∏–ª–∏—Ç—ã
pub fn print_header(name: &str, version: &str, description: &str) {
    println!(
        "{} {} - {}",
        "üîß".blue(),
        name.bold().blue(),
        version.dimmed()
    );
    println!("{}\n", description.dimmed());
}

/// –í—ã–≤–æ–¥–∏—Ç —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
pub fn print_success(message: &str) {
    println!("{} {}", "‚úÖ".green(), message.green());
}

/// –í—ã–≤–æ–¥–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
pub fn print_warning(message: &str) {
    println!("{} {}", "‚ö†Ô∏è".yellow(), message.yellow());
}

/// –í—ã–≤–æ–¥–∏—Ç –æ—à–∏–±–∫—É
pub fn print_error(message: &str) {
    eprintln!("{} {}", "‚ùå".red(), message.red());
}

/// –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
pub fn print_info(message: &str) {
    println!("{} {}", "‚ÑπÔ∏è".blue(), message);
}

/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
pub fn validate_path(path: &Path, description: &str) -> Result<()> {
    if !path.exists() {
        return Err(anyhow::anyhow!(
            "{} does not exist: {}",
            description,
            path.display()
        ));
    }
    Ok(())
}

/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–µ—à–∞ BSL –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
pub fn get_cache_dir() -> Result<PathBuf> {
    let home_dir =
        dirs::home_dir().ok_or_else(|| anyhow::anyhow!("Could not determine home directory"))?;
    Ok(home_dir.join(".bsl_analyzer"))
}

/// –°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
pub fn ensure_dir_exists(path: &Path) -> Result<()> {
    if !path.exists() {
        std::fs::create_dir_all(path)
            .with_context(|| format!("Failed to create directory: {}", path.display()))?;
    }
    Ok(())
}

/// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
pub fn format_file_size(size: u64) -> String {
    const UNITS: &[&str] = &["B", "KB", "MB", "GB"];
    let mut size = size as f64;
    let mut unit_index = 0;

    while size >= 1024.0 && unit_index < UNITS.len() - 1 {
        size /= 1024.0;
        unit_index += 1;
    }

    if unit_index == 0 {
        format!("{} {}", size as u64, UNITS[unit_index])
    } else {
        format!("{:.2} {}", size, UNITS[unit_index])
    }
}

/// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
pub fn format_duration(duration: std::time::Duration) -> String {
    let secs = duration.as_secs();
    let millis = duration.subsec_millis();

    if secs == 0 {
        format!("{}ms", millis)
    } else if secs < 60 {
        format!("{}.{:03}s", secs, millis)
    } else {
        let mins = secs / 60;
        let secs = secs % 60;
        format!("{}m {}s", mins, secs)
    }
}

/// Trait –¥–ª—è CLI –∫–æ–º–∞–Ω–¥
pub trait CliCommand {
    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É
    fn execute(&self) -> Result<()>;

    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –∫–æ–º–∞–Ω–¥—ã
    fn name(&self) -> &str;

    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    fn description(&self) -> &str;
}

/// –ó–∞–ø—É—Å–∫–∞–µ—Ç CLI –∫–æ–º–∞–Ω–¥—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
pub fn run_command<C: CliCommand>(command: C) -> Result<()> {
    print_header(
        command.name(),
        env!("CARGO_PKG_VERSION"),
        command.description(),
    );

    match command.execute() {
        Ok(()) => {
            print_success(&format!("{} completed successfully", command.name()));
            Ok(())
        }
        Err(e) => {
            print_error(&format!("{} failed: {}", command.name(), e));
            Err(e)
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_format_file_size() {
        assert_eq!(format_file_size(0), "0 B");
        assert_eq!(format_file_size(1023), "1023 B");
        assert_eq!(format_file_size(1024), "1.00 KB");
        assert_eq!(format_file_size(1024 * 1024), "1.00 MB");
        assert_eq!(format_file_size(1024 * 1024 * 1024), "1.00 GB");
    }

    #[test]
    fn test_format_duration() {
        use std::time::Duration;

        assert_eq!(format_duration(Duration::from_millis(500)), "500ms");
        assert_eq!(format_duration(Duration::from_secs(1)), "1.000s");
        assert_eq!(format_duration(Duration::from_secs(65)), "1m 5s");
    }
}
