/// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ BSL —Ç–∏–ø–æ–≤
/// 
/// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–∏–ø–æ–≤ –≤ —Ä–∞–º–∫–∞—Ö —Å–∏—Å—Ç–µ–º—ã —Ç–∏–ø–æ–≤ BSL.
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç UnifiedBslIndex –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥—Ä—É–≥–æ–º—É.
/// 
/// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
/// ```bash
/// cargo run --bin check_type_compatibility -- --from "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏.–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞" --to "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–°—Å—ã–ª–∫–∞" --config "path/to/config"
/// ```

use anyhow::Result;
use clap::Parser;
use std::path::Path;
use bsl_analyzer::unified_index::UnifiedIndexBuilder;

#[derive(Parser)]
#[command(name = "check_type_compatibility")]
#[command(about = "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ BSL —Ç–∏–ø–æ–≤")]
#[command(long_about = "–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–∏–ø–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ —Ç–∏–ø–æ–≤ BSL. \
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥—Ä—É–≥–æ–≥–æ —Ç–∏–ø–∞.")]
struct Args {
    /// –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–∏–ø (–æ—Ç –∫–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º)
    #[arg(long, help = "–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–∏–ø –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")]
    from: String,

    /// –¶–µ–ª–µ–≤–æ–π —Ç–∏–ø (–∫ –∫–∞–∫–æ–º—É —Ç–∏–ø—É –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º)
    #[arg(long, help = "–¶–µ–ª–µ–≤–æ–π —Ç–∏–ø –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")]
    to: String,

    /// –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ 1–°
    #[arg(long, help = "–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ 1–°")]
    config: String,

    /// –í–µ—Ä—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã 1–°
    #[arg(long, default_value = "8.3.25", help = "–í–µ—Ä—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã 1–°")]
    platform_version: String,

    /// –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    #[arg(long, help = "–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")]
    verbose: bool,

    /// –ü–æ–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    #[arg(long, help = "–ü–æ–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –º–µ–∂–¥—É —Ç–∏–ø–∞–º–∏")]
    show_inheritance_path: bool,
}

fn main() -> Result<()> {
    let args = Args::parse();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::EnvFilter::from_default_env())
        .init();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if !Path::new(&args.config).exists() {
        anyhow::bail!("Configuration path does not exist: {}", args.config);
    }

    tracing::info!("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–∏–ø–æ–≤: {} -> {}", args.from, args.to);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–¥–µ–∫—Å–∞
    let mut builder = UnifiedIndexBuilder::new()?;
    let index = builder.build_index(&args.config, &args.platform_version)?;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    let is_compatible = index.is_assignable(&args.from, &args.to);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤
    let from_entity = index.find_entity(&args.from);
    let to_entity = index.find_entity(&args.to);

    // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if args.verbose {
        println!("üîç –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–∏–ø–æ–≤");
        println!("================================");
        println!("–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–∏–ø: {}", args.from);
        
        match from_entity {
            Some(entity) => {
                println!("  ‚úì –ù–∞–π–¥–µ–Ω: {} ({:?})", entity.display_name, entity.entity_type);
            }
            None => {
                println!("  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–¥–µ–∫—Å–µ");
            }
        }

        println!("–¶–µ–ª–µ–≤–æ–π —Ç–∏–ø: {}", args.to);
        match to_entity {
            Some(entity) => {
                println!("  ‚úì –ù–∞–π–¥–µ–Ω: {} ({:?})", entity.display_name, entity.entity_type);
            }
            None => {
                println!("  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–¥–µ–∫—Å–µ");
            }
        }

        println!();
        println!("–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:");
        if is_compatible {
            println!("  ‚úÖ –°–û–í–ú–ï–°–¢–ò–ú–´");
            println!("  –¢–∏–ø '{}' –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏—Å–≤–æ–µ–Ω –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∏–ø–∞ '{}'", args.from, args.to);
        } else {
            println!("  ‚ùå –ù–ï –°–û–í–ú–ï–°–¢–ò–ú–´");
            println!("  –¢–∏–ø '{}' –ù–ï –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏—Å–≤–æ–µ–Ω –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∏–ø–∞ '{}'", args.from, args.to);
        }

        // –ü–æ–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
        if args.show_inheritance_path && is_compatible && args.from != args.to {
            println!();
            println!("–ü—É—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:");
            if let (Some(from_entity), Some(to_entity)) = (from_entity, to_entity) {
                // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —Ç–∏–ø—ã
                if from_entity.constraints.parent_types.contains(&args.to) {
                    println!("  {} ‚Üí –Ω–∞—Å–ª–µ–¥—É–µ—Ç ‚Üí {}", args.from, args.to);
                } else if from_entity.constraints.implements.contains(&args.to) {
                    println!("  {} ‚Üí —Ä–µ–∞–ª–∏–∑—É–µ—Ç ‚Üí {}", args.from, args.to);
                } else if args.from == args.to {
                    println!("  {} ‚â° {} (–∏–¥–µ–Ω—Ç–∏—á–Ω—ã–µ —Ç–∏–ø—ã)", args.from, args.to);
                } else {
                    println!("  –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —Ç–∏–ø–æ–≤ BSL");
                }
            }
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–∞—Ö
        if from_entity.is_some() || to_entity.is_some() {
            println!();
            println!("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:");
        }

        if let Some(entity) = from_entity {
            if !entity.constraints.parent_types.is_empty() {
                println!("  {} –Ω–∞—Å–ª–µ–¥—É–µ—Ç –æ—Ç: {}", args.from, entity.constraints.parent_types.join(", "));
            }
            if !entity.constraints.implements.is_empty() {
                println!("  {} —Ä–µ–∞–ª–∏–∑—É–µ—Ç: {}", args.from, entity.constraints.implements.join(", "));
            }
        }

        if let Some(entity) = to_entity {
            if !entity.constraints.parent_types.is_empty() {
                println!("  {} –Ω–∞—Å–ª–µ–¥—É–µ—Ç –æ—Ç: {}", args.to, entity.constraints.parent_types.join(", "));
            }
            if !entity.constraints.implements.is_empty() {
                println!("  {} —Ä–µ–∞–ª–∏–∑—É–µ—Ç: {}", args.to, entity.constraints.implements.join(", "));
            }
        }

    } else {
        // –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥
        if is_compatible {
            println!("‚úÖ –°–û–í–ú–ï–°–¢–ò–ú–´: {} -> {}", args.from, args.to);
        } else {
            println!("‚ùå –ù–ï –°–û–í–ú–ï–°–¢–ò–ú–´: {} -> {}", args.from, args.to);
        }
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–¥–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–ª—è —Å–∫—Ä–∏–ø—Ç–æ–≤
    if !is_compatible {
        std::process::exit(1);
    }

    Ok(())
}