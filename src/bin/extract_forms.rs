/*!
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ–æ—Ä–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ 1–° –≤ –≥–∏–±—Ä–∏–¥–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
*/

use std::path::PathBuf;
use clap::Parser;
use anyhow::Result;
use bsl_analyzer::configuration::form_parser::FormXmlParser;
use bsl_analyzer::docs_integration::hybrid_storage::HybridDocumentationStorage;

/// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–æ—Ä–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –≥–∏–±—Ä–∏–¥–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
#[derive(Parser, Debug)]
#[command(name = "extract-forms")]
#[command(about = "–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ–æ—Ä–º—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ 1–° –≤ –≥–∏–±—Ä–∏–¥–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")]
struct Args {
    /// –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    #[arg(short, long)]
    config: PathBuf,
    
    /// –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    #[arg(short, long, default_value = "output/hybrid_docs_direct")]
    output: PathBuf,
}

fn main() -> Result<()> {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    tracing_subscriber::fmt()
        .with_env_filter(
            tracing_subscriber::EnvFilter::from_default_env()
                .add_directive("bsl_analyzer=debug".parse()?)
        )
        .init();
    
    let args = Args::parse();
    
    println!("============================================================");
    println!("üöÄ –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –§–û–†–ú –ò–ó –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò");
    println!("============================================================");
    println!();
    println!("üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {}", args.config.display());
    println!("üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {}", args.output.display());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if !args.config.exists() {
        anyhow::bail!("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {}", args.config.display());
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    let mut storage = HybridDocumentationStorage::new(args.output);
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä —Ñ–æ—Ä–º
    let parser = FormXmlParser::new();
    
    println!();
    println!("üîç –ü–æ–∏—Å–∫ XML —Ñ–∞–π–ª–æ–≤ —Ñ–æ—Ä–º...");
    
    // –ü–∞—Ä—Å–∏–º –≤—Å–µ —Ñ–æ—Ä–º—ã –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    parser.parse_to_hybrid_storage(&args.config, &mut storage)?;
    
    // –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    storage.finalize()?;
    
    println!();
    println!("============================================================");
    println!("‚úÖ –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û");
    println!("============================================================");
    
    Ok(())
}