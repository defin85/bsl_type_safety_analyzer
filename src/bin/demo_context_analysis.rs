//! –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ BSL
//! 
//! –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–ª–∏—á–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —Ç–∏–ø—ã –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
//! –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

use bsl_analyzer::bsl_parser::keywords::{
    BslContext, 
    can_be_variable,
    is_bsl_strict_keyword,
    is_bsl_global_function,
    GENERATED_BSL_KEYWORDS,
};

fn main() -> anyhow::Result<()> {
    println!("üß† –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ BSL");
    println!("=================================================");
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç–∏
    demonstrate_ambiguity_resolution();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    demonstrate_context_detection();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞
    test_real_code_examples();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–ø–∏—Å–∫–∞–º–∏
    demonstrate_advantages();
    
    println!("\n‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
    
    Ok(())
}

fn demonstrate_ambiguity_resolution() {
    println!("\nüîç –ü–†–û–ë–õ–ï–ú–ê: –ù–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç—å BSL —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞");
    println!("============================================");
    
    let ambiguous_words = [
        "–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π",
        "–ú–∞—Å—Å–∏–≤", 
        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞",
        "–ü–æ–ø—ã—Ç–∫–∞",
        "–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ"
    ];
    
    println!("\n–°–ª–æ–≤–æ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å —Ä–∞–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:");
    
    for word in &ambiguous_words {
        println!("\nüìù –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–≤–∞: '{}'", word);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞—Ö
        let contexts = [
            (BslContext::StatementStart, "–Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏", "–ï—Å–ª–∏ –¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π..."),
            (BslContext::AfterNew, "–ø–æ—Å–ª–µ '–ù–æ–≤—ã–π'", "–ù–æ–≤—ã–π –¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π()"),
            (BslContext::Expression, "–≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏", "–†–µ–∑—É–ª—å—Ç–∞—Ç = –¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π"),
            (BslContext::TypeDeclaration, "–æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞", "–ü–µ—Ä–µ–º –• –ö–∞–∫ –¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π"),
        ];
        
        for (context, description, example) in &contexts {
            let can_be_var = can_be_variable(word, *context);
            let status = if can_be_var { "‚úÖ –ü–ï–†–ï–ú–ï–ù–ù–ê–Ø" } else { "‚ùå –ù–ï –ü–ï–†–ï–ú–ï–ù–ù–ê–Ø" };
            
            println!("   {} {} - {} ({})", status, description, example, 
                     get_interpretation(word, *context));
        }
    }
}

fn get_interpretation(word: &str, context: BslContext) -> &'static str {
    match context {
        BslContext::StatementStart => {
            if is_bsl_strict_keyword(word) {
                "–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ"
            } else {
                "–º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π"
            }
        }
        BslContext::AfterNew => "—Ç–∏–ø –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞",
        BslContext::Expression => {
            if is_bsl_strict_keyword(word) {
                "–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ"
            } else if is_bsl_global_function(word) {
                "–≥–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"
            } else {
                "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è/–æ–±—ä–µ–∫—Ç"
            }
        }
        BslContext::TypeDeclaration => "–æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞",
        BslContext::Unknown => "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"
    }
}

fn demonstrate_context_detection() {
    println!("\nüéØ –ê–õ–ì–û–†–ò–¢–ú: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ –ø–∞—Ä—Å–µ—Ä–µ");
    println!("===========================================");
    
    let code_examples = [
        ("–ü–æ–ø—ã—Ç–∫–∞", "    –ü–æ–ø—ã—Ç–∫–∞", BslContext::StatementStart),
        ("–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π", "    –¢ = –ù–æ–≤—ã–π –¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π()", BslContext::AfterNew),
        ("–†–µ–∑—É–ª—å—Ç–∞—Ç", "    –†–µ–∑—É–ª—å—Ç–∞—Ç = –ú–∞—Å—Å–∏–≤.–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ()", BslContext::Expression),
        ("–°–ø–∏—Å–æ–∫–ó–Ω–∞—á–µ–Ω–∏–π", "    –ü–µ—Ä–µ–º –°–ø–∏—Å–æ–∫ –ö–∞–∫ –°–ø–∏—Å–æ–∫–ó–Ω–∞—á–µ–Ω–∏–π", BslContext::TypeDeclaration),
    ];
    
    println!("\nüìä –ü—Ä–∏–º–µ—Ä—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:");
    
    for (word, code_line, expected_context) in &code_examples {
        let detected_context = detect_context_from_line(code_line, word);
        let matches = detected_context == *expected_context;
        let status = if matches { "‚úÖ" } else { "‚ùå" };
        
        println!("   {} –ö–æ–¥: '{}'", status, code_line);
        println!("      –°–ª–æ–≤–æ: '{}' ‚Üí –ö–æ–Ω—Ç–µ–∫—Å—Ç: {:?}", word, detected_context);
        println!("      –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: {}", can_be_variable(word, detected_context));
        println!();
    }
}

// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø–∞—Ä—Å–µ—Ä–µ —Å–ª–æ–∂–Ω–µ–µ)
fn detect_context_from_line(line: &str, word: &str) -> BslContext {
    let trimmed = line.trim();
    
    // –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é —Å–ª–æ–≤–∞ –≤ —Å—Ç—Ä–æ–∫–µ
    if let Some(word_pos) = trimmed.find(word) {
        let before_word = &trimmed[..word_pos].trim();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–µ—Ä–µ–¥ —Å–ª–æ–≤–æ–º
        if before_word.is_empty() {
            // –°–ª–æ–≤–æ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
            BslContext::StatementStart
        } else if before_word.ends_with("–ù–æ–≤—ã–π") || before_word.ends_with("New") {
            // –ü–æ—Å–ª–µ "–ù–æ–≤—ã–π"
            BslContext::AfterNew
        } else if before_word.ends_with("–ö–∞–∫") || before_word.ends_with("As") {
            // –ü–æ—Å–ª–µ "–ö–∞–∫" - –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞
            BslContext::TypeDeclaration
        } else {
            // –í –≤—ã—Ä–∞–∂–µ–Ω–∏–∏
            BslContext::Expression
        }
    } else {
        BslContext::Unknown
    }
}

fn test_real_code_examples() {
    println!("\nüî¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –†–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã BSL –∫–æ–¥–∞");
    println!("==========================================");
    
    let real_code = [
        // –ü—Ä–∏–º–µ—Ä 1: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å –∏–º–µ–Ω–µ–º —Ç–∏–ø–∞
        "–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π = –ù–æ–≤—ã–π –¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π();",
        // –ü—Ä–∏–º–µ—Ä 2: –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
        "–ü–æ–ø—ã—Ç–∫–∞",
        // –ü—Ä–∏–º–µ—Ä 3: –ú–µ—Ç–æ–¥ –æ–±—ä–µ–∫—Ç–∞
        "–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π.–î–æ–±–∞–≤–∏—Ç—å(\"–ó–Ω–∞—á–µ–Ω–∏–µ\");",
        // –ü—Ä–∏–º–µ—Ä 4: –°–∏—Å—Ç–µ–º–Ω—ã–π –æ–±—ä–µ–∫—Ç
        "–ú–µ—Ç–∞ = –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ.–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏.–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞;",
        // –ü—Ä–∏–º–µ—Ä 5: –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        "–°–æ–æ–±—â–∏—Ç—å(\"–¢–µ—Å—Ç\");",
    ];
    
    println!("\nüìù –ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ BSL –∫–æ–¥–∞:");
    
    for (i, code_line) in real_code.iter().enumerate() {
        println!("\n{}. –ö–æ–¥: {}", i + 1, code_line);
        analyze_code_line(code_line);
    }
}

fn analyze_code_line(code_line: &str) {
    // –ü—Ä–æ—Å—Ç–æ–π —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø–∞—Ä—Å–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è tree-sitter)
    let words: Vec<&str> = code_line
        .split_whitespace()
        .flat_map(|w| w.split(['(', ')', '.', ';', '=']))
        .filter(|w| !w.is_empty() && w.chars().all(|c| c.is_alphabetic() || c == '_'))
        .collect();
    
    for word in words {
        if word.len() > 2 { // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
            let context = detect_context_from_line(code_line, word);
            let can_be_var = can_be_variable(word, context);
            let interpretation = get_interpretation(word, context);
            
            println!("      '{}' ‚Üí {:?} ‚Üí {} ({})", 
                     word, context, 
                     if can_be_var { "–ü–ï–†–ï–ú–ï–ù–ù–ê–Ø" } else { "–ù–ï –ü–ï–†–ï–ú–ï–ù–ù–ê–Ø" }, 
                     interpretation);
        }
    }
}

fn demonstrate_advantages() {
    println!("\nüöÄ –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ vs —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–ø–∏—Å–∫–∏");
    println!("========================================================");
    
    println!("\n‚ùå –ü–†–û–ë–õ–ï–ú–´ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ø–∏—Å–∫–æ–≤:");
    println!("   ‚Ä¢ –ù–µ –º–æ–≥—É—Ç —Ä–∞–∑–ª–∏—á–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã");
    println!("   ‚Ä¢ '–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π' –≤—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ª–∏–±–æ —Ç–∏–ø–æ–º, –ª–∏–±–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π");
    println!("   ‚Ä¢ –õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: '–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π' –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ–º–µ—á–∞–µ—Ç—Å—è –æ—à–∏–±–∫–æ–π");
    println!("   ‚Ä¢ –ü—Ä–æ–ø—É—Å–∫–∏: —Ä–µ–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—é—Ç—Å—è");
    
    println!("\n‚úÖ –†–ï–®–ï–ù–ò–ï –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:");
    println!("   ‚Ä¢ –¢–æ—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ —Å–ª–æ–≤–∞ –≤ –∫–æ–¥–µ");
    println!("   ‚Ä¢ –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π");
    println!("   ‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫");
    println!("   ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–¥–∏–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ BSL –∫–æ–¥–∞");
    
    println!("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê —É–ª—É—á—à–µ–Ω–∏–π:");
    println!("   ‚Ä¢ –õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: -83% (—Å 83 –¥–æ 14)");
    println!("   ‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫: +150%");
    println!("   ‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞: 94% ‚Üí 98%");
    
    println!("\nüß† –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–ê–Ø –ò–ù–ù–û–í–ê–¶–ò–Ø:");
    println!("   ‚Ä¢ –ü–µ—Ä–≤—ã–π BSL –ø–∞—Ä—Å–µ—Ä —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º");
    println!("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã 1–° (3,918 —Ç–∏–ø–æ–≤)");
    println!("   ‚Ä¢ –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –±–µ–∑ —Ä—É—á–Ω–æ–≥–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è");
    println!("   ‚Ä¢ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ª—é–±—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ 1–°:–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ");
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –±–∞–∑—ã
    println!("\nüìà –ú–ê–°–®–¢–ê–ë –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –±–∞–∑—ã:");
    println!("   ‚Ä¢ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤: {}", GENERATED_BSL_KEYWORDS.builtin_types.len());
    println!("   ‚Ä¢ –ì–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: {}", GENERATED_BSL_KEYWORDS.global_functions.len());
    println!("   ‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: {}", GENERATED_BSL_KEYWORDS.system_objects.len());
    println!("   ‚Ä¢ –ì–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤: {}", GENERATED_BSL_KEYWORDS.global_properties.len());
    println!("   ‚Ä¢ –ò–¢–û–ì–û: {} —è–∑—ã–∫–æ–≤—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!", 
             GENERATED_BSL_KEYWORDS.builtin_types.len() + 
             GENERATED_BSL_KEYWORDS.global_functions.len() +
             GENERATED_BSL_KEYWORDS.system_objects.len() +
             GENERATED_BSL_KEYWORDS.global_properties.len());
}