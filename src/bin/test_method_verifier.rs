/*!
# Test Method Verifier

–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ MethodVerifier —Å UnifiedBslIndex.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.
*/

use std::path::Path;
use anyhow::Result;
use bsl_analyzer::unified_index::{UnifiedIndexBuilder};
use bsl_analyzer::verifiers::method_verifier::{MethodVerifier, ArgumentInfo};

fn main() -> Result<()> {
    println!("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï METHOD VERIFIER –° UNIFIEDBSLINDEX");
    println!("{}", "=".repeat(60));
    
    // –°—Ç—Ä–æ–∏–º –µ–¥–∏–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    println!("üìñ –°—Ç—Ä–æ–∏–º UnifiedBslIndex...");
    let config_path = Path::new("examples/ConfTest");
    let platform_version = "8.3.25";
    
    let builder = UnifiedIndexBuilder::new()?;
    let index = builder.build_index(config_path, platform_version)?;
    
    println!("‚úÖ –ò–Ω–¥–µ–∫—Å –ø–æ—Å—Ç—Ä–æ–µ–Ω: {} —Ç–∏–ø–æ–≤", index.get_entity_count());
    
    // –°–æ–∑–¥–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–µ—Ç–æ–¥–æ–≤
    let verifier = MethodVerifier::new(index);
    println!("‚úÖ MethodVerifier —Å–æ–∑–¥–∞–Ω");
    
    println!("\n{}", "=".repeat(60));
    println!("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ï–¢–û–î–û–í –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò");
    println!("{}", "=".repeat(60));
    
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤
    test_object_type_verification(&verifier);
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤
    test_method_existence(&verifier);
    
    // –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞—Ç—É—Ä –º–µ—Ç–æ–¥–æ–≤
    test_method_signatures(&verifier);
    
    // –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    test_available_methods(&verifier);
    
    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–∏–ø–æ–≤
    test_type_compatibility(&verifier);
    
    // –¢–µ—Å—Ç 6: –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–∞
    test_method_call_verification(&verifier);
    
    println!("\n{}", "=".repeat(60));
    println!("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û");
    println!("{}", "=".repeat(60));
    
    Ok(())
}

fn test_object_type_verification(verifier: &MethodVerifier) {
    println!("\nüìã –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤");
    println!("{}", "-".repeat(40));
    
    let test_types = vec![
        ("–°—Ç—Ä–æ–∫–∞", true),
        ("String", true),
        ("–ú–∞—Å—Å–∏–≤", true), 
        ("Array", true),
        ("–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π", true),
        ("ValueTable", true),
        ("–ß—Ç–µ–Ω–∏–µXML", true),
        ("XMLReader", true),
        ("–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π–¢–∏–ø", false),
    ];
    
    for (type_name, expected) in test_types {
        let exists = verifier.verify_object_type(type_name);
        let status = if exists == expected { "‚úÖ" } else { "‚ùå" };
        println!("{} –¢–∏–ø '{}': –Ω–∞–π–¥–µ–Ω={}, –æ–∂–∏–¥–∞–ª–æ—Å—å={}", 
            status, type_name, exists, expected);
    }
}

fn test_method_existence(verifier: &MethodVerifier) {
    println!("\nüìã –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤");
    println!("{}", "-".repeat(40));
    
    let test_cases = vec![
        ("–°—Ç—Ä–æ–∫–∞", "–î–ª–∏–Ω–∞", true),
        ("–°—Ç—Ä–æ–∫–∞", "–í–†–µ–≥", true),
        ("–°—Ç—Ä–æ–∫–∞", "–ù–†–µ–≥", true),
        ("String", "–î–ª–∏–Ω–∞", true),
        ("–ú–∞—Å—Å–∏–≤", "–î–æ–±–∞–≤–∏—Ç—å", true),
        ("–ú–∞—Å—Å–∏–≤", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", true),
        ("Array", "–î–æ–±–∞–≤–∏—Ç—å", true),
        ("–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π", "–î–æ–±–∞–≤–∏—Ç—å", true),
        ("–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π", "–û—á–∏—Å—Ç–∏—Ç—å", true),
        ("–ß—Ç–µ–Ω–∏–µXML", "–ü—Ä–æ—á–∏—Ç–∞—Ç—å", true),
        ("–ß—Ç–µ–Ω–∏–µXML", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å–°—Ç—Ä–æ–∫—É", true),
        ("–°—Ç—Ä–æ–∫–∞", "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π–ú–µ—Ç–æ–¥", false),
        ("–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π–¢–∏–ø", "–ú–µ—Ç–æ–¥", false),
    ];
    
    for (object_type, method_name, expected) in test_cases {
        let exists = verifier.verify_method_exists(object_type, method_name);
        let status = if exists == expected { "‚úÖ" } else { "‚ùå" };
        println!("{} {}.{}: –Ω–∞–π–¥–µ–Ω={}, –æ–∂–∏–¥–∞–ª–æ—Å—å={}", 
            status, object_type, method_name, exists, expected);
    }
}

fn test_method_signatures(verifier: &MethodVerifier) {
    println!("\nüìã –¢–ï–°–¢ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞—Ç—É—Ä –º–µ—Ç–æ–¥–æ–≤");
    println!("{}", "-".repeat(40));
    
    let test_methods = vec![
        ("–°—Ç—Ä–æ–∫–∞", "–î–ª–∏–Ω–∞"),
        ("–°—Ç—Ä–æ–∫–∞", "–í–†–µ–≥"),
        ("–ú–∞—Å—Å–∏–≤", "–î–æ–±–∞–≤–∏—Ç—å"),
        ("–ú–∞—Å—Å–∏–≤", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"),
        ("–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π", "–î–æ–±–∞–≤–∏—Ç—å"),
        ("–ß—Ç–µ–Ω–∏–µXML", "–ü—Ä–æ—á–∏—Ç–∞—Ç—å"),
    ];
    
    for (object_type, method_name) in test_methods {
        if let Some(signature) = verifier.get_method_signature(object_type, method_name) {
            println!("‚úÖ {}.{}: {}", object_type, method_name, signature);
        } else {
            println!("‚ùå {}.{}: —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", object_type, method_name);
        }
    }
}

fn test_available_methods(verifier: &MethodVerifier) {
    println!("\nüìã –¢–ï–°–¢ 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤");
    println!("{}", "-".repeat(40));
    
    let test_types = vec!["–°—Ç—Ä–æ–∫–∞", "–ú–∞—Å—Å–∏–≤", "–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π"];
    
    for type_name in test_types {
        let methods = verifier.get_available_methods(type_name);
        println!("‚úÖ {}: {} –º–µ—Ç–æ–¥–æ–≤", type_name, methods.len());
        
        if methods.len() <= 10 {
            println!("   –ú–µ—Ç–æ–¥—ã: {}", methods.join(", "));
        } else {
            let first_methods: Vec<String> = methods.into_iter().take(10).collect();
            println!("   –ü–µ—Ä–≤—ã–µ 10 –º–µ—Ç–æ–¥–æ–≤: {}", first_methods.join(", "));
        }
    }
}

fn test_type_compatibility(verifier: &MethodVerifier) {
    println!("\nüìã –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–∏–ø–æ–≤");
    println!("{}", "-".repeat(40));
    
    let test_cases = vec![
        ("–°—Ç—Ä–æ–∫–∞", "–°—Ç—Ä–æ–∫–∞", true),
        ("String", "–°—Ç—Ä–æ–∫–∞", true),
        ("–ú–∞—Å—Å–∏–≤", "Array", true),
        ("–°—Ç—Ä–æ–∫–∞", "–ß–∏—Å–ª–æ", false),
        ("–ú–∞—Å—Å–∏–≤", "–°—Ç—Ä–æ–∫–∞", false),
    ];
    
    for (from_type, to_type, expected) in test_cases {
        let compatible = verifier.verify_type_compatibility(from_type, to_type);
        let status = if compatible == expected { "‚úÖ" } else { "‚ùå" };
        println!("{} {} ‚Üí {}: —Å–æ–≤–º–µ—Å—Ç–∏–º–æ={}, –æ–∂–∏–¥–∞–ª–æ—Å—å={}", 
            status, from_type, to_type, compatible, expected);
    }
}

fn test_method_call_verification(verifier: &MethodVerifier) {
    println!("\nüìã –¢–ï–°–¢ 6: –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–∞");
    println!("{}", "-".repeat(40));
    
    // –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    test_method_call(verifier, "–°—Ç—Ä–æ–∫–∞", "–î–ª–∏–Ω–∞", &[], true);
    test_method_call(verifier, "–ú–∞—Å—Å–∏–≤", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", &[], true);
    
    // –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    let add_args = vec![ArgumentInfo {
        arg_type: "–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π".to_string(),
        value: Some("\"—ç–ª–µ–º–µ–Ω—Ç\"".to_string()),
        position: 0,
    }];
    test_method_call(verifier, "–ú–∞—Å—Å–∏–≤", "–î–æ–±–∞–≤–∏—Ç—å", &add_args, true);
    
    // –¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ—Ç–æ–¥–∞
    test_method_call(verifier, "–°—Ç—Ä–æ–∫–∞", "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π–ú–µ—Ç–æ–¥", &[], false);
    
    // –¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∏–ø–∞
    test_method_call(verifier, "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π–¢–∏–ø", "–ú–µ—Ç–æ–¥", &[], false);
}

fn test_method_call(verifier: &MethodVerifier, object_type: &str, method_name: &str, 
    arguments: &[ArgumentInfo], should_succeed: bool) {
    
    let mut verifier = verifier.clone(); // –ù—É–∂–Ω–∞ –º—É—Ç–∞–±–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è verify_call
    let result = verifier.verify_call(object_type, method_name, arguments, 1);
    
    let status = if result.is_valid == should_succeed { "‚úÖ" } else { "‚ùå" };
    
    println!("{} {}.{}({}): —É—Å–ø–µ—à–Ω–æ={}", 
        status, object_type, method_name, 
        arguments.len(), result.is_valid);
    
    if !result.is_valid && !result.suggestions.is_empty() {
        println!("   –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {}", result.suggestions.join("; "));
    }
}

// –ù—É–∂–µ–Ω Clone –¥–ª—è MethodVerifier –≤ —Ç–µ—Å—Ç–∞—Ö
#[allow(dead_code)]
trait MethodVerifierExt {
    fn clone(&self) -> Self;
}

// –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
impl MethodVerifierExt for MethodVerifier {
    fn clone(&self) -> Self {
        // –î–ª—è —Ç–µ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å —Ç–µ–º –∂–µ –∏–Ω–¥–µ–∫—Å–æ–º
        // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –Ω–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ, –Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        MethodVerifier::new(self.unified_index.clone())
    }
}