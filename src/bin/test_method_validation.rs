// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—ã–∑–æ–≤–æ–≤ –º–µ—Ç–æ–¥–æ–≤ —Å UnifiedBslIndex
use bsl_analyzer::BslParser;
use bsl_analyzer::bsl_parser::{SemanticAnalyzer, SemanticAnalysisConfig};
use bsl_analyzer::unified_index::UnifiedIndexBuilder;
use std::path::Path;

fn main() -> anyhow::Result<()> {
    println!("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—ã–∑–æ–≤–æ–≤ –º–µ—Ç–æ–¥–æ–≤ —Å UnifiedBslIndex");
    println!("=============================================================");
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    let content = std::fs::read_to_string("test_method_validation.bsl")?;
    println!("üìñ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {} —Å–∏–º–≤–æ–ª–æ–≤", content.len());
    
    // –°–æ–∑–¥–∞–µ–º UnifiedBslIndex
    println!("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ UnifiedBslIndex...");
    let config_path = Path::new("examples/ConfTest");
    let platform_version = "8.3.25";
    
    let builder = UnifiedIndexBuilder::new()?;
    let index = builder.build_index(config_path, platform_version)?;
    
    println!("‚úÖ UnifiedBslIndex —Å–æ–∑–¥–∞–Ω:");
    println!("   - –í—Å–µ–≥–æ —Å—É—â–Ω–æ—Å—Ç–µ–π: {}", index.get_all_entities().len());
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤
    println!("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã (–ø—Ä–∏–º–µ—Ä—ã):");
    let platform_types = ["–ú–∞—Å—Å–∏–≤", "Array", "–°—Ç—Ä–æ–∫–∞", "String", "–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π", "ValueTable"];
    for type_name in &platform_types {
        if let Some(entity) = index.find_entity(type_name) {
            let methods = index.get_all_methods(&entity.qualified_name);
            println!("   - {}: {} –º–µ—Ç–æ–¥–æ–≤", type_name, methods.len());
        }
    }
    
    // –¢–µ—Å—Ç 1: –ü–∞—Ä—Å–∏–Ω–≥ BSL —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    println!("\nüîß –¢–µ—Å—Ç 1: –ü–∞—Ä—Å–∏–Ω–≥ BSL –∫–æ–¥–∞");
    let parser = BslParser::new()?;
    let parse_result = parser.parse(&content, "test_method_validation.bsl");
    
    if let Some(ast) = parse_result.ast {
        println!("‚úÖ AST –ø–æ–ª—É—á–µ–Ω: {} –æ–±—ä—è–≤–ª–µ–Ω–∏–π", ast.module.declarations.len());
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        for (i, decl) in ast.module.declarations.iter().enumerate() {
            match decl {
                bsl_analyzer::bsl_parser::ast::Declaration::Function(func) => {
                    println!("  {}. –§—É–Ω–∫—Ü–∏—è: {} ({} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)", i+1, func.name, func.params.len());
                    println!("     –û–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Ç–µ–ª–µ: {}", func.body.len());
                }
                _ => {}
            }
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–∑–æ–≤—ã –º–µ—Ç–æ–¥–æ–≤
        let method_calls = ast.extract_method_calls();
        println!("\nüìû –ù–∞–π–¥–µ–Ω–æ –≤—ã–∑–æ–≤–æ–≤ –º–µ—Ç–æ–¥–æ–≤: {}", method_calls.len());
        for (i, call) in method_calls.iter().enumerate() {
            if let bsl_analyzer::bsl_parser::ast::Expression::Identifier(obj_name) = &*call.object {
                println!("  {}. {}.{}({} –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤)", i+1, obj_name, call.method, call.args.len());
            }
        }
        
        // –¢–µ—Å—Ç 2: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –º–µ—Ç–æ–¥–æ–≤
        println!("\nüîß –¢–µ—Å—Ç 2: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –º–µ—Ç–æ–¥–æ–≤");
        
        let mut config = SemanticAnalysisConfig::default();
        config.check_method_calls = true;
        config.check_duplicate_parameters = true;
        config.check_undeclared_variables = true;
        
        let mut semantic = SemanticAnalyzer::with_index(config, index);
        
        match semantic.analyze(&ast) {
            Ok(()) => {
                let diagnostics = semantic.get_diagnostics();
                println!("‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω");
                println!("   - –í—Å–µ–≥–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫: {}", diagnostics.len());
                
                let mut errors = 0;
                let mut warnings = 0;
                let mut method_errors = 0;
                let mut param_errors = 0;
                
                for diag in diagnostics {
                    match diag.severity {
                        bsl_analyzer::bsl_parser::DiagnosticSeverity::Error => errors += 1,
                        _ => warnings += 1,
                    }
                    
                    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
                    if diag.code == "BSL003" { method_errors += 1; }
                    if diag.code == "BSL004" { param_errors += 1; }
                    
                    println!("  {:?} [{}] –≤ {}:{}: {}", 
                        diag.severity, 
                        diag.code,
                        diag.location.line, 
                        diag.location.column,
                        diag.message
                    );
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    if let Some(found) = &diag.details.found {
                        println!("    –ù–∞–π–¥–µ–Ω–æ: {}", found);
                    }
                    if let Some(expected) = &diag.details.expected {
                        println!("    –û–∂–∏–¥–∞–ª–æ—Å—å: {}", expected);
                    }
                }
                
                println!("\nüìà –°–≤–æ–¥–∫–∞: {} –æ—à–∏–±–æ–∫, {} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π", errors, warnings);
                println!("   - –û—à–∏–±–∫–∏ –º–µ—Ç–æ–¥–æ–≤ (BSL003): {}", method_errors);
                println!("   - –û—à–∏–±–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (BSL004): {}", param_errors);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç
                println!("\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:");
                println!("   - –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤—ã–∑–æ–≤–æ–≤ –º–µ—Ç–æ–¥–æ–≤: {}", if method_errors > 0 { "‚úÖ –¥–∞" } else { "‚ùå –Ω–µ—Ç" });
                println!("   - –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {}", if param_errors > 0 { "‚úÖ –¥–∞" } else { "‚ùå –Ω–µ—Ç" });
                
            }
            Err(e) => {
                println!("‚ùå –û—à–∏–±–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {}", e);
            }
        }
        
    } else {
        println!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å AST");
        if !parse_result.diagnostics.is_empty() {
            println!("–û—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞:");
            for diag in &parse_result.diagnostics {
                println!("  {}", diag.message);
            }
        }
    }
    
    println!("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–µ—Ç–æ–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
    Ok(())
}