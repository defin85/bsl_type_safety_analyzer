use bsl_analyzer::docs_integration::bsl_syntax_extractor::BslSyntaxExtractor;
use anyhow::Result;
use tracing_subscriber;
use clap::Parser;
use std::path::Path;

#[derive(Parser)]
#[command(name = "extract_hybrid_docs")]
#[command(about = "Extract BSL documentation from HBK archives to hybrid format")]
struct Args {
    /// Path to HBK archive file (.hbk or .zip) (required)
    #[arg(long, short)]
    archive: String,
    
    /// Output directory for hybrid documentation
    #[arg(long, short, default_value = "./output/hybrid_docs")]
    output: String,
}

fn main() -> Result<()> {
    let args = Args::parse();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    tracing_subscriber::fmt()
        .with_max_level(tracing::Level::INFO)
        .init();

    println!("=== BSL Documentation Hybrid Extractor ===");
    println!("Extracting BSL syntax directly to hybrid format...");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
    if !Path::new(&args.archive).exists() {
        eprintln!("‚ùå –û—à–∏–±–∫–∞: –ê—Ä—Ö–∏–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", args.archive);
        eprintln!("üìù –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:");
        eprintln!("   cargo run --bin extract_hybrid_docs -- --archive \"C:\\–ø—É—Ç—å\\–∫\\–∞—Ä—Ö–∏–≤—É.zip\" --output \"./output\"");
        std::process::exit(1);
    }

    let archive_path = &args.archive;
    let output_path = &args.output;

    // –°–æ–∑–¥–∞–µ–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –Ω–∞–ø—Ä—è–º—É—é —Å –ø—É—Ç–µ–º –∫ –∞—Ä—Ö–∏–≤—É
    let mut extractor = BslSyntaxExtractor::new(archive_path);

    println!("üìÅ Source: {}", archive_path);
    println!("üìÅ Output: {}", output_path);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é –≤ –≥–∏–±—Ä–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    extractor.extract_to_hybrid_storage(output_path, None)?;

    println!("‚úÖ Hybrid extraction completed successfully!");
    println!("üìÇ Hybrid documentation saved to: {}", output_path);

    Ok(())
}