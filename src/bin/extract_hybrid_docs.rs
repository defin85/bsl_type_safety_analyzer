use bsl_analyzer::docs_integration::{hbk_parser_full::HbkArchiveParser, bsl_syntax_extractor::BslSyntaxExtractor};
use anyhow::Result;
use tracing_subscriber;

fn main() -> Result<()> {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    tracing_subscriber::fmt()
        .with_max_level(tracing::Level::INFO)
        .init();

    println!("=== BSL Documentation Hybrid Extractor ===");
    println!("Extracting BSL syntax directly to hybrid format...");

    let archive_path = "C:/1CProject/1c-help-parser/data/rebuilt.shcntx_ru.zip";
    let output_path = "output/hybrid_docs_direct";

    // –°–æ–∑–¥–∞–µ–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –Ω–∞–ø—Ä—è–º—É—é —Å –ø—É—Ç–µ–º –∫ –∞—Ä—Ö–∏–≤—É
    let mut extractor = BslSyntaxExtractor::new(archive_path);

    println!("üìÅ Source: {}", archive_path);
    println!("üìÅ Output: {}", output_path);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é –≤ –≥–∏–±—Ä–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    extractor.extract_to_hybrid_storage(output_path, None)?;

    println!("‚úÖ Hybrid extraction completed successfully!");
    println!("üìÇ Hybrid documentation saved to: {}", output_path);

    Ok(())
}