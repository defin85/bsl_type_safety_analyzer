//! CLI —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UnifiedBslIndex

use std::path::PathBuf;
use anyhow::{Result, Context};
use clap::{Parser as ClapParser, ValueEnum};
use bsl_analyzer::unified_index::{UnifiedIndexBuilder, BslApplicationMode, ChangeImpact};
use bsl_analyzer::cli_common::{self, OutputWriter, OutputFormat, CliCommand, ProgressReporter};
use serde::{Serialize, Deserialize};

#[derive(ValueEnum, Debug, Clone)]
enum ApplicationMode {
    /// –û–±—ã—á–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (8.1)
    Ordinary,
    /// –£–ø—Ä–∞–≤–ª—è–µ–º–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (8.2+)
    Managed,
    /// –°–º–µ—à–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
    Mixed,
}

impl From<ApplicationMode> for BslApplicationMode {
    fn from(mode: ApplicationMode) -> Self {
        match mode {
            ApplicationMode::Ordinary => BslApplicationMode::OrdinaryApplication,
            ApplicationMode::Managed => BslApplicationMode::ManagedApplication,
            ApplicationMode::Mixed => BslApplicationMode::MixedMode,
        }
    }
}

#[derive(ClapParser, Debug)]
#[command(
    name = "incremental_update",
    about = "–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ BSL —Ç–∏–ø–æ–≤",
    long_about = "–í—ã–ø–æ–ª–Ω—è–µ—Ç –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UnifiedBslIndex –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
)]
struct Args {
    /// –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ 1–°
    #[arg(short, long)]
    config: PathBuf,
    
    /// –í–µ—Ä—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "8.3.25")
    #[arg(short, long)]
    platform_version: String,
    
    /// –†–µ–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    #[arg(short = 'm', long, value_enum, default_value = "managed")]
    mode: ApplicationMode,
    
    /// –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (text, json, table)
    #[arg(short, long, default_value = "text")]
    format: String,
    
    /// –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    #[arg(short, long)]
    verbose: bool,
    
    /// –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (dry-run)
    #[arg(short = 'n', long)]
    dry_run: bool,
    
    /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    #[arg(short = 'f', long)]
    force_incremental: bool,
    
    /// –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º
    #[arg(short, long)]
    quiet: bool,
    
    /// –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    #[arg(short = 's', long)]
    show_stats: bool,
}

#[derive(Debug, Serialize, Deserialize)]
struct UpdateResult {
    config_path: String,
    platform_version: String,
    change_impact: String,
    changed_files_count: usize,
    update_type: String,
    success: bool,
    statistics: UpdateStatistics,
    changes: ChangesSummary,
}

#[derive(Debug, Serialize, Deserialize)]
struct UpdateStatistics {
    elapsed_ms: u128,
    total_entities: usize,
    cache_hit: bool,
    performance_ratio: f64,
}

#[derive(Debug, Serialize, Deserialize)]
struct ChangesSummary {
    added_entities: Vec<String>,
    updated_entities: Vec<String>,
    removed_entities: Vec<String>,
    total_changes: usize,
}

#[derive(Debug, Serialize, Deserialize)]
struct FileChange {
    path: String,
    impact: String,
}

fn main() -> Result<()> {
    let args = Args::parse();
    
    // Initialize logging
    if !args.quiet {
        cli_common::init_logging(args.verbose)?;
    } else {
        cli_common::init_minimal_logging()?;
    }
    
    // Create command and run
    let command = IncrementalUpdateCommand::new(args);
    cli_common::run_command(command)
}

struct IncrementalUpdateCommand {
    args: Args,
}

impl IncrementalUpdateCommand {
    fn new(args: Args) -> Self {
        Self { args }
    }
}

impl CliCommand for IncrementalUpdateCommand {
    fn name(&self) -> &str {
        "incremental_update"
    }
    
    fn description(&self) -> &str {
        "Incremental update of BSL type index"
    }
    
    fn execute(&self) -> Result<()> {
        self.run_update()
    }
}

impl IncrementalUpdateCommand {
    fn run_update(&self) -> Result<()> {
        // Validate config path
        cli_common::validate_path(&self.args.config, "Configuration directory")?;
        
        if !self.args.config.is_dir() {
            return Err(anyhow::anyhow!(
                "Configuration path must be a directory: {}",
                self.args.config.display()
            ));
        }
        
        if !self.args.quiet {
            cli_common::print_info("üîÑ –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ BSL");
        }
        
        // Create builder
        let mut builder = UnifiedIndexBuilder::new()
            .context("Failed to create index builder")?
            .with_application_mode(self.args.mode.clone().into());
        
        let start = std::time::Instant::now();
        
        // Set up progress reporting
        let progress = if !self.args.quiet && !self.args.dry_run {
            Some(ProgressReporter::new(100, "–ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"))
        } else {
            None
        };
        
        // Check feasibility
        let result = match builder.check_incremental_update_feasibility(
            &self.args.config, 
            &self.args.platform_version
        ) {
            Ok((change_impact, changed_files)) => {
                if let Some(p) = &progress {
                    p.update(50);
                }
                
                self.handle_changes(
                    &mut builder, 
                    change_impact, 
                    changed_files, 
                    start
                )?
            }
            Err(e) => {
                if !self.args.quiet {
                    cli_common::print_warning(&format!(
                        "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {}", e
                    ));
                }
                
                self.perform_full_rebuild(&mut builder, start)?
            }
        };
        
        if let Some(p) = progress {
            p.finish();
        }
        
        // Display results
        self.display_results(&result)?;
        
        Ok(())
    }
    
    fn handle_changes(
        &self,
        builder: &mut UnifiedIndexBuilder,
        change_impact: ChangeImpact,
        changed_files: Vec<(PathBuf, ChangeImpact)>,
        start: std::time::Instant,
    ) -> Result<UpdateResult> {
        let mut result = UpdateResult {
            config_path: self.args.config.display().to_string(),
            platform_version: self.args.platform_version.clone(),
            change_impact: format!("{:?}", change_impact),
            changed_files_count: changed_files.len(),
            update_type: String::new(),
            success: false,
            statistics: UpdateStatistics {
                elapsed_ms: 0,
                total_entities: 0,
                cache_hit: false,
                performance_ratio: 0.0,
            },
            changes: ChangesSummary {
                added_entities: Vec::new(),
                updated_entities: Vec::new(),
                removed_entities: Vec::new(),
                total_changes: 0,
            },
        };
        
        if changed_files.is_empty() {
            result.update_type = "None".to_string();
            result.success = true;
            result.statistics.elapsed_ms = start.elapsed().as_millis();
            
            if !self.args.quiet {
                cli_common::print_success("–ò–Ω–¥–µ–∫—Å –∞–∫—Ç—É–∞–ª–µ–Ω, –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ");
            }
            return Ok(result);
        }
        
        if self.args.dry_run {
            result.update_type = "DryRun".to_string();
            result.success = true;
            result.statistics.elapsed_ms = start.elapsed().as_millis();
            
            let recommendation = self.get_recommendation(&change_impact);
            if !self.args.quiet {
                cli_common::print_info(&format!("üîç –†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ - –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"));
                cli_common::print_info(&format!("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {}", recommendation));
            }
            
            return Ok(result);
        }
        
        // Perform actual update
        match change_impact {
            ChangeImpact::None => {
                result.update_type = "None".to_string();
                result.success = true;
            }
            ChangeImpact::FullRebuild if !self.args.force_incremental => {
                if !self.args.quiet {
                    cli_common::print_warning(
                        "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∞ –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ Configuration.xml"
                    );
                }
                return self.perform_full_rebuild(builder, start);
            }
            _ => {
                // Perform incremental update
                if !self.args.quiet {
                    cli_common::print_info("üöÄ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...");
                }
                
                let update_result = builder.perform_incremental_update(
                    &self.args.config,
                    &self.args.platform_version,
                    changed_files
                ).context("Failed to perform incremental update")?;
                
                result.update_type = "Incremental".to_string();
                result.success = update_result.success;
                result.changes = ChangesSummary {
                    added_entities: update_result.added_entities.clone(),
                    updated_entities: update_result.updated_entities.clone(),
                    removed_entities: update_result.removed_entities.clone(),
                    total_changes: update_result.total_changes(),
                };
            }
        }
        
        result.statistics.elapsed_ms = start.elapsed().as_millis();
        result.statistics.cache_hit = true;
        result.statistics.performance_ratio = if result.statistics.elapsed_ms > 0 {
            500.0 / result.statistics.elapsed_ms as f64  // Compare to 500ms baseline
        } else {
            1.0
        };
        
        Ok(result)
    }
    
    fn perform_full_rebuild(
        &self,
        builder: &mut UnifiedIndexBuilder,
        start: std::time::Instant,
    ) -> Result<UpdateResult> {
        if !self.args.quiet {
            cli_common::print_info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω–¥–µ–∫—Å–∞...");
        }
        
        let index = builder.build_index(&self.args.config, &self.args.platform_version)
            .context("Failed to build index")?;
        
        let elapsed = start.elapsed();
        
        Ok(UpdateResult {
            config_path: self.args.config.display().to_string(),
            platform_version: self.args.platform_version.clone(),
            change_impact: "FullRebuild".to_string(),
            changed_files_count: 0,
            update_type: "FullRebuild".to_string(),
            success: true,
            statistics: UpdateStatistics {
                elapsed_ms: elapsed.as_millis(),
                total_entities: index.get_entity_count(),
                cache_hit: false,
                performance_ratio: 1.0,
            },
            changes: ChangesSummary {
                added_entities: Vec::new(),
                updated_entities: Vec::new(),
                removed_entities: Vec::new(),
                total_changes: 0,
            },
        })
    }
    
    fn get_recommendation(&self, impact: &ChangeImpact) -> &'static str {
        match impact {
            ChangeImpact::None => "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è",
            ChangeImpact::Minor => "–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥)",
            ChangeImpact::ModuleUpdate => "–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (~10-50–º—Å)",
            ChangeImpact::MetadataUpdate => "–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (~50-200–º—Å)",
            ChangeImpact::FullRebuild => "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∞ (~500–º—Å)",
        }
    }
    
    fn display_results(&self, result: &UpdateResult) -> Result<()> {
        let format = OutputFormat::from_str(&self.args.format)?;
        let mut writer = OutputWriter::stdout(format);
        
        if !self.args.quiet {
            writer.write_header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞")?;
            
            // Basic info
            let info_rows = vec![
                vec!["–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è".to_string(), result.config_path.clone()],
                vec!["–í–µ—Ä—Å–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã".to_string(), result.platform_version.clone()],
                vec!["–¢–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è".to_string(), result.update_type.clone()],
                vec!["–°—Ç–∞—Ç—É—Å".to_string(), if result.success { "‚úÖ –£—Å–ø–µ—à–Ω–æ" } else { "‚ùå –û—à–∏–±–∫–∞" }.to_string()],
                vec!["–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è".to_string(), format!("{:.2?}–º—Å", result.statistics.elapsed_ms)],
            ];
            
            writer.write_table(&["–ü–∞—Ä–∞–º–µ—Ç—Ä", "–ó–Ω–∞—á–µ–Ω–∏–µ"], info_rows)?;
            
            // Changes summary
            if result.changes.total_changes > 0 {
                writer.write_header("–°–≤–æ–¥–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π")?;
                
                let changes_rows = vec![
                    vec!["–î–æ–±–∞–≤–ª–µ–Ω–æ".to_string(), result.changes.added_entities.len().to_string()],
                    vec!["–û–±–Ω–æ–≤–ª–µ–Ω–æ".to_string(), result.changes.updated_entities.len().to_string()],
                    vec!["–£–¥–∞–ª–µ–Ω–æ".to_string(), result.changes.removed_entities.len().to_string()],
                    vec!["–í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π".to_string(), result.changes.total_changes.to_string()],
                ];
                
                writer.write_table(&["–¢–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"], changes_rows)?;
                
                // Detailed changes if verbose
                if self.args.verbose && result.changes.total_changes > 0 {
                    writer.write_header("–î–µ—Ç–∞–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π")?;
                    
                    if !result.changes.added_entities.is_empty() {
                        writer.write_line("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ:")?;
                        for entity in &result.changes.added_entities {
                            writer.write_line(&format!("   ‚Ä¢ {}", entity))?;
                        }
                    }
                    
                    if !result.changes.updated_entities.is_empty() {
                        writer.write_line("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ:")?;
                        for entity in &result.changes.updated_entities {
                            writer.write_line(&format!("   ‚Ä¢ {}", entity))?;
                        }
                    }
                    
                    if !result.changes.removed_entities.is_empty() {
                        writer.write_line("‚ûñ –£–¥–∞–ª–µ–Ω–æ:")?;
                        for entity in &result.changes.removed_entities {
                            writer.write_line(&format!("   ‚Ä¢ {}", entity))?;
                        }
                    }
                }
            }
            
            // Performance statistics
            if self.args.show_stats {
                writer.write_header("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")?;
                
                let stats_rows = vec![
                    vec!["–í—Å–µ–≥–æ —Å—É—â–Ω–æ—Å—Ç–µ–π".to_string(), result.statistics.total_entities.to_string()],
                    vec!["–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–µ—à".to_string(), if result.statistics.cache_hit { "–î–∞" } else { "–ù–µ—Ç" }.to_string()],
                    vec!["–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏".to_string(), 
                         format!("{:.2}x", result.statistics.performance_ratio)],
                    vec!["–ò–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤".to_string(), result.changed_files_count.to_string()],
                ];
                
                writer.write_table(&["–ú–µ—Ç—Ä–∏–∫–∞", "–ó–Ω–∞—á–µ–Ω–∏–µ"], stats_rows)?;
            }
            
            // Success message
            if result.success {
                cli_common::print_success(&format!(
                    "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {:.2?}–º—Å", 
                    result.statistics.elapsed_ms
                ));
            }
        }
        
        writer.flush()?;
        Ok(())
    }
}