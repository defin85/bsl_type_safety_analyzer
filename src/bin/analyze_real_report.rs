/*!
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
*/

use std::path::PathBuf;
use clap::Parser;
use anyhow::Result;
use std::fs;
use encoding_rs::{UTF_16LE, UTF_8, WINDOWS_1251};

/// –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
#[derive(Parser, Debug)]
#[command(name = "analyze-real-report")]
#[command(about = "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ 1–°")]
struct Args {
    /// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—Ç—á–µ—Ç–∞
    #[arg(short, long)]
    report: PathBuf,
}

fn main() -> Result<()> {
    let args = Args::parse();
    
    println!("–ê–Ω–∞–ª–∏–∑ –æ—Ç—á–µ—Ç–∞: {}", args.report.display());
    println!("{}", "=".repeat(80));
    
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
    let file_bytes = fs::read(&args.report)?;
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
    let content = if let (decoded, _, false) = UTF_16LE.decode(&file_bytes) {
        println!("–ö–æ–¥–∏—Ä–æ–≤–∫–∞: UTF-16LE");
        decoded.into_owned()
    } else if let (decoded, _, false) = UTF_8.decode(&file_bytes) {
        println!("–ö–æ–¥–∏—Ä–æ–≤–∫–∞: UTF-8");
        decoded.into_owned()
    } else if let (decoded, _, false) = WINDOWS_1251.decode(&file_bytes) {
        println!("–ö–æ–¥–∏—Ä–æ–≤–∫–∞: Windows-1251");
        decoded.into_owned()
    } else {
        // Fallback to UTF-8 with replacements
        let (decoded, _, _) = UTF_8.decode(&file_bytes);
        println!("–ö–æ–¥–∏—Ä–æ–≤–∫–∞: UTF-8 (—Å –∑–∞–º–µ–Ω–∞–º–∏)");
        decoded.into_owned()
    };
    
    let lines: Vec<&str> = content.lines().collect();
    
    let mut in_object = false;
    let mut current_object = String::new();
    let mut found_objects = 0;
    let mut found_attributes = 0;
    
    for (i, line) in lines.iter().enumerate() {
        let trimmed = line.trim();
        
        // –ò—â–µ–º –æ–±—ä–µ–∫—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å "-")
        if trimmed.starts_with("-") && trimmed.contains(".") {
            let object_line = trimmed.trim_start_matches("-").trim();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
            if !object_line.contains(".–†–µ–∫–≤–∏–∑–∏—Ç—ã.") && !object_line.contains(".–¢–∞–±–ª–∏—á–Ω—ã–µ–ß–∞—Å—Ç–∏.") {
                if object_line.contains("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏.") || 
                   object_line.contains("–î–æ–∫—É–º–µ–Ω—Ç—ã.") ||
                   object_line.contains("–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã.") ||
                   object_line.contains("–Ø–∑—ã–∫–∏.") {
                    found_objects += 1;
                    current_object = object_line.to_string();
                    in_object = true;
                    println!("\nüî∑ –û–±—ä–µ–∫—Ç #{}: {}", found_objects, object_line);
                    println!("  –°—Ç—Ä–æ–∫–∞: {}", i + 1);
                }
            } else if in_object && object_line.starts_with(&current_object) {
                // –≠—Ç–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
                if object_line.contains(".–†–µ–∫–≤–∏–∑–∏—Ç—ã.") {
                    let parts: Vec<&str> = object_line.split('.').collect();
                    if parts.len() >= 4 {
                        found_attributes += 1;
                        println!("  üìå –†–µ–∫–≤–∏–∑–∏—Ç: {}", parts[3]);
                        
                        // –ò—â–µ–º —Ç–∏–ø –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö
                        for j in (i+1)..lines.len() {
                            let next_line = lines[j].trim();
                            if next_line.starts_with("–¢–∏–ø:") {
                                println!("     –¢–∏–ø: {}", next_line.strip_prefix("–¢–∏–ø:").unwrap().trim());
                                break;
                            }
                            if next_line.starts_with("-") || j > i + 10 {
                                break;
                            }
                        }
                    }
                }
            }
        } else if !trimmed.starts_with("-") && in_object {
            // –°–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞
            if trimmed.contains(":") && !trimmed.is_empty() {
                let parts: Vec<&str> = trimmed.splitn(2, ':').collect();
                if parts.len() == 2 {
                    let key = parts[0].trim();
                    let value = parts[1].trim().trim_matches('"');
                    if !value.is_empty() && key != "–¢–∏–ø" {
                        println!("  üî∏ {}: {}", key, value);
                    }
                }
            }
        }
    }
    
    println!("\n{}", "=".repeat(80));
    println!("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
    println!("  - –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {}", found_objects);
    println!("  - –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤: {}", found_attributes);
    println!("  - –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {}", lines.len());
    
    Ok(())
}