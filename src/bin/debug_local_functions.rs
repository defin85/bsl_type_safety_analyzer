//! –û—Ç–ª–∞–¥–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π

use bsl_analyzer::bsl_parser::{BslAnalyzer, SemanticAnalysisConfig};

fn main() -> anyhow::Result<()> {
    println!("üîç –û—Ç–ª–∞–¥–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π BSL");
    println!("==========================================");
    
    let file_path = "C:\\1CProject\\Unicom\\src\\task_00004\\CreateUsers_v2.bsl";
    
    // –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    let mut analyzer = BslAnalyzer::new()?;
    
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    let content = std::fs::read_to_string(file_path)?;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥
    println!("\nüìÇ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª: {}", file_path);
    println!("üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {} —Å–∏–º–≤–æ–ª–æ–≤", content.len());
    
    match analyzer.analyze_code(&content, file_path) {
        Ok(_) => {
            println!("\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω:");
            let (errors, warnings) = analyzer.get_errors_and_warnings();
            println!("   üîç –û—à–∏–±–æ–∫ –Ω–∞–π–¥–µ–Ω–æ: {}", errors.len());
            println!("   ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {}", warnings.len());
            
            // –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            println!("\nüîç –ü–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫:");
            for (i, error) in errors.iter().take(10).enumerate() {
                println!("   {}: {} ({}:{})", i+1, error.message, error.position.line, error.position.column);
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∏–º, –≤–∏–¥–∏—Ç –ª–∏ –ø–∞—Ä—Å–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω—ã–µ
            let local_function_names = [
                "–ó–∞–ø–∏—Å–∞—Ç—å–í–õ–æ–≥",
                "–†–∞–∑–æ–±—Ä–∞—Ç—åJSON–ò–∑–°—Ç—Ä–æ–∫–∏",
                "–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å–°—Ç—Ä—É–∫—Ç—É—Ä—É–î–∞–Ω–Ω—ã—Ö",
                "–°–æ–∑–¥–∞—Ç—å–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                "–ü–æ–ª—É—á–∏—Ç—å–ò–ª–∏–°–æ–∑–¥–∞—Ç—å–ì—Ä—É–ø–ø—É–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            ];
            
            println!("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:");
            for func_name in &local_function_names {
                let found_error = errors.iter().any(|e| 
                    e.message.contains(func_name) && e.message.contains("–Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                );
                let status = if found_error { "‚ùå –ù–ï –ù–ê–ô–î–ï–ù–ê" } else { "‚úÖ –ù–ê–ô–î–ï–ù–ê" };
                println!("   {} {}", status, func_name);
            }
        }
        Err(e) => {
            println!("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {}", e);
        }
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ - –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é –ø–∞—Ä—Å–µ—Ä–æ–º
    println!("\nüß™ –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ BSL:");
    test_bsl_parser_directly(&content)?;
    
    Ok(())
}

fn test_bsl_parser_directly(content: &str) -> anyhow::Result<()> {
    use bsl_analyzer::bsl_parser::{BslParser, semantic::SemanticAnalyzer};
    
    let parser = BslParser::new()?;
    
    let parse_result = parser.parse(content, "test.bsl");
    
    if let Some(ast) = parse_result.ast {
        println!("   ‚úÖ AST —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ");
        println!("   üìä –û–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –º–æ–¥—É–ª–µ: {}", ast.module.declarations.len());
        
        // –í—ã–≤–æ–¥–∏–º —Ç–∏–ø—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        for (i, decl) in ast.module.declarations.iter().enumerate() {
            let decl_type = match decl {
                bsl_analyzer::bsl_parser::ast::Declaration::Function(f) => format!("–§—É–Ω–∫—Ü–∏—è '{}'", f.name),
                bsl_analyzer::bsl_parser::ast::Declaration::Procedure(p) => format!("–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ '{}'", p.name),
                bsl_analyzer::bsl_parser::ast::Declaration::Variable(v) => format!("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {:?}", v.names),
            };
            println!("   {}: {}", i+1, decl_type);
        }
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        println!("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:");
        let config = SemanticAnalysisConfig::default();
        let mut semantic_analyzer = SemanticAnalyzer::new(config);
        
        match semantic_analyzer.analyze(&ast) {
            Ok(_) => {
                let diagnostics = semantic_analyzer.get_diagnostics();
                println!("   ‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω");
                println!("   üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫ –Ω–∞–π–¥–µ–Ω–æ: {}", diagnostics.len());
                
                // –ò—â–µ–º –æ—à–∏–±–∫–∏ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
                let local_func_errors: Vec<_> = diagnostics.iter()
                    .filter(|d| d.message.contains("–Ω–µ –Ω–∞–π–¥–µ–Ω–∞") && 
                               (d.message.contains("–ó–∞–ø–∏—Å–∞—Ç—å–í–õ–æ–≥") || 
                                d.message.contains("–ú–æ—è–§—É–Ω–∫—Ü–∏—è")))
                    .collect();
                
                println!("   üîç –û—à–∏–±–æ–∫ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏: {}", local_func_errors.len());
                for err in local_func_errors.iter().take(3) {
                    println!("      ‚ùå {}", err.message);
                }
            }
            Err(e) => {
                println!("   ‚ùå –û—à–∏–±–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {}", e);
            }
        }
    } else {
        println!("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å AST");
        for diagnostic in parse_result.diagnostics {
            println!("      ‚ùå {}", diagnostic.message);
        }
    }
    
    Ok(())
}