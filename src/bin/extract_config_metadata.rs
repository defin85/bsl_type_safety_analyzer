/*!
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –≥–∏–±—Ä–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
*/

use anyhow::Result;
use bsl_analyzer::{
    configuration::MetadataReportParser,
    docs_integration::hybrid_storage::HybridDocumentationStorage,
};
use clap::Parser;
use std::path::PathBuf;
use console::style;

#[derive(Parser, Debug)]
#[command(author, version, about = "Extract configuration metadata to hybrid format")]
struct Args {
    /// Path to configuration report file
    #[arg(short, long, default_value = "examples/sample_config_report.txt")]
    report: PathBuf,
    
    /// Output directory for hybrid documentation
    #[arg(short, long, default_value = "output/hybrid_docs_direct")]
    output: PathBuf,
}

fn main() -> Result<()> {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    tracing_subscriber::fmt()
        .with_env_filter(
            tracing_subscriber::EnvFilter::from_default_env()
                .add_directive("info".parse().unwrap())
        )
        .init();
    
    let args = Args::parse();
    
    println!("\n{}", style("=".repeat(60)).blue());
    println!("{}", style("üöÄ –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ú–ï–¢–ê–î–ê–ù–ù–´–• –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò").bold().cyan());
    println!("{}", style("=".repeat(60)).blue());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞
    if !args.report.exists() {
        anyhow::bail!("Configuration report not found: {}", args.report.display());
    }
    
    println!("\nüìÑ –§–∞–π–ª –æ—Ç—á–µ—Ç–∞: {}", style(&args.report.display()).yellow());
    println!("üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {}", style(&args.output.display()).yellow());
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    let parser = MetadataReportParser::new()?;
    let mut storage = HybridDocumentationStorage::new(&args.output);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    storage.initialize()?;
    
    println!("\n{}", style("üìã –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç—á–µ—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...").green());
    
    // –ü–∞—Ä—Å–∏–º –æ—Ç—á–µ—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –≥–∏–±—Ä–∏–¥–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    parser.parse_to_hybrid_storage(&args.report, &mut storage)?;
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    storage.finalize()?;
    
    println!("\n{}", style("=".repeat(60)).blue());
    println!("{}", style("‚úÖ –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û").bold().green());
    println!("{}", style("=".repeat(60)).blue());
    
    Ok(())
}