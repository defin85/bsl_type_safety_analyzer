use std::path::Path;
use bsl_analyzer::configuration::metadata_parser::MetadataReportParser;
use clap::Parser;

#[derive(Parser)]
#[command(name = "analyze_metadata_types")]
#[command(about = "Detailed analysis of 1C metadata types with constraints")]
struct Args {
    /// Path to 1C configuration report file (required)
    #[arg(long, short)]
    report: String,
}

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let args = Args::parse();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞
    if !Path::new(&args.report).exists() {
        eprintln!("‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", args.report);
        eprintln!("üìù –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:");
        eprintln!("   cargo run --bin analyze_metadata_types -- --report \"C:\\–ø—É—Ç—å\\–∫\\–æ—Ç—á–µ—Ç—É.txt\"");
        std::process::exit(1);
    }
    
    let parser = MetadataReportParser::new()?;
    let result = parser.parse_report(&args.report)?;
    
    println!("Parsed {} contracts total", result.len());
    
    // –ù–∞–π–¥–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –ó–∞–∫–∞–∑–ù–∞—Ä—è–¥—ã
    if let Some(contract) = result.iter().find(|c| c.name == "–ó–∞–∫–∞–∑–ù–∞—Ä—è–¥—ã") {
        println!("\n=== –î–æ–∫—É–º–µ–Ω—Ç –ó–∞–∫–∞–∑–ù–∞—Ä—è–¥—ã ===");
        println!("Name: {}", contract.name);
        println!("Object type: {}", contract.object_type);
        
        println!("\n–ê—Ç—Ä–∏–±—É—Ç—ã ({}):", contract.structure.attributes.len());
        for attr in &contract.structure.attributes {
            println!("  {} ({})", attr.name, attr.data_type);
            if let Some(length) = attr.length {
                println!("    Length: {}", length);
            }
            if let Some(precision) = attr.precision {
                println!("    Precision: {}", precision);
            }
        }
        
        println!("\n–¢–∞–±–ª–∏—á–Ω—ã–µ —á–∞—Å—Ç–∏ ({}):", contract.structure.tabular_sections.len());
        for ts in &contract.structure.tabular_sections {
            println!("  {} ({} –∞—Ç—Ä–∏–±—É—Ç–æ–≤)", ts.name, ts.attributes.len());
            for attr in &ts.attributes {
                println!("    {} ({})", attr.name, attr.data_type);
                if let Some(length) = attr.length {
                    println!("      Length: {}", length);
                }
                if let Some(precision) = attr.precision {
                    println!("      Precision: {}", precision);
                }
            }
        }
    } else {
        println!("‚ùå –î–æ–∫—É–º–µ–Ω—Ç –ó–∞–∫–∞–∑–ù–∞—Ä—è–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    }
    
    // –ù–∞–π–¥–µ–º —Ä–µ–≥–∏—Å—Ç—Ä —Å–≤–µ–¥–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–∫—Ü–∏–π
    if let Some(contract) = result.iter().find(|c| c.name == "–¢–µ—Å—Ç–æ–≤—ã–π–†–µ–≥–∏—Å—Ç—Ä–°–≤–µ–¥–µ–Ω–∏–π") {
        println!("\n=== –†–µ–≥–∏—Å—Ç—Ä–°–≤–µ–¥–µ–Ω–∏–π –¢–µ—Å—Ç–æ–≤—ã–π–†–µ–≥–∏—Å—Ç—Ä–°–≤–µ–¥–µ–Ω–∏–π ===");
        println!("Name: {}", contract.name);
        println!("Object type: {}", contract.object_type);
        
        println!("\n–í—Å–µ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–æ–≤: {}", contract.structure.attributes.len());
        for attr in &contract.structure.attributes {
            println!("  {} ({})", attr.name, attr.data_type);
        }
    } else {
        println!("‚ùå –†–µ–≥–∏—Å—Ç—Ä–°–≤–µ–¥–µ–Ω–∏–π –¢–µ—Å—Ç–æ–≤—ã–π–†–µ–≥–∏—Å—Ç—Ä–°–≤–µ–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    }
    
    Ok(())
}