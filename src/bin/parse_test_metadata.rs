use std::path::Path;
use std::fs;
use bsl_analyzer::configuration::metadata_parser::MetadataReportParser;
use bsl_analyzer::docs_integration::hybrid_storage::HybridDocumentationStorage;
use clap::Parser;

#[derive(Parser)]
#[command(name = "parse_metadata_full")]
#[command(about = "Full 1C metadata parser with HybridDocumentationStorage")]
struct Args {
    /// Path to 1C configuration report file (required)
    #[arg(long, short)]
    report: String,
    
    /// Output directory for parsed metadata
    #[arg(long, short, default_value = "./output/parsed_metadata")]
    output: String,
}

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let args = Args::parse();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ—Ç—á–µ—Ç–∞
    if !Path::new(&args.report).exists() {
        eprintln!("‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", args.report);
        eprintln!("üìù –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:");
        eprintln!("   cargo run --bin parse_metadata_full -- --report \"C:\\–ø—É—Ç—å\\–∫\\–æ—Ç—á–µ—Ç—É.txt\" --output \"./output\"");
        std::process::exit(1);
    }
    
    let report_path = &args.report;
    let output_dir = &args.output;
    
    println!("üîç –ü–∞—Ä—Å–∏–Ω–≥ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑: {}", report_path);
    println!("üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {}", output_dir);
    
    // –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    fs::create_dir_all(output_dir)?;
    
    // –ü–∞—Ä—Å–∏–º –æ—Ç—á–µ—Ç –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    let parser = MetadataReportParser::new()?;
    let contracts = parser.parse_report(report_path)?;
    
    println!("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {} –æ–±—ä–µ–∫—Ç–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", contracts.len());
    
    // –°–æ–∑–¥–∞–µ–º HybridDocumentationStorage —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    let mut storage = HybridDocumentationStorage::new(Path::new(output_dir));
    storage.initialize()?;
    
    println!("üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ HybridDocumentationStorage —Å—Ç—Ä—É–∫—Ç—É—Ä–∞");
    
    // –°–µ–ª–µ–∫—Ç–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è MetadataReportParser - —Ç–æ–ª—å–∫–æ metadata_types, –ù–ï –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ–º —Ñ–æ—Ä–º—ã
    storage.clear_metadata_types_only()?;
    println!("üßπ –û—á–∏—â–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ metadata_types (—Å–µ–ª–µ–∫—Ç–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ - FormXmlParser –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)");
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –ø–æ —Ç–∏–ø–∞–º –æ–±—ä–µ–∫—Ç–æ–≤
    let mut contracts_by_type: std::collections::HashMap<String, Vec<&_>> = std::collections::HashMap::new();
    for contract in &contracts {
        contracts_by_type
            .entry(contract.object_type.to_string().to_lowercase())
            .or_insert_with(Vec::new)
            .push(contract);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ metadata_types –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    let metadata_types_dir = Path::new(output_dir).join("configuration").join("metadata_types");
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
    for (object_type, type_contracts) in &contracts_by_type {
        let file_name = format!("{}.json", object_type);
        let type_file = metadata_types_dir.join(&file_name);
        let json_content = serde_json::to_string_pretty(type_contracts)?;
        fs::write(&type_file, json_content)?;
        println!("üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {} –æ–±—ä–µ–∫—Ç–æ–≤ —Ç–∏–ø–∞ '{}' –≤ {}", type_contracts.len(), object_type, file_name);
    }
    
    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    println!("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ê–†–°–ò–ù–ì–ê:");
    let mut stats: std::collections::HashMap<String, usize> = std::collections::HashMap::new();
    
    for contract in &contracts {
        *stats.entry(contract.object_type.to_string()).or_insert(0) += 1;
    }
    
    for (object_type, count) in stats.iter() {
        println!("  {} –æ–±—ä–µ–∫—Ç–æ–≤ —Ç–∏–ø–∞ '{}'", count, object_type);
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    println!("\nüîç –î–ï–¢–ê–õ–ò –ö–õ–Æ–ß–ï–í–´–• –û–ë–™–ï–ö–¢–û–í:");
    
    // –î–æ–∫—É–º–µ–Ω—Ç –ó–∞–∫–∞–∑–ù–∞—Ä—è–¥—ã
    if let Some(contract) = contracts.iter().find(|c| c.name == "–ó–∞–∫–∞–∑–ù–∞—Ä—è–¥—ã") {
        println!("\nüìÑ –î–æ–∫—É–º–µ–Ω—Ç.–ó–∞–∫–∞–∑–ù–∞—Ä—è–¥—ã:");
        println!("  –ê—Ç—Ä–∏–±—É—Ç–æ–≤: {}", contract.structure.attributes.len());
        println!("  –¢–∞–±–ª–∏—á–Ω—ã—Ö —á–∞—Å—Ç–µ–π: {}", contract.structure.tabular_sections.len());
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        for attr in &contract.structure.attributes {
            if attr.name.contains("–°—Ç—Ä–æ–∫–æ–≤—ã–π") || attr.name.contains("–ß–∏—Å–ª–æ–≤–æ–π") {
                let constraints = if let Some(length) = attr.length {
                    if let Some(precision) = attr.precision {
                        format!(" [length={}, precision={}]", length, precision)
                    } else {
                        format!(" [length={}]", length)
                    }
                } else {
                    String::new()
                };
                println!("    {} ({}){}", attr.name, attr.data_type, constraints);
            }
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–∞–≤–Ω–æ–π —Ç–∏–ø
        for ts in &contract.structure.tabular_sections {
            if ts.name == "–°—Ç–æ—Ä–æ–Ω—ã" {
                for attr in &ts.attributes {
                    if attr.name == "–°—Ç–æ—Ä–æ–Ω–∞" {
                        println!("    –°–æ—Å—Ç–∞–≤–Ω–æ–π —Ç–∏–ø: {} ({})", attr.name, attr.data_type);
                    }
                }
            }
        }
    }
    
    // –†–µ–≥–∏—Å—Ç—Ä–°–≤–µ–¥–µ–Ω–∏–π –¢–µ—Å—Ç–æ–≤—ã–π–†–µ–≥–∏—Å—Ç—Ä–°–≤–µ–¥–µ–Ω–∏–π
    if let Some(contract) = contracts.iter().find(|c| c.name == "–¢–µ—Å—Ç–æ–≤—ã–π–†–µ–≥–∏—Å—Ç—Ä–°–≤–µ–¥–µ–Ω–∏–π") {
        println!("\nüìä –†–µ–≥–∏—Å—Ç—Ä–°–≤–µ–¥–µ–Ω–∏–π.–¢–µ—Å—Ç–æ–≤—ã–π–†–µ–≥–∏—Å—Ç—Ä–°–≤–µ–¥–µ–Ω–∏–π:");
        
        // –ò–∑–º–µ—Ä–µ–Ω–∏—è (–æ–ø—Ä–µ–¥–µ–ª—è—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏)
        if let Some(ref dimensions) = contract.structure.dimensions {
            println!("  üìê –ò–∑–º–µ—Ä–µ–Ω–∏—è ({}): ", dimensions.len());
            for dim in dimensions {
                println!("    {} ({})", dim.name, dim.data_type);
            }
        }
        
        // –†–µ—Å—É—Ä—Å—ã (—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
        if let Some(ref resources) = contract.structure.resources {
            println!("  üìä –†–µ—Å—É—Ä—Å—ã ({}): ", resources.len());
            for res in resources {
                println!("    {} ({})", res.name, res.data_type);
            }
        }
        
        // –†–µ–∫–≤–∏–∑–∏—Ç—ã (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã)
        println!("  üìù –†–µ–∫–≤–∏–∑–∏—Ç—ã ({}): ", contract.structure.attributes.len());
        for attr in &contract.structure.attributes {
            println!("    {} ({})", attr.name, attr.data_type);
        }
    }
    
    println!("\nüéØ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
    println!("üìÇ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {}", output_dir);
    
    Ok(())
}