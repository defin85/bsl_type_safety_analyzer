use std::collections::HashMap;
use anyhow::Result;
use petgraph::graph::{DiGraph, NodeIndex};
use petgraph::Direction;
use serde::{Serialize, Deserialize};

use super::entity::{BslEntity, BslEntityId, BslEntityType, BslEntityKind, BslMethod, BslProperty, BslApplicationMode};

#[derive(Debug, Clone, Copy, PartialEq, Eq, Serialize, Deserialize)]
pub enum BslLanguagePreference {
    /// –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä—É—Å—Å–∫–∏–º –∏–º–µ–Ω–∞–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤)
    Russian,
    /// –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–º –∏–º–µ–Ω–∞–º (–¥–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤)
    English,
    /// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–µ—Ä–≤–æ–º—É –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É —Ç–∏–ø—É
    Auto,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct UnifiedBslIndex {
    // –†–µ–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application_mode: BslApplicationMode,
    
    // –û—Å–Ω–æ–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    entities: HashMap<BslEntityId, BslEntity>,
    
    // –ò–Ω–¥–µ–∫—Å—ã –ø–æ–∏—Å–∫–∞ O(1)
    by_name: HashMap<String, BslEntityId>,
    by_qualified_name: HashMap<String, BslEntityId>,
    by_type: HashMap<BslEntityType, Vec<BslEntityId>>,
    by_kind: HashMap<BslEntityKind, Vec<BslEntityId>>,
    
    // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
    methods_by_name: HashMap<String, Vec<BslEntityId>>,
    properties_by_name: HashMap<String, Vec<BslEntityId>>,
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏–º–µ–Ω–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ O(1)
    alternative_names: HashMap<String, BslEntityId>,
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∞–ª–∏–∞—Å—ã 1–°: –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è -> —Ä–µ–∞–ª—å–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    global_aliases: HashMap<String, BslEntityId>,
    
    // –Ø–∑—ã–∫–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    russian_names: HashMap<String, BslEntityId>,  // —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –∏–º–µ–Ω–∞
    english_names: HashMap<String, BslEntityId>,  // —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∏–º–µ–Ω–∞
    
    // –ì—Ä–∞—Ñ—ã –æ—Ç–Ω–æ—à–µ–Ω–∏–π
    #[serde(skip)]
    inheritance_graph: DiGraph<BslEntityId, ()>,
    #[serde(skip)]
    inheritance_node_map: HashMap<BslEntityId, NodeIndex>,
    #[serde(skip)]
    reference_graph: DiGraph<BslEntityId, String>,
    #[serde(skip)]
    reference_node_map: HashMap<BslEntityId, NodeIndex>,
}

impl UnifiedBslIndex {
    pub fn new() -> Self {
        Self::with_application_mode(BslApplicationMode::ManagedApplication)
    }
    
    pub fn with_application_mode(mode: BslApplicationMode) -> Self {
        Self {
            application_mode: mode,
            entities: HashMap::new(),
            by_name: HashMap::new(),
            by_qualified_name: HashMap::new(),
            by_type: HashMap::new(),
            by_kind: HashMap::new(),
            methods_by_name: HashMap::new(),
            properties_by_name: HashMap::new(),
            alternative_names: HashMap::new(),
            global_aliases: HashMap::new(),
            russian_names: HashMap::new(),
            english_names: HashMap::new(),
            inheritance_graph: DiGraph::new(),
            inheritance_node_map: HashMap::new(),
            reference_graph: DiGraph::new(),
            reference_node_map: HashMap::new(),
        }
    }
    
    pub fn get_application_mode(&self) -> BslApplicationMode {
        self.application_mode
    }
    
    pub fn add_entity(&mut self, entity: BslEntity) -> Result<()> {
        let id = entity.id.clone();
        let name = entity.display_name.clone();
        let qualified_name = entity.qualified_name.clone();
        let entity_type = entity.entity_type.clone();
        let entity_kind = entity.entity_kind.clone();
        
        // –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã
        for method_name in entity.interface.methods.keys() {
            self.methods_by_name
                .entry(method_name.clone())
                .or_insert_with(Vec::new)
                .push(id.clone());
        }
        
        // –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º —Å–≤–æ–π—Å—Ç–≤–∞
        for property_name in entity.interface.properties.keys() {
            self.properties_by_name
                .entry(property_name.clone())
                .or_insert_with(Vec::new)
                .push(id.clone());
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
        self.by_name.insert(name.clone(), id.clone());
        self.by_qualified_name.insert(qualified_name.clone(), id.clone());
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏–º–µ–Ω–∞
        self.add_alternative_names(&name, &id);
        
        self.by_type
            .entry(entity_type)
            .or_insert_with(Vec::new)
            .push(id.clone());
            
        self.by_kind
            .entry(entity_kind)
            .or_insert_with(Vec::new)
            .push(id.clone());
        
        // –î–æ–±–∞–≤–ª—è–µ–º —É–∑–µ–ª –≤ –≥—Ä–∞—Ñ—ã
        let node_idx = self.inheritance_graph.add_node(id.clone());
        self.inheritance_node_map.insert(id.clone(), node_idx);
        
        let ref_node_idx = self.reference_graph.add_node(id.clone());
        self.reference_node_map.insert(id.clone(), ref_node_idx);
        
        // –û–û–ü-–ø–æ–¥—Ö–æ–¥: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        let mut enhanced_entity = entity;
        if enhanced_entity.entity_type == BslEntityType::Configuration {
            enhanced_entity = self.inherit_manager_methods(enhanced_entity)?;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–Ω–æ—Å—Ç—å
        self.entities.insert(id, enhanced_entity);
        
        Ok(())
    }
    
    pub fn build_inheritance_relationships(&mut self) -> Result<()> {
        let entities_snapshot: Vec<(BslEntityId, Vec<String>)> = self.entities
            .iter()
            .map(|(id, entity)| (id.clone(), entity.constraints.parent_types.clone()))
            .collect();
            
        for (child_id, parent_names) in entities_snapshot {
            if let Some(&child_node) = self.inheritance_node_map.get(&child_id) {
                for parent_name in parent_names {
                    if let Some(parent_id) = self.by_qualified_name.get(&parent_name).or_else(|| self.by_name.get(&parent_name)) {
                        if let Some(&parent_node) = self.inheritance_node_map.get(parent_id) {
                            self.inheritance_graph.add_edge(parent_node, child_node, ());
                        }
                    }
                }
            }
        }
        
        Ok(())
    }
    
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∞–ª–∏–∞—Å—ã 1–° –¥–ª—è –æ–±—â–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    pub fn initialize_global_aliases(&mut self) -> Result<()> {
        // –ú–∞–ø–ø–∏–Ω–≥ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∞–ª–∏–∞—Å–æ–≤ 1–° –∫ —Ä–µ–∞–ª—å–Ω—ã–º —Ç–∏–ø–∞–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        let aliases = [
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–∞–∑—ã
            ("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π–ë–∞–∑—ã", "–ú–µ–Ω–µ–¥–∂–µ—Ä–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π–ë–∞–∑—ã (InfoBaseUsersManager)"),
            ("InfoBaseUsers", "–ú–µ–Ω–µ–¥–∂–µ—Ä–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π–ë–∞–∑—ã (InfoBaseUsersManager)"),
            
            // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç)
            ("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ", "–ú–µ–Ω–µ–¥–∂–µ—Ä–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"),
            ("Metadata", "MetadataManager"),
            
            // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
            ("–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã", "–ú–µ–Ω–µ–¥–∂–µ—Ä–ö–æ–Ω—Å—Ç–∞–Ω—Ç"),
            ("Constants", "ConstantsManager"),
            
            // –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ (–æ–±—â–∏–π –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏–ú–µ–Ω–µ–¥–∂–µ—Ä)
            ("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏", "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏–ú–µ–Ω–µ–¥–∂–µ—Ä (CatalogsManager)"),
            ("Catalogs", "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏–ú–µ–Ω–µ–¥–∂–µ—Ä (CatalogsManager)"),
            
            // –î–æ–∫—É–º–µ–Ω—Ç—ã
            ("–î–æ–∫—É–º–µ–Ω—Ç—ã", "–ú–µ–Ω–µ–¥–∂–µ—Ä–î–æ–∫—É–º–µ–Ω—Ç–æ–≤"),
            ("Documents", "DocumentsManager"),
            
            // –†–µ–≥–∏—Å—Ç—Ä—ã —Å–≤–µ–¥–µ–Ω–∏–π
            ("–†–µ–≥–∏—Å—Ç—Ä—ã–°–≤–µ–¥–µ–Ω–∏–π", "–ú–µ–Ω–µ–¥–∂–µ—Ä–†–µ–≥–∏—Å—Ç—Ä–æ–≤–°–≤–µ–¥–µ–Ω–∏–π"),
            ("InformationRegisters", "InformationRegistersManager"),
            
            // –†–µ–≥–∏—Å—Ç—Ä—ã –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
            ("–†–µ–≥–∏—Å—Ç—Ä—ã–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è", "–ú–µ–Ω–µ–¥–∂–µ—Ä–†–µ–≥–∏—Å—Ç—Ä–æ–≤–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è"),
            ("AccumulationRegisters", "AccumulationRegistersManager"),
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∏
            ("–û–±—Ä–∞–±–æ—Ç–∫–∏", "–ú–µ–Ω–µ–¥–∂–µ—Ä–û–±—Ä–∞–±–æ—Ç–æ–∫"),
            ("DataProcessors", "DataProcessorsManager"),
            
            // –û—Ç—á–µ—Ç—ã
            ("–û—Ç—á–µ—Ç—ã", "–ú–µ–Ω–µ–¥–∂–µ—Ä–û—Ç—á–µ—Ç–æ–≤"),
            ("Reports", "ReportsManager"),
        ];
        
        // –°–æ–∑–¥–∞–µ–º –∞–ª–∏–∞—Å—ã –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤
        for (alias, target_type) in &aliases {
            if let Some(target_id) = self.find_target_for_alias(target_type) {
                self.global_aliases.insert(alias.to_string(), target_id.clone());
                println!("üîó –°–æ–∑–¥–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞–ª–∏–∞—Å: {} ‚Üí {}", alias, target_type);
            } else {
                println!("‚ö†Ô∏è –¶–µ–ª–µ–≤–æ–π —Ç–∏–ø '{}' –¥–ª—è –∞–ª–∏–∞—Å–∞ '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω", target_type, alias);
            }
        }
        
        println!("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {} –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∞–ª–∏–∞—Å–æ–≤ 1–°", self.global_aliases.len());
        Ok(())
    }
    
    /// –ò—â–µ—Ç —Ü–µ–ª–µ–≤–æ–π —Ç–∏–ø –¥–ª—è –∞–ª–∏–∞—Å–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏ –ø–æ–∏—Å–∫–∞
    fn find_target_for_alias(&self, target_type: &str) -> Option<&BslEntityId> {
        println!("üîç –ü–æ–∏—Å–∫ target –¥–ª—è –∞–ª–∏–∞—Å–∞: '{}'", target_type);
        
        // 1. –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ qualified_name
        if let Some(id) = self.by_qualified_name.get(target_type) {
            println!("‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ qualified_name: {}", target_type);
            return Some(id);
        }
        
        // 2. –ü–æ–∏—Å–∫ –ø–æ display_name
        if let Some(id) = self.by_name.get(target_type) {
            if let Some(entity) = self.entities.get(id) {
                println!("‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ display_name: {} -> {} ({:?})", 
                    target_type, entity.qualified_name, entity.entity_kind);
                return Some(id);
            }
        }
        
        // 3. –ü–æ–∏—Å–∫ –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –∏–º–µ–Ω–∞–º
        if let Some(id) = self.alternative_names.get(target_type) {
            println!("‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –∏–º–µ–Ω–∞–º: {}", target_type);
            return Some(id);
        }
        
        // 4. –ì–∏–±–∫–∏–π –ø–æ–∏—Å–∫ —Å —á–∞—Å—Ç–∏—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º (–¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∏–º–µ–Ω) - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ—á–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        for (qualified_name, id) in &self.by_qualified_name {
            if qualified_name.contains(target_type) {
                println!("‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é: {} -> {}", target_type, qualified_name);
                return Some(id);
            }
        }
        
        println!("‚ùå –¢–∏–ø '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω", target_type);
        None
    }
    
    /// –ü–∞—Ä—Å–∏—Ç display name –Ω–∞ —Å–æ—Å—Ç–∞–≤–Ω—ã–µ —á–∞—Å—Ç–∏
    fn parse_display_name(display_name: &str) -> (Option<String>, Option<String>) {
        if let Some(pos) = display_name.find(" (") {
            if let Some(end_pos) = display_name.rfind(")") {
                let first_name = display_name[..pos].to_string();
                let second_name = display_name[pos + 2..end_pos].to_string();
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–∞ –Ω–∞–∑–≤–∞–Ω–∏—è - –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫, –ø—Ä–æ—Å—Ç–æ –¥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
                return (Some(first_name), Some(second_name));
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–∫–æ–±–æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
        (Some(display_name.to_string()), None)
    }
    
    /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
    fn contains_cyrillic(text: &str) -> bool {
        text.chars().any(|c| '\u{0400}' <= c && c <= '\u{04FF}')
    }
    
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏–º–µ–Ω–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å —è–∑—ã–∫–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    fn add_alternative_names(&mut self, display_name: &str, entity_id: &BslEntityId) {
        let (first_name, second_name) = Self::parse_display_name(display_name);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ø–æ–ª–Ω–æ–≥–æ
        if let Some(name) = first_name {
            if name != *display_name {
                self.alternative_names.insert(name.clone(), entity_id.clone());
                
                // –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –ø–æ —è–∑—ã–∫—É
                if Self::contains_cyrillic(&name) {
                    self.russian_names.insert(name, entity_id.clone());
                } else {
                    self.english_names.insert(name, entity_id.clone());
                }
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ø–æ–ª–Ω–æ–≥–æ
        if let Some(name) = second_name {
            if name != *display_name {
                self.alternative_names.insert(name.clone(), entity_id.clone());
                
                // –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –ø–æ —è–∑—ã–∫—É
                if Self::contains_cyrillic(&name) {
                    self.russian_names.insert(name, entity_id.clone());
                } else {
                    self.english_names.insert(name, entity_id.clone());
                }
            }
        }
    }
    
    /// <api-method>
    ///   <name>find_entity</name>
    ///   <purpose>–ü–æ–∏—Å–∫ —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ –∏–º–µ–Ω–∏ —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —è–∑—ã–∫–∞</purpose>
    ///   <parameters>
    ///     <param name="name" type="&str">–ò–º—è —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ (—Ä—É—Å—Å–∫–æ–µ –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ)</param>
    ///   </parameters>
    ///   <returns>Option<&BslEntity></returns>
    ///   <examples>
    ///     <example lang="rust">
    ///       // –ü–æ–∏—Å–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    ///       let entity = index.find_entity("–ú–∞—Å—Å–∏–≤")?;
    ///       let entity = index.find_entity("Array")?; // –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
    ///       
    ///       // –ü–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    ///       let entity = index.find_entity("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏.–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞")?;
    ///     </example>
    ///   </examples>
    /// </api-method>
    pub fn find_entity(&self, name: &str) -> Option<&BslEntity> {
        self.find_entity_with_preference(name, BslLanguagePreference::Auto)
    }
    
    /// <api-method>
    ///   <name>find_entity_with_preference</name>
    ///   <purpose>–ü–æ–∏—Å–∫ —Å—É—â–Ω–æ—Å—Ç–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —è–∑—ã–∫–æ–≤—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π</purpose>
    ///   <parameters>
    ///     <param name="name" type="&str">–ò–º—è —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞</param>
    ///     <param name="preference" type="BslLanguagePreference">–Ø–∑—ã–∫–æ–≤–æ–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ (Russian/English/Auto)</param>
    ///   </parameters>
    ///   <returns>Option<&BslEntity></returns>
    ///   <algorithm>
    ///     <step>–ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª–Ω–æ–º—É qualified_name (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π)</step>
    ///     <step>–ü–æ–∏—Å–∫ –ø–æ display_name</step>
    ///     <step>–ü–æ–∏—Å–∫ —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–æ–≤—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π</step>
    ///   </algorithm>
    /// </api-method>
    pub fn find_entity_with_preference(&self, name: &str, preference: BslLanguagePreference) -> Option<&BslEntity> {
        // 1. –ü–æ–∏—Å–∫ –ø–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–º –∞–ª–∏–∞—Å–∞–º 1–° (–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        if let Some(id) = self.global_aliases.get(name) {
            return self.entities.get(id);
        }
        
        // 2. –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª–Ω–æ–º—É qualified_name (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        if let Some(id) = self.by_qualified_name.get(name) {
            return self.entities.get(id);
        }
        
        // 3. –ü–æ–∏—Å–∫ –ø–æ display_name (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        if let Some(id) = self.by_name.get(name) {
            return self.entities.get(id);
        }
        
        // 4. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —è–∑—ã–∫–æ–≤—ã–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º
        match preference {
            BslLanguagePreference::Russian => {
                // –°–Ω–∞—á–∞–ª–∞ —Ä—É—Å—Å–∫–∏–µ –∏–º–µ–Ω–∞
                if let Some(id) = self.russian_names.get(name) {
                    return self.entities.get(id);
                }
                // –ó–∞—Ç–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ
                if let Some(id) = self.english_names.get(name) {
                    return self.entities.get(id);
                }
            }
            BslLanguagePreference::English => {
                // –°–Ω–∞—á–∞–ª–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∏–º–µ–Ω–∞
                if let Some(id) = self.english_names.get(name) {
                    return self.entities.get(id);
                }
                // –ó–∞—Ç–µ–º —Ä—É—Å—Å–∫–∏–µ
                if let Some(id) = self.russian_names.get(name) {
                    return self.entities.get(id);
                }
            }
            BslLanguagePreference::Auto => {
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∑–∞–ø—Ä–æ—Å–∞ –∏ –∏—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
                if Self::contains_cyrillic(name) {
                    // –ü–æ–∏—Å–∫ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã - —Å–Ω–∞—á–∞–ª–∞ —Ä—É—Å—Å–∫–∏–µ
                    if let Some(id) = self.russian_names.get(name) {
                        return self.entities.get(id);
                    }
                    if let Some(id) = self.english_names.get(name) {
                        return self.entities.get(id);
                    }
                } else {
                    // –ü–æ–∏—Å–∫ –ª–∞—Ç–∏–Ω–∏—Ü—ã - —Å–Ω–∞—á–∞–ª–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ
                    if let Some(id) = self.english_names.get(name) {
                        return self.entities.get(id);
                    }
                    if let Some(id) = self.russian_names.get(name) {
                        return self.entities.get(id);
                    }
                }
            }
        }
        
        None
    }
    
    pub fn find_entity_by_id(&self, id: &BslEntityId) -> Option<&BslEntity> {
        self.entities.get(id)
    }
    
    pub fn find_types_with_method(&self, method_name: &str) -> Vec<&BslEntity> {
        self.methods_by_name.get(method_name)
            .map(|ids| {
                ids.iter()
                    .filter_map(|id| self.entities.get(id))
                    .collect()
            })
            .unwrap_or_default()
    }
    
    pub fn find_types_with_property(&self, property_name: &str) -> Vec<&BslEntity> {
        self.properties_by_name.get(property_name)
            .map(|ids| {
                ids.iter()
                    .filter_map(|id| self.entities.get(id))
                    .collect()
            })
            .unwrap_or_default()
    }
    
    /// <api-method>
    ///   <name>get_all_methods</name>
    ///   <purpose>–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ —Ç–∏–ø–∞ –≤–∫–ª—é—á–∞—è —É–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–Ω—ã–µ</purpose>
    ///   <parameters>
    ///     <param name="entity_name" type="&str">–ò–º—è —Ç–∏–ø–∞</param>
    ///   </parameters>
    ///   <returns>HashMap<String, BslMethod></returns>
    ///   <algorithm>
    ///     <step>–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Å–±–æ—Ä –º–µ—Ç–æ–¥–æ–≤ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–∏–ø–æ–≤</step>
    ///     <step>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ (—Å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º)</step>
    ///   </algorithm>
    ///   <examples>
    ///     <example lang="rust">
    ///       // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–µ—Ç–æ–¥—ã —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
    ///       let methods = index.get_all_methods("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏.–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞");
    ///       // –í–∫–ª—é—á–∞–µ—Ç –º–µ—Ç–æ–¥—ã –æ—Ç –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–û–±—ä–µ–∫—Ç, –û–±—ä–µ–∫—Ç–ë–î –∏ —Ç.–¥.
    ///       
    ///       // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
    ///       if methods.contains_key("–ó–∞–ø–∏—Å–∞—Ç—å") {
    ///           println!("–û–±—ä–µ–∫—Ç –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å");
    ///       }
    ///     </example>
    ///   </examples>
    /// </api-method>
    pub fn get_all_methods(&self, entity_name: &str) -> HashMap<String, BslMethod> {
        let mut all_methods = HashMap::new();
        
        if let Some(entity) = self.find_entity(entity_name) {
            // –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥—ã –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π
            self.collect_inherited_methods(&entity.id, &mut all_methods);
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã (–º–æ–≥—É—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ)
            for (name, method) in &entity.interface.methods {
                all_methods.insert(name.clone(), method.clone());
            }
        }
        
        all_methods
    }
    
    fn collect_inherited_methods(&self, entity_id: &BslEntityId, methods: &mut HashMap<String, BslMethod>) {
        if let Some(&node_idx) = self.inheritance_node_map.get(entity_id) {
            // –û–±—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª–µ–π
            for parent_idx in self.inheritance_graph.neighbors_directed(node_idx, Direction::Incoming) {
                if let Some(parent_id) = self.inheritance_graph.node_weight(parent_idx) {
                    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥—ã —Ä–æ–¥–∏—Ç–µ–ª–µ–π
                    self.collect_inherited_methods(parent_id, methods);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã —Ç–µ–∫—É—â–µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
                    if let Some(parent_entity) = self.entities.get(parent_id) {
                        for (name, method) in &parent_entity.interface.methods {
                            methods.insert(name.clone(), method.clone());
                        }
                    }
                }
            }
        }
    }
    
    pub fn get_all_properties(&self, entity_name: &str) -> HashMap<String, BslProperty> {
        let mut all_properties = HashMap::new();
        
        if let Some(entity) = self.find_entity(entity_name) {
            // –°–æ–±–∏—Ä–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π
            self.collect_inherited_properties(&entity.id, &mut all_properties);
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
            for (name, property) in &entity.interface.properties {
                all_properties.insert(name.clone(), property.clone());
            }
        }
        
        all_properties
    }
    
    fn collect_inherited_properties(&self, entity_id: &BslEntityId, properties: &mut HashMap<String, BslProperty>) {
        if let Some(&node_idx) = self.inheritance_node_map.get(entity_id) {
            for parent_idx in self.inheritance_graph.neighbors_directed(node_idx, Direction::Incoming) {
                if let Some(parent_id) = self.inheritance_graph.node_weight(parent_idx) {
                    self.collect_inherited_properties(parent_id, properties);
                    
                    if let Some(parent_entity) = self.entities.get(parent_id) {
                        for (name, property) in &parent_entity.interface.properties {
                            properties.insert(name.clone(), property.clone());
                        }
                    }
                }
            }
        }
    }
    
    /// <api-method>
    ///   <name>is_assignable</name>
    ///   <purpose>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–∏–ø–æ–≤ –¥–ª—è –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è</purpose>
    ///   <parameters>
    ///     <param name="from_type" type="&str">–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–∏–ø</param>
    ///     <param name="to_type" type="&str">–¶–µ–ª–µ–≤–æ–π —Ç–∏–ø</param>
    ///   </parameters>
    ///   <returns>bool - true –µ—Å–ª–∏ from_type –º–æ–∂–Ω–æ –ø—Ä–∏—Å–≤–æ–∏—Ç—å to_type</returns>
    ///   <algorithm>
    ///     <step>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ç–∏–ø–æ–≤</step>
    ///     <step>–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –≥—Ä–∞—Ñ —Ç–∏–ø–æ–≤</step>
    ///     <step>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ (implements)</step>
    ///   </algorithm>
    ///   <examples>
    ///     <example lang="rust">
    ///       // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
    ///       let ok = index.is_assignable("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏.–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞", "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–°—Å—ã–ª–∫–∞");
    ///       assert!(ok); // true - —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–°—Å—ã–ª–∫–∞
    ///       
    ///       // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö —Ç–∏–ø–æ–≤
    ///       let ok = index.is_assignable("–ß–∏—Å–ª–æ", "–°—Ç—Ä–æ–∫–∞");
    ///       assert!(!ok); // false - —Ç–∏–ø—ã –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã
    ///     </example>
    ///   </examples>
    /// </api-method>
    pub fn is_assignable(&self, from_type: &str, to_type: &str) -> bool {
        if from_type == to_type {
            return true;
        }
        
        let from_entity = match self.find_entity(from_type) {
            Some(e) => e,
            None => return false,
        };
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
        if from_entity.constraints.parent_types.contains(&to_type.to_string()) {
            return true;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
        if from_entity.constraints.implements.contains(&to_type.to_string()) {
            return true;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∏—Ç–∏–≤–Ω–æ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –≥—Ä–∞—Ñ
        if let (Some(&from_node), Some(to_entity)) = (
            self.inheritance_node_map.get(&from_entity.id),
            self.find_entity(to_type)
        ) {
            if let Some(&to_node) = self.inheritance_node_map.get(&to_entity.id) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º BFS –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏
                use petgraph::algo::has_path_connecting;
                return has_path_connecting(&self.inheritance_graph, to_node, from_node, None);
            }
        }
        
        false
    }
    
    pub fn get_entity_count(&self) -> usize {
        self.entities.len()
    }
    
    pub fn get_entities_by_type(&self, entity_type: &BslEntityType) -> Vec<&BslEntity> {
        self.by_type.get(entity_type)
            .map(|ids| {
                ids.iter()
                    .filter_map(|id| self.entities.get(id))
                    .collect()
            })
            .unwrap_or_default()
    }
    
    pub fn get_entities_by_kind(&self, entity_kind: &BslEntityKind) -> Vec<&BslEntity> {
        self.by_kind.get(entity_kind)
            .map(|ids| {
                ids.iter()
                    .filter_map(|id| self.entities.get(id))
                    .collect()
            })
            .unwrap_or_default()
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è ProjectIndexCache
    pub fn get_all_entities(&self) -> Vec<&BslEntity> {
        self.entities.values().collect()
    }
    
    pub fn get_by_name_index(&self) -> &HashMap<String, BslEntityId> {
        &self.by_name
    }
    
    pub fn get_by_qualified_name_index(&self) -> &HashMap<String, BslEntityId> {
        &self.by_qualified_name
    }
    
    /// –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ—Ö–æ–∂–∏–µ –∏–º–µ–Ω–∞ –¥–ª—è –Ω–µ—Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    pub fn suggest_similar_names(&self, search_term: &str) -> Vec<String> {
        let search_lower = search_term.to_lowercase();
        let mut suggestions = Vec::new();
        
        // –ò—â–µ–º —Å—Ä–µ–¥–∏ display_name
        for name in self.by_name.keys() {
            if name.to_lowercase().contains(&search_lower) {
                suggestions.push(name.clone());
            }
        }
        
        // –ò—â–µ–º —Å—Ä–µ–¥–∏ qualified_name
        for name in self.by_qualified_name.keys() {
            if name.to_lowercase().contains(&search_lower) && !suggestions.contains(name) {
                suggestions.push(name.clone());
            }
        }
        
        // –ò—â–µ–º —Å—Ä–µ–¥–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∏–º–µ–Ω
        for name in self.alternative_names.keys() {
            if name.to_lowercase().contains(&search_lower) {
                // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –∏–∑ entity
                if let Some(entity_id) = self.alternative_names.get(name) {
                    if let Some(entity) = self.entities.get(entity_id) {
                        let full_name = &entity.display_name;
                        if !suggestions.contains(full_name) {
                            suggestions.push(full_name.clone());
                        }
                    }
                }
            }
        }
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        suggestions.sort();
        suggestions.truncate(10);
        suggestions
    }
    
    /// –û–û–ü-–ø–æ–¥—Ö–æ–¥: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å–ª–µ–¥—É–µ—Ç –º–µ—Ç–æ–¥—ã –æ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    fn inherit_manager_methods(&self, mut entity: BslEntity) -> Result<BslEntity> {
        println!("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–ª—è: {} (–≤–∏–¥: {:?})", entity.qualified_name, entity.entity_kind);
        
        // –ú–∞–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ –∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä—ã (—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ qualified_name)
        let manager_mappings = [
            (BslEntityKind::Catalog, "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–ú–µ–Ω–µ–¥–∂–µ—Ä.<–ò–º—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞> (CatalogManager.<Catalog name>)"),
            (BslEntityKind::Document, "–î–æ–∫—É–º–µ–Ω—Ç–ú–µ–Ω–µ–¥–∂–µ—Ä.<–ò–º—è –¥–æ–∫—É–º–µ–Ω—Ç–∞> (DocumentManager.<Document name>)"),
            (BslEntityKind::InformationRegister, "–†–µ–≥–∏—Å—Ç—Ä–°–≤–µ–¥–µ–Ω–∏–π–ú–µ–Ω–µ–¥–∂–µ—Ä.<–ò–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞ —Å–≤–µ–¥–µ–Ω–∏–π> (InformationRegisterManager.<Information register name>)"),
            (BslEntityKind::AccumulationRegister, "–†–µ–≥–∏—Å—Ç—Ä–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è–ú–µ–Ω–µ–¥–∂–µ—Ä.<–ò–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è> (AccumulationRegisterManager.<Accumulation register name>)"),
            (BslEntityKind::DataProcessor, "–û–±—Ä–∞–±–æ—Ç–∫–∞–ú–µ–Ω–µ–¥–∂–µ—Ä.<–ò–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏> (DataProcessorManager.<Data processor name>)"),
            (BslEntityKind::Report, "–û—Ç—á–µ—Ç–ú–µ–Ω–µ–¥–∂–µ—Ä.<–ò–º—è –æ—Ç—á–µ—Ç–∞> (ReportManager.<Report name>)"),
        ];
        
        // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        for (kind, manager_template) in &manager_mappings {
            if entity.entity_kind == *kind {
                println!("  ‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–∏–ø–∞: {:?} ‚Üí –∏—â–µ–º —à–∞–±–ª–æ–Ω {}", kind, manager_template);
                
                // –ò—â–µ–º —à–∞–±–ª–æ–Ω–Ω—ã–π —Ç–∏–ø –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã—Ö —Ç–∏–ø–∞—Ö
                if let Some(manager_entity) = self.entities.values()
                    .find(|e| e.qualified_name == *manager_template && e.entity_type == BslEntityType::Platform) {
                    
                    println!("üîÑ –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤: {} ‚Üê {}", entity.qualified_name, manager_template);
                    
                    // –ö–æ–ø–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                    for (method_name, method) in &manager_entity.interface.methods {
                        if !entity.interface.methods.contains_key(method_name) {
                            entity.interface.methods.insert(method_name.clone(), method.clone());
                            println!("  ‚úÖ –£–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω –º–µ—Ç–æ–¥: {}", method_name);
                        }
                    }
                    
                    // –ö–æ–ø–∏—Ä—É–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                    for (prop_name, prop) in &manager_entity.interface.properties {
                        if !entity.interface.properties.contains_key(prop_name) {
                            entity.interface.properties.insert(prop_name.clone(), prop.clone());
                            println!("  ‚úÖ –£–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ: {}", prop_name);
                        }
                    }
                    
                    break; // –ù–∞–π–¥–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä
                } else {
                    println!("  ‚ùå –®–∞–±–ª–æ–Ω–Ω—ã–π —Ç–∏–ø {} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ {} –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤", 
                        manager_template, 
                        self.entities.values().filter(|e| e.entity_type == BslEntityType::Platform).count());
                    
                    // –û—Ç–ª–∞–¥–∫–∞: –∏—â–µ–º —Ç–æ—á–Ω—ã–π qualified_name
                    let exact_template = "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–ú–µ–Ω–µ–¥–∂–µ—Ä.<–ò–º—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞>";
                    if let Some(catalog_manager) = self.entities.values()
                        .find(|e| e.entity_type == BslEntityType::Platform && 
                                 e.qualified_name == exact_template) {
                        println!("    ‚úÖ –¢–û–ß–ù–û–ï —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ!");
                        println!("       qualified_name: '{}'", catalog_manager.qualified_name);
                        println!("       –º–µ—Ç–æ–¥—ã: {}", catalog_manager.interface.methods.len());
                    } else {
                        // –ü–æ–∫–∞–∂–µ–º –≤—Å–µ —Ç–∏–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–ú–µ–Ω–µ–¥–∂–µ—Ä.<–ò–º—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞>"
                        let related: Vec<_> = self.entities.values()
                            .filter(|e| e.entity_type == BslEntityType::Platform && 
                                       e.qualified_name.starts_with("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–ú–µ–Ω–µ–¥–∂–µ—Ä.<–ò–º—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞>"))
                            .map(|e| &e.qualified_name)
                            .take(5)
                            .collect();
                        println!("    ‚ùå –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ù–ï –Ω–∞–π–¥–µ–Ω–æ");
                        println!("    üìã –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã: {:?}", related);
                    }
                }
            }
        }
        
        Ok(entity)
    }
}