#!/usr/bin/env node

const readline = require('readline');
const { execSync, spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
    reset: '\x1b[0m',
    bright: '\x1b[1m',
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m',
    gray: '\x1b[90m'
};

function c(color, text) {
    return `${colors[color] || ''}${text}${colors.reset}`;
}

class SimpleInteractiveDev {
    constructor() {
        // –û–¥–∏–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π readline –Ω–∞ –≤–µ—Å—å —Å–∫—Ä–∏–ø—Ç
        this.rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
        this.currentProcess = null;
    }

    // –ü—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
    async ask(question) {
        return new Promise(resolve => {
            this.rl.question(question, resolve);
        });
    }

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º (–±–µ–∑ –ø–∞—É–∑—ã)
    async runCommand(command, description = '') {
        console.log(c('cyan', `\nüîß ${description || command}`));
        console.log('='.repeat(50));
        
        try {
            const startTime = Date.now();
            execSync(command, { 
                cwd: process.cwd(),
                stdio: 'inherit',
                encoding: 'utf8'
            });
            const duration = ((Date.now() - startTime) / 1000).toFixed(1);
            console.log('='.repeat(50));
            console.log(c('green', `‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞ ${duration}s`));
        } catch (error) {
            console.log('='.repeat(50));
            console.log(c('red', `‚ùå –û—à–∏–±–∫–∞: ${error.message}`));
        }
    }
    
    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –ø–∞—É–∑–æ–π (–¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥)
    async runCommandWithPause(command, description = '') {
        await this.runCommand(command, description);
        await this.pause();
    }

    // –ü–∞—É–∑–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    async pause() {
        console.log(c('gray', '\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...'));
        await this.ask('');
    }

    // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    showMainMenu() {
        console.clear();
        console.log(c('bright', 'üöÄ BSL Type Safety Analyzer - Interactive Dev Console v1.6.0'));
        console.log('');
        console.log(c('cyan', 'üì¶ –°–ë–û–†–ö–ê:'));
        console.log('  1) –ë—ã—Å—Ç—Ä–∞—è dev —Å–±–æ—Ä–∫–∞');
        console.log('  2) Smart —Å–±–æ—Ä–∫–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º');
        console.log('  3) Release —Å–±–æ—Ä–∫–∞ (–ø–æ–ª–Ω–∞—è)');
        console.log('  4) Watch —Ä–µ–∂–∏–º (—Ñ–∞–π–ª–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)');
        console.log('  5) –û—á–∏—Å—Ç–∫–∞ –∏ –ø–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞');
        console.log('');
        console.log(c('yellow', 'üîß –†–ê–ó–†–ê–ë–û–¢–ö–ê:'));
        console.log('  6) –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã');
        console.log('  7) –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ (clippy)');
        console.log('  8) –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥');
        console.log('');
        console.log(c('magenta', 'üìã GIT –û–ü–ï–†–ê–¶–ò–ò:'));
        console.log('  9) Git —Å—Ç–∞—Ç—É—Å');
        console.log(' 10) –£–º–Ω—ã–π –∫–æ–º–º–∏—Ç');
        console.log(' 11) –ö–æ–º–º–∏—Ç –∏ –ø—É—à');
        console.log('');
        console.log(c('green', 'üöÄ –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø:'));
        console.log(' 12) –°–æ–±—Ä–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ');
        console.log(' 13) –í–µ—Ä—Å–∏—è patch (x.x.X)');
        console.log(' 14) –í–µ—Ä—Å–∏—è minor (x.X.x)');
        console.log(' 15) –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ');
        console.log('');
        console.log(c('red', '  0) –í—ã—Ö–æ–¥'));
        console.log('');
    }

    // –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
    async run() {
        console.log(c('bright', 'üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Å–æ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...'));
        
        while (true) {
            this.showMainMenu();
            
            const choice = await this.ask(c('bright', '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-15): '));
            
            switch (choice.trim()) {
                case '1':
                    await this.runCommandWithPause('npm run dev', '–ë—ã—Å—Ç—Ä–∞—è dev —Å–±–æ—Ä–∫–∞');
                    break;
                    
                case '2':
                    await this.runCommandWithPause('npm run build:smart', 'Smart —Å–±–æ—Ä–∫–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º');
                    break;
                    
                case '3':
                    await this.runCommandWithPause('npm run build:release', 'Release —Å–±–æ—Ä–∫–∞ (–ø–æ–ª–Ω–∞—è)');
                    break;
                    
                case '4':
                    await this.startWatchMode();
                    break;
                    
                case '5':
                    await this.cleanAndRebuild();
                    break;
                    
                case '6':
                    await this.runCommandWithPause('cargo test', '–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤');
                    break;
                    
                case '7':
                    await this.runCommandWithPause('cargo clippy', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞');
                    break;
                    
                case '8':
                    await this.runCommandWithPause('cargo fmt', '–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞');
                    break;
                    
                case '9':
                    await this.runCommandWithPause('git status', 'Git —Å—Ç–∞—Ç—É—Å');
                    break;
                    
                case '10':
                    await this.smartCommit();
                    break;
                    
                case '11':
                    await this.commitAndPush();
                    break;
                    
                case '12':
                    await this.runCommandWithPause('npm run rebuild:extension', '–°–±–æ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è');
                    break;
                    
                case '13':
                    await this.runCommandWithPause('npm run version:patch', '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ patch –≤–µ—Ä—Å–∏–∏');
                    break;
                    
                case '14':
                    await this.runCommandWithPause('npm run version:minor', '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ minor –≤–µ—Ä—Å–∏–∏');
                    break;
                    
                case '15':
                    await this.showProjectInfo();
                    break;
                    
                case '0':
                case 'exit':
                case 'quit':
                    await this.exit();
                    return;
                    
                default:
                    console.log(c('red', '\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'));
                    await this.pause();
                    break;
            }
        }
    }

    // Watch —Ä–µ–∂–∏–º
    async startWatchMode() {
        console.log(c('cyan', '\nüëÅÔ∏è  –ó–∞–ø—É—Å–∫ Watch —Ä–µ–∂–∏–º–∞...'));
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ chokidar
        try {
            require('chokidar');
        } catch (error) {
            console.log(c('yellow', '‚ö†Ô∏è  –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å chokidar –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'));
            console.log(c('cyan', 'üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ chokidar...'));
            
            await this.runCommand('npm install --save-dev chokidar', '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ chokidar');
            console.log(c('green', '‚úÖ chokidar —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'));
        }
        
        console.log(c('green', '‚úÖ –ó–∞–ø—É—Å–∫ watch —Ä–µ–∂–∏–º–∞...'));
        console.log(c('gray', '–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏'));
        
        const child = spawn('npm', ['run', 'watch'], {
            stdio: 'inherit',
            shell: true
        });
        
        this.currentProcess = child;
        
        child.on('close', (code) => {
            this.currentProcess = null;
            console.log(c('yellow', '\nüëÅÔ∏è  Watch —Ä–µ–∂–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'));
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
        });
    }

    // –û—á–∏—Å—Ç–∫–∞ –∏ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞
    async cleanAndRebuild() {
        console.log(c('yellow', '\nüßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞...'));
        console.log(c('gray', '–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...\n'));
        
        await this.runCommand('cargo clean', '–û—á–∏—Å—Ç–∫–∞ Cargo');
        await this.runCommand('npm run cleanup:project', '–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞');
        await this.runCommandWithPause('npm run build:release', '–ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞');
    }

    // –£–º–Ω—ã–π –∫–æ–º–º–∏—Ç
    async smartCommit() {
        console.log(c('magenta', '\nüìù –£–º–Ω—ã–π –∫–æ–º–º–∏—Ç...'));
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
        try {
            execSync('git status --porcelain', { stdio: 'inherit' });
        } catch (error) {
            console.log(c('red', '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ git'));
            await this.pause();
            return;
        }
        
        const message = await this.ask('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞: ');
        
        if (!message.trim()) {
            console.log(c('red', '‚ùå –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞'));
            await this.pause();
            return;
        }
        
        await this.runCommand('git add .', '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤');
        await this.runCommandWithPause(`git commit -m "${message}"`, '–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞');
    }

    // –ö–æ–º–º–∏—Ç –∏ –ø—É—à
    async commitAndPush() {
        console.log(c('magenta', '\nüìù –ö–æ–º–º–∏—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...'));
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
        try {
            execSync('git status --porcelain', { stdio: 'inherit' });
        } catch (error) {
            console.log(c('red', '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ git'));
            await this.pause();
            return;
        }
        
        const message = await this.ask('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞: ');
        
        if (!message.trim()) {
            console.log(c('red', '‚ùå –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞'));
            await this.pause();
            return;
        }
        
        await this.runCommand('git add .', '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤');
        await this.runCommand(`git commit -m "${message}"`, '–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞');
        await this.runCommandWithPause('git push', '–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π');
    }

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
    async showProjectInfo() {
        console.log(c('cyan', '\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ:'));
        
        try {
            const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            console.log(c('bright', `\nüì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: ${packageJson.name}`));
            console.log(c('bright', `üî¢ –í–µ—Ä—Å–∏—è: ${packageJson.version}`));
            console.log(c('bright', `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${packageJson.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`));
            
            // Cargo.toml
            if (fs.existsSync('Cargo.toml')) {
                const cargoToml = fs.readFileSync('Cargo.toml', 'utf8');
                const versionMatch = cargoToml.match(/version\s*=\s*"([^"]+)"/);
                if (versionMatch) {
                    console.log(c('bright', `ü¶Ä Cargo –≤–µ—Ä—Å–∏—è: ${versionMatch[1]}`));
                }
            }
            
            // Git –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            try {
                const branch = execSync('git branch --show-current', { encoding: 'utf8' }).trim();
                const commits = execSync('git rev-list --count HEAD', { encoding: 'utf8' }).trim();
                console.log(c('bright', `üåø –í–µ—Ç–∫–∞: ${branch}`));
                console.log(c('bright', `üìä –ö–æ–º–º–∏—Ç–æ–≤: ${commits}`));
            } catch (error) {
                console.log(c('gray', 'üìä Git –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'));
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ chokidar
            try {
                require('chokidar');
                console.log(c('green', 'üëÅÔ∏è  Watch –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'));
            } catch (error) {
                console.log(c('red', 'üëÅÔ∏è  Watch –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'));
            }
            
        } catch (error) {
            console.log(c('red', `‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: ${error.message}`));
        }
        
        await this.pause();
    }

    // –í—ã—Ö–æ–¥
    async exit() {
        console.log(c('yellow', '\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...'));
        this.cleanup();
        process.exit(0);
    }

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    cleanup() {
        if (this.currentProcess) {
            this.currentProcess.kill();
        }
        if (this.rl) {
            this.rl.close();
        }
    }
}

// –ó–∞–ø—É—Å–∫
const app = new SimpleInteractiveDev();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
process.on('SIGINT', () => {
    console.log(c('yellow', '\n\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...'));
    app.cleanup();
    process.exit(0);
});

process.on('SIGTERM', () => {
    app.cleanup();
    process.exit(0);
});

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.run().catch(error => {
    console.error(c('red', `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`));
    app.cleanup();
    process.exit(1);
});