#!/usr/bin/env node

/**
 * Wrapper –¥–ª—è cargo –∫–æ–º–∞–Ω–¥ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º CARGO_BUILD_JOBS
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/cargo-wrapper.js [cargo-args]
 */

const { execSync } = require('child_process');
const os = require('os');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
function getCpuCount() {
    const cpus = os.cpus().length;
    console.log(`üîß Detected ${cpus} CPU cores`);
    return cpus;
}

// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è cargo
const args = process.argv.slice(2);

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CARGO_BUILD_JOBS
const cpuCount = getCpuCount();
process.env.CARGO_BUILD_JOBS = cpuCount;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ --jobs –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö, –µ—Å–ª–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º
const hasJobsFlag = args.some(arg => arg.startsWith('--jobs') || arg === '-j');
if (!hasJobsFlag && args.includes('build')) {
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ --jobs –ø–æ—Å–ª–µ build
    const buildIndex = args.indexOf('build');
    args.splice(buildIndex + 1, 0, '--jobs', String(cpuCount));
}

// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
const command = `cargo ${args.join(' ')}`;
console.log(`üöÄ Running: ${command}`);
console.log(`üìä CARGO_BUILD_JOBS=${cpuCount}`);

try {
    execSync(command, { 
        stdio: 'inherit',
        env: {
            ...process.env,
            CARGO_BUILD_JOBS: String(cpuCount)
        }
    });
} catch (error) {
    console.error('‚ùå Cargo command failed');
    process.exit(1);
}