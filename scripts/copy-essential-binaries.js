#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–∏–Ω–∞—Ä–Ω–∏–∫–æ–≤ –≤ VSCode —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
 * –ò—Å–∫–ª—é—á–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ .vsix –ø–∞–∫–µ—Ç–∞
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üì¶ BSL Analyzer - Essential Binaries Copy Tool');
console.log('='.repeat(60));

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å–±–æ—Ä–∫–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
const buildProfile = process.argv[2] || 'dev-fast';
console.log(`üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ—Ñ–∏–ª—å: ${buildProfile}`);

// –°–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–∏–Ω–∞—Ä–Ω–∏–∫–æ–≤ –¥–ª—è VSCode —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–±–µ–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏ debug –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤)
const ESSENTIAL_BINARIES = [
    // –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    'bsl-analyzer.exe',           // –ì–ª–∞–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    'lsp_server.exe',             // LSP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º
    'syntaxcheck.exe',            // –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä

    // –°–∏—Å—Ç–µ–º–∞ —Ç–∏–ø–æ–≤
    'build_unified_index.exe',    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Ç–∏–ø–æ–≤
    'query_type.exe',             // –ü–æ–∏—Å–∫ —Ç–∏–ø–æ–≤
    'check_type_compatibility.exe', // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–∏–ø–æ–≤

    // –†–∞–±–æ—Ç–∞ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    'extract_platform_docs.exe',  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    'extract_hybrid_docs.exe',    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    'incremental_update.exe',     // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

    // MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è LLM
    'bsl-mcp-server.exe'          // MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Claude/GPT
];

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
const sourceDir = `target/${buildProfile}`;
const targetDir = 'vscode-extension/bin';

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–±–µ–∑ –∞–≤—Ç–æ-—Å–±–æ—Ä–æ–∫ –∏–ª–∏ fallback)
if (!fs.existsSync(sourceDir)) {
    console.error(`‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–±–æ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${sourceDir}`);
    console.log('üí° –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–±–æ—Ä–∫—É —è–≤–Ω–æ: npm run build:rust' +
        (buildProfile === 'release' ? ':release' : buildProfile === 'dev-fast' ? '' : ':dev'));
    process.exit(1);
}

// –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (!fs.existsSync(targetDir)) {
    fs.mkdirSync(targetDir, { recursive: true });
    console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${targetDir}`);
}

// –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±–∏–Ω–∞—Ä–Ω–∏–∫–æ–≤...');
try {
    const oldFiles = fs.readdirSync(targetDir)
        .filter(file => file.endsWith('.exe') || file.endsWith('.pdb'));

    for (const file of oldFiles) {
        fs.unlinkSync(path.join(targetDir, file));
    }
    console.log(`   –£–¥–∞–ª–µ–Ω–æ ${oldFiles.length} —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤`);
} catch (error) {
    console.log('   (–°—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)');
}

// –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –±–∏–Ω–∞—Ä–Ω–∏–∫–∏
console.log('üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–∏–Ω–∞—Ä–Ω–∏–∫–æ–≤:');
let copiedCount = 0;
let totalSize = 0;

for (const binary of ESSENTIAL_BINARIES) {
    const sourcePath = path.join(sourceDir, binary);
    const targetPath = path.join(targetDir, binary);

    if (fs.existsSync(sourcePath)) {
        try {
            fs.copyFileSync(sourcePath, targetPath);
            const stats = fs.statSync(sourcePath);
            const sizeMB = (stats.size / (1024 * 1024)).toFixed(1);
            totalSize += stats.size;

            console.log(`   ‚úÖ ${binary} (${sizeMB} MB)`);
            copiedCount++;
        } catch (error) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ${binary}: ${error.message}`);
        }
    } else {
        console.log(`   ‚ö†Ô∏è  ${binary} - –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
}

// –ö–æ–ø–∏—Ä—É–µ–º README –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
const readmePath = path.join(targetDir, 'README.md');
if (!fs.existsSync(readmePath)) {
    const readmeContent = `# BSL Analyzer Binaries

This directory contains essential binaries for BSL Analyzer VSCode extension.

## Included tools:

- **bsl-analyzer.exe** - Main static analyzer
- **lsp_server.exe** - Language Server Protocol implementation  
- **syntaxcheck.exe** - Syntax validator
- **build_unified_index.exe** - Type system index builder
- **query_type.exe** - Type information queries
- **check_type_compatibility.exe** - Type compatibility checker
- **extract_platform_docs.exe** - Platform documentation extractor
- **extract_hybrid_docs.exe** - Hybrid documentation processor
- **incremental_update.exe** - Incremental analysis updates
- **bsl-mcp-server.exe** - MCP server for LLM integration

Total size optimized from 155+ MB to ~${(totalSize / (1024 * 1024)).toFixed(1)} MB by excluding test and debug binaries.
`;

    fs.writeFileSync(readmePath, readmeContent);
    console.log('   üìù README.md —Å–æ–∑–¥–∞–Ω');
}

// –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
const finalSizeMB = (totalSize / (1024 * 1024)).toFixed(1);
console.log('='.repeat(60));
console.log(`üéâ –ì–û–¢–û–í–û: –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ ${copiedCount}/${ESSENTIAL_BINARIES.length} –±–∏–Ω–∞—Ä–Ω–∏–∫–æ–≤`);
console.log(`üìä –†–∞–∑–º–µ—Ä: ${finalSizeMB} MB (–≤–º–µ—Å—Ç–æ 155+ MB)`);
console.log(`üöÄ –≠–∫–æ–Ω–æ–º–∏—è: ~${(155 - finalSizeMB).toFixed(1)} MB`);
console.log(`üìÅ –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${targetDir}`);
console.log('');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
const criticalMissing = ESSENTIAL_BINARIES.filter(binary =>
    !fs.existsSync(path.join(targetDir, binary))
);

if (criticalMissing.length > 0) {
    console.log('‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –±–∏–Ω–∞—Ä–Ω–∏–∫–∏:');
    criticalMissing.forEach(binary => console.log(`   - ${binary}`));
    console.log('üí° –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–∞ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ Cargo.toml');
} else {
    console.log('‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞ –º–µ—Å—Ç–µ');
}