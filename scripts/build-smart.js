#!/usr/bin/env node

const { execSync, spawn } = require('child_process');
const fs = require('fs');
const path = require('path');
const crypto = require('crypto');
const os = require('os');

console.log('üß† Smart Build System v2.0');
console.log('='.repeat(50));

// –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ CPU
const CPU_COUNT = os.cpus().length;
console.log(`üñ•Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤: ${CPU_COUNT}`);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CACHE_DIR = '.build-cache';
const RUST_SRC_DIRS = ['src', 'Cargo.toml', 'Cargo.lock'];
const TS_SRC_DIRS = ['vscode-extension/src', 'vscode-extension/package.json', 'vscode-extension/tsconfig.json'];

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–µ—à–∞
if (!fs.existsSync(CACHE_DIR)) {
    fs.mkdirSync(CACHE_DIR, { recursive: true });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–µ—à–∞ —Ñ–∞–π–ª–æ–≤
function getDirectoryHash(directories) {
    const hash = crypto.createHash('md5');
    
    for (const dir of directories) {
        if (fs.existsSync(dir)) {
            if (fs.statSync(dir).isFile()) {
                const content = fs.readFileSync(dir);
                hash.update(content);
            } else {
                // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                const files = getAllFiles(dir);
                for (const file of files) {
                    const stat = fs.statSync(file);
                    hash.update(`${file}:${stat.mtime.toISOString()}`);
                }
            }
        }
    }
    
    return hash.digest('hex');
}

function getAllFiles(dir, fileList = []) {
    const files = fs.readdirSync(dir);
    
    for (const file of files) {
        const filePath = path.join(dir, file);
        const stat = fs.statSync(filePath);
        
        if (stat.isDirectory()) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            if (!['target', 'node_modules', '.git', '.build-cache'].includes(file)) {
                getAllFiles(filePath, fileList);
            }
        } else {
            fileList.push(filePath);
        }
    }
    
    return fileList;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏
function needsRebuild(component, srcDirs) {
    const cacheFile = path.join(CACHE_DIR, `${component}.hash`);
    const currentHash = getDirectoryHash(srcDirs);
    
    if (!fs.existsSync(cacheFile)) {
        console.log(`üìù ${component}: –ü–µ—Ä–≤–∏—á–Ω–∞—è —Å–±–æ—Ä–∫–∞`);
        return { rebuild: true, hash: currentHash };
    }
    
    const cachedHash = fs.readFileSync(cacheFile, 'utf8');
    const rebuild = cachedHash !== currentHash;
    
    if (rebuild) {
        console.log(`üîÑ ${component}: –ò—Å—Ö–æ–¥–Ω–∏–∫–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å`);
    } else {
        console.log(`‚úÖ ${component}: –ö–µ—à –∞–∫—Ç—É–∞–ª–µ–Ω`);
    }
    
    return { rebuild, hash: currentHash };
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ö–µ—à–∞
function saveHash(component, hash) {
    const cacheFile = path.join(CACHE_DIR, `${component}.hash`);
    fs.writeFileSync(cacheFile, hash);
}

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º –≤—Ä–µ–º–µ–Ω–∏
function runCommand(name, command, options = {}) {
    console.log(`\\nüöÄ ${name}...`);
    const startTime = Date.now();
    
    try {
        execSync(command, { 
            stdio: 'inherit', 
            cwd: process.cwd(),
            shell: true,
            ...options
        });
        const duration = ((Date.now() - startTime) / 1000).toFixed(1);
        console.log(`‚úÖ ${name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ ${duration}s`);
        return true;
    } catch (error) {
        console.error(`‚ùå ${name} –Ω–µ —É–¥–∞–ª–æ—Å—å:`, error.message);
        return false;
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
async function smartBuild() {
    const buildMode = process.argv[2] || 'fast'; // fast, dev, release
    
    console.log(`üìä –†–µ–∂–∏–º —Å–±–æ—Ä–∫–∏: ${buildMode}`);
    console.log(`‚è∞ –ù–∞—á–∞–ª–æ: ${new Date().toLocaleTimeString()}`);
    
    let totalTime = Date.now();
    let operations = 0;
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Rust –∫–æ–¥
    const rustCheck = needsRebuild('rust', RUST_SRC_DIRS);
    if (rustCheck.rebuild) {
        const rustCommand = {
            'dev': `cargo build --jobs ${CPU_COUNT}`,
            'fast': `cargo build --profile dev-fast --jobs ${CPU_COUNT}`,
            'release': `cargo build --profile dev-fast --jobs ${CPU_COUNT}`
        }[buildMode] || `cargo build --profile dev-fast --jobs ${CPU_COUNT}`;
        
        if (runCommand('Rust —Å–±–æ—Ä–∫–∞', rustCommand)) {
            saveHash('rust', rustCheck.hash);
            operations++;
        } else {
            process.exit(1);
        }
    }
    
    // 2. –ö–æ–ø–∏—Ä—É–µ–º –±–∏–Ω–∞—Ä–Ω–∏–∫–∏ (–µ—Å–ª–∏ Rust –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–ª—Å—è –∏–ª–∏ –±–∏–Ω–∞—Ä–Ω–∏–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç)
    const binDir = 'vscode-extension/bin';
    const needsBinariesCopy = rustCheck.rebuild || !fs.existsSync(path.join(binDir, 'bsl-analyzer.exe'));
    
    if (needsBinariesCopy) {
        const profile = {
            'dev': 'debug',
            'fast': 'dev-fast',
            'release': 'dev-fast'
        }[buildMode] || 'dev-fast';
        const copyCmd = `node scripts/copy-essential-binaries.js ${profile}`;
            
        if (runCommand('–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–∏–Ω–∞—Ä–Ω–∏–∫–æ–≤', copyCmd)) {
            operations++;
        }
    } else {
        console.log('‚úÖ –ë–∏–Ω–∞—Ä–Ω–∏–∫–∏: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º TypeScript –∫–æ–¥
    const tsCheck = needsRebuild('typescript', TS_SRC_DIRS);
    if (tsCheck.rebuild) {
        if (runCommand('TypeScript —Å–±–æ—Ä–∫–∞', 'cd vscode-extension && npm run compile')) {
            saveHash('typescript', tsCheck.hash);
            operations++;
        } else {
            process.exit(1);
        }
    }
    
    // 4. –ü–∞–∫–µ—Ç–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å)
    if (rustCheck.rebuild || tsCheck.rebuild) {
        if (runCommand('–ü–∞–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VSCode —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è', 'cd vscode-extension && npx @vscode/vsce package')) {
            operations++;
        }
    } else {
        console.log('‚úÖ –ü–∞–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalDuration = ((Date.now() - totalTime) / 1000).toFixed(1);
    
    console.log('\\n' + '='.repeat(50));
    console.log('üéâ –£–ú–ù–ê–Ø –°–ë–û–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
    console.log('='.repeat(50));
    console.log(`‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalDuration}s`);
    console.log(`üîß –í—ã–ø–æ–ª–Ω–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ${operations}/4`);
    console.log(`üíæ –≠–∫–æ–Ω–æ–º–∏—è –æ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è: ${4 - operations} –æ–ø–µ—Ä–∞—Ü–∏–π`);
    
    if (operations === 0) {
        console.log('üöÄ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã - —Å–±–æ—Ä–∫–∞ –Ω–µ —Ç—Ä–µ–±–æ–≤–∞–ª–∞—Å—å!');
    }
}

// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
const args = process.argv.slice(2);
const componentArg = args.find(arg => arg.startsWith('--component='));
const targetComponent = componentArg ? componentArg.split('=')[1] : null;

// –£–º–Ω–∞—è —Å–±–æ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
async function smartComponentBuild(component) {
    console.log(`üéØ –£–º–Ω–∞—è —Å–±–æ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: ${component}`);
    console.log('='.repeat(50));
    
    const totalTime = Date.now();
    let operations = 0;
    
    switch(component) {
        case 'rust':
            const rustCheck = needsRebuild('rust', RUST_SRC_DIRS);
            if (rustCheck.rebuild) {
                const profile = getProfile();
                const rustCmd = `cargo build --profile ${profile}`;
                if (runCommand('Rust —Å–±–æ—Ä–∫–∞', rustCmd)) {
                    saveHash('rust', rustCheck.hash);
                    operations++;
                }
            } else {
                console.log('‚úÖ Rust: –°–±–æ—Ä–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
            }
            break;
            
        case 'extension':
            const tsCheck = needsRebuild('typescript', TS_SRC_DIRS);
            if (tsCheck.rebuild) {
                if (runCommand('TypeScript —Å–±–æ—Ä–∫–∞', 'cd vscode-extension && npm run compile')) {
                    saveHash('typescript', tsCheck.hash);
                    operations++;
                }
            } else {
                console.log('‚úÖ TypeScript: –°–±–æ—Ä–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
            }
            break;
            
        default:
            console.log(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: ${component}`);
            return;
    }
    
    const duration = ((Date.now() - totalTime) / 1000).toFixed(1);
    console.log(`\nüéÜ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç ${component} –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ ${duration}s`);
    
    if (operations === 0) {
        console.log('üöÄ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∞–∫—Ç—É–∞–ª–µ–Ω - —Å–±–æ—Ä–∫–∞ –Ω–µ —Ç—Ä–µ–±–æ–≤–∞–ª–∞—Å—å!');
    }
}

// –ó–∞–ø—É—Å–∫
if (targetComponent) {
    smartComponentBuild(targetComponent).catch(console.error);
} else {
    smartBuild().catch(console.error);
}