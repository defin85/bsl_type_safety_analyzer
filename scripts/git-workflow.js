#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');

console.log('üîÑ BSL Analyzer Git Workflow Tool');
console.log('='.repeat(50));

// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const command = args[0];
const versionType = args[1] || 'patch';

function runCommand(cmd, description) {
    console.log(`\nüìã ${description}...`);
    try {
        execSync(cmd, { stdio: 'inherit' });
        console.log(`‚úÖ ${description} completed`);
        return true;
    } catch (error) {
        console.error(`‚ùå ${description} failed`);
        return false;
    }
}

function getCurrentVersion() {
    try {
        const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
        return pkg.version;
    } catch (error) {
        return 'unknown';
    }
}

// –†–∞–∑–ª–∏—á–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –ø–æ—Ç–æ–∫–∏
const workflows = {
    // –ü–æ–ª–Ω—ã–π —Ä–µ–ª–∏–∑ —Å –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    'release': async () => {
        console.log(`üöÄ Starting release workflow (${versionType})`);
        
        const oldVersion = getCurrentVersion();
        console.log(`üìä Current version: ${oldVersion}`);
        
        // 1. –í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–±–æ—Ä–∫–∞
        if (!runCommand(`npm run build:${versionType}`, 'Build with version increment')) {
            return false;
        }
        
        const newVersion = getCurrentVersion();
        console.log(`üÜô New version: ${newVersion}`);
        
        // 2. Git –æ–ø–µ—Ä–∞—Ü–∏–∏
        if (!runCommand('git add .', 'Stage all changes')) {
            return false;
        }
        
        if (!runCommand(`git commit -m "build: release version ${newVersion}"`, 'Commit release')) {
            return false;
        }
        
        if (!runCommand(`git tag v${newVersion}`, 'Create version tag')) {
            return false;
        }
        
        console.log('\nüéâ Release workflow completed!');
        console.log(`üì¶ Version: ${oldVersion} ‚Üí ${newVersion}`);
        console.log(`üè∑Ô∏è  Tag: v${newVersion}`);
        console.log(`üìÅ Extension: vscode-extension/dist/bsl-analyzer-${newVersion}.vsix`);
        
        return true;
    },
    
    // –ë—ã—Å—Ç—Ä–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    'dev': async () => {
        console.log('‚ö° Starting development workflow');
        
        if (!runCommand('npm run build:release', 'Build without version increment')) {
            return false;
        }
        
        console.log('\n‚úÖ Development build completed!');
        console.log('üí° Use "npm run git:release" when ready to release');
        
        return true;
    },
    
    // –¢–æ–ª—å–∫–æ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ —Å–±–æ—Ä–∫–∏
    'version': async () => {
        console.log(`üìä Version increment workflow (${versionType})`);
        
        const oldVersion = getCurrentVersion();
        
        if (!runCommand(`npm run version:${versionType}`, 'Version increment')) {
            return false;
        }
        
        const newVersion = getCurrentVersion();
        
        console.log(`\n‚úÖ Version updated: ${oldVersion} ‚Üí ${newVersion}`);
        console.log('üí° Run "npm run build:release" to build with new version');
        
        return true;
    },
    
    // Commit —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ç–∏–ø–∞ –≤–µ—Ä—Å–∏–∏
    'commit': async () => {
        const message = args[1] || 'update: changes';
        console.log(`üìù Smart commit workflow: "${message}"`);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –≤–µ—Ä—Å–∏–∏
        let autoVersionType = null;
        
        if (message.match(/^(feat|feature):/i)) {
            autoVersionType = 'minor';
        } else if (message.match(/^(fix|bugfix):/i)) {
            autoVersionType = 'patch';
        } else if (message.match(/^(major|breaking):/i)) {
            autoVersionType = 'major';
        }
        
        if (autoVersionType) {
            console.log(`ü§ñ Auto-detected version type: ${autoVersionType}`);
            
            const oldVersion = getCurrentVersion();
            
            if (!runCommand(`npm run build:${autoVersionType}`, 'Build with auto-version')) {
                return false;
            }
            
            const newVersion = getCurrentVersion();
            
            if (!runCommand('git add .', 'Stage changes')) {
                return false;
            }
            
            if (!runCommand(`git commit -m "${message} (v${newVersion})"`, 'Commit with version')) {
                return false;
            }
            
            console.log(`\nüéâ Smart commit completed: ${oldVersion} ‚Üí ${newVersion}`);
        } else {
            // –û–±—ã—á–Ω—ã–π –∫–æ–º–º–∏—Ç –±–µ–∑ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            if (!runCommand('git add .', 'Stage changes')) {
                return false;
            }
            
            if (!runCommand(`git commit -m "${message}"`, 'Regular commit')) {
                return false;
            }
            
            console.log('\n‚úÖ Regular commit completed');
            console.log('üí° Tip: Use "feat:", "fix:", or "major:" prefixes for auto-versioning');
        }
        
        return true;
    }
};

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
async function main() {
    if (!command || !workflows[command]) {
        console.log('‚ùå Invalid command. Available workflows:');
        console.log('');
        console.log('  release [patch|minor|major]  - Full release with versioning');
        console.log('  dev                          - Development build without versioning');
        console.log('  version [patch|minor|major]  - Version increment only');
        console.log('  commit "message"             - Smart commit with auto-versioning');
        console.log('');
        console.log('Examples:');
        console.log('  npm run git:release minor');
        console.log('  npm run git:dev');
        console.log('  npm run git:commit "feat: add new feature"');
        console.log('  npm run git:version patch');
        process.exit(1);
    }
    
    const success = await workflows[command]();
    process.exit(success ? 0 : 1);
}

main().catch(error => {
    console.error('‚ùå Workflow failed:', error);
    process.exit(1);
});