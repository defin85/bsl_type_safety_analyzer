#!/usr/bin/env node

const { execSync, spawn } = require('child_process');
const readline = require('readline');
const path = require('path');
const fs = require('fs');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
    reset: '\x1b[0m',
    bright: '\x1b[1m',
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m',
    gray: '\x1b[90m'
};

const c = (color, text) => {
    if (!colors[color]) {
        console.warn(`Unknown color: ${color}`);
        return text;
    }
    return `${colors[color]}${text}${colors.reset}`;
};

class InteractiveDev {
    constructor() {
        this.rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
        this.currentProcess = null;
        this.watchMode = false;
    }

    async start() {
        console.clear();
        this.showHeader();
        await this.showMainMenu();
    }

    showHeader() {
        console.log(c('cyan', '‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó'));
        console.log(c('cyan', '‚ïë') + c('bright', '          üöÄ BSL Analyzer - Interactive Dev Tool            ') + c('cyan', '‚ïë'));
        console.log(c('cyan', '‚ïë') + c('yellow', '                      –í–µ—Ä—Å–∏—è 1.6.0                          ') + c('cyan', '‚ïë'));
        console.log(c('cyan', '‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù'));
        console.log();
    }

    async showMainMenu() {
        const projectInfo = this.getProjectInfo();
        
        console.log(c('bright', 'üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞:'));
        console.log(`   –í–µ—Ä—Å–∏—è: ${c('green', projectInfo.version)}`);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${projectInfo.hasChanges ? c('yellow', '–ï—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è') : c('green', '–ß–∏—Å—Ç–æ')}`);
        console.log(`   –ö–µ—à: ${projectInfo.hasCache ? c('green', '–ê–∫—Ç—É–∞–ª–µ–Ω') : c('yellow', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}`);
        console.log();

        console.log(c('bright', 'üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:') + '\n');
        
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ watch-—Ä–µ–∂–∏–º–∞
        const chokidarAvailable = this.checkChokidarDependency();
        const watchDesc = chokidarAvailable 
            ? 'üëÅÔ∏è  Watch —Ä–µ–∂–∏–º (–∞–≤—Ç–æ–ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞)'
            : 'üëÅÔ∏è  Watch —Ä–µ–∂–∏–º ‚ö†Ô∏è  (—Ç—Ä–µ–±—É–µ—Ç chokidar)';
        
        const options = [
            { key: '1', desc: 'üß† –£–º–Ω–∞—è —Å–±–æ—Ä–∫–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)', cmd: 'build:smart', color: 'green' },
            { key: '2', desc: watchDesc, cmd: 'watch', color: chokidarAvailable ? 'blue' : 'yellow' },
            { key: '3', desc: '‚ö° –ë—ã—Å—Ç—Ä–∞—è dev —Å–±–æ—Ä–∫–∞', cmd: 'dev', color: 'cyan' },
            { key: '4', desc: 'üîß –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è —Å–±–æ—Ä–∫–∞', cmd: 'rebuild:extension', color: 'yellow' },
            { key: '5', desc: 'üì¶ Release —Å–±–æ—Ä–∫–∞', cmd: 'build:smart:release', color: 'magenta' },
            { key: '6', desc: 'üßπ –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π', action: 'full-rebuild', color: 'red' },
            '',
            { key: '7', desc: 'üîÑ –í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', submenu: 'version' },
            { key: '8', desc: 'üöÄ Git –æ–ø–µ—Ä–∞—Ü–∏–∏', submenu: 'git' },
            { key: '9', desc: 'üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è', submenu: 'publish' },
            { key: '0', desc: 'üßπ –û—á–∏—Å—Ç–∫–∞ –∏ —É—Ç–∏–ª–∏—Ç—ã', submenu: 'utils' },
            '',
            { key: 's', desc: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', submenu: 'stats' },
            '',
            { key: 'h', desc: '‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º', action: 'help' },
            { key: 'q', desc: '‚ùå –í—ã—Ö–æ–¥', action: 'quit' }
        ];

        options.forEach(option => {
            if (option === '') {
                console.log();
            } else {
                const coloredDesc = option.color ? c(option.color, option.desc) : option.desc;
                console.log(`   ${c('bright', option.key)}. ${coloredDesc}`);
            }
        });

        console.log();
        const choice = await this.prompt(c('bright', '‚û§ –í–∞—à –≤—ã–±–æ—Ä: '));
        await this.handleChoice(choice, options);
    }

    async showVersionMenu() {
        console.clear();
        this.showHeader();
        console.log(c('bright', 'üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏—è–º–∏:') + '\n');
        
        const options = [
            { key: '1', desc: 'üìà Patch –≤–µ—Ä—Å–∏—è (1.6.0 ‚Üí 1.6.1)', cmd: 'version:patch' },
            { key: '2', desc: 'üìä Minor –≤–µ—Ä—Å–∏—è (1.6.0 ‚Üí 1.7.0)', cmd: 'version:minor' },
            { key: '3', desc: 'üöÄ Major –≤–µ—Ä—Å–∏—è (1.6.0 ‚Üí 2.0.0)', cmd: 'version:major' },
            { key: '4', desc: 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–µ—Ä—Å–∏–π', cmd: 'version:sync' },
            '',
            { key: 'b', desc: '‚¨ÖÔ∏è  –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', action: 'back' },
            { key: 'q', desc: '‚ùå –í—ã—Ö–æ–¥', action: 'quit' }
        ];

        options.forEach(option => {
            if (option === '') {
                console.log();
            } else {
                console.log(`   ${c('bright', option.key)}. ${option.desc}`);
            }
        });

        console.log();
        const choice = await this.prompt(c('bright', '‚û§ –í–∞—à –≤—ã–±–æ—Ä: '));
        await this.handleChoice(choice, options);
    }

    async showGitMenu() {
        console.clear();
        this.showHeader();
        console.log(c('bright', 'üöÄ Git –æ–ø–µ—Ä–∞—Ü–∏–∏:') + '\n');
        
        const options = [
            { key: '1', desc: 'üíæ –£–º–Ω—ã–π –∫–æ–º–º–∏—Ç', action: 'smart-commit' },
            { key: '2', desc: 'üöÄ –£–º–Ω—ã–π –∫–æ–º–º–∏—Ç + push', action: 'smart-commit-push' },
            '',
            { key: '3', desc: 'üè∑Ô∏è  –†–µ–ª–∏–∑ patch (–ª–æ–∫–∞–ª—å–Ω–æ)', cmd: 'git:release patch' },
            { key: '4', desc: 'üè∑Ô∏è  –†–µ–ª–∏–∑ minor (–ª–æ–∫–∞–ª—å–Ω–æ)', cmd: 'git:release minor' },
            { key: '5', desc: 'üè∑Ô∏è  –†–µ–ª–∏–∑ major (–ª–æ–∫–∞–ª—å–Ω–æ)', cmd: 'git:release major' },
            '',
            { key: '6', desc: 'üöÄ –†–µ–ª–∏–∑ patch + –ø—É–±–ª–∏–∫–∞—Ü–∏—è', action: 'release-patch-publish' },
            { key: '7', desc: 'üöÄ –†–µ–ª–∏–∑ minor + –ø—É–±–ª–∏–∫–∞—Ü–∏—è', action: 'release-minor-publish' },
            { key: '8', desc: 'üöÄ –†–µ–ª–∏–∑ major + –ø—É–±–ª–∏–∫–∞—Ü–∏—è', action: 'release-major-publish' },
            '',
            { key: '9', desc: 'üîÑ Dev –∫–æ–º–º–∏—Ç', cmd: 'git:dev' },
            { key: '0', desc: 'üì§ Push —Ç–µ–∫—É—â–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π', action: 'git-push' },
            '',
            { key: 'b', desc: '‚¨ÖÔ∏è  –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', action: 'back' },
            { key: 'q', desc: '‚ùå –í—ã—Ö–æ–¥', action: 'quit' }
        ];

        options.forEach(option => {
            if (option === '') {
                console.log();
            } else {
                console.log(`   ${c('bright', option.key)}. ${option.desc}`);
            }
        });

        console.log();
        const choice = await this.prompt(c('bright', '‚û§ –í–∞—à –≤—ã–±–æ—Ä: '));
        await this.handleChoice(choice, options);
    }

    async showPublishMenu() {
        console.clear();
        this.showHeader();
        console.log(c('bright', 'üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è:') + '\n');
        
        const projectInfo = this.getProjectInfo();
        console.log(c('cyan', `üì¶ –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: ${projectInfo.version}`));
        console.log(c('cyan', `üìÅ –°—Ç–∞—Ç—É—Å: ${projectInfo.hasChanges ? '–ï—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–ì–æ—Ç–æ–≤–æ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'}`));
        console.log();
        
        const options = [
            { key: '1', desc: 'üèóÔ∏è  –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (build + package)', action: 'prepare-publish', color: 'green' },
            { key: '2', desc: 'üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ VS Code Marketplace', cmd: 'publish:marketplace', color: 'blue' },
            { key: '3', desc: 'üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞–∫–µ—Ç –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π', cmd: 'publish:check', color: 'yellow' },
            { key: '4', desc: 'üè∑Ô∏è  –°–æ–∑–¥–∞—Ç—å GitHub Release', cmd: 'publish:github', color: 'magenta' },
            '',
            { key: '5', desc: 'üìä –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–∫–µ—Ç–µ', action: 'package-info', color: 'cyan' },
            { key: '6', desc: 'üîë –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ–∫–µ–Ω VS Code Marketplace', action: 'setup-token', color: 'yellow' },
            '',
            { key: 'b', desc: '‚¨ÖÔ∏è  –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', action: 'back' },
            { key: 'q', desc: '‚ùå –í—ã—Ö–æ–¥', action: 'quit' }
        ];

        options.forEach(option => {
            if (option === '') {
                console.log();
            } else {
                const coloredDesc = option.color ? c(option.color, option.desc) : option.desc;
                console.log(`   ${c('bright', option.key)}. ${coloredDesc}`);
            }
        });

        console.log();
        const choice = await this.prompt(c('bright', '‚û§ –í–∞—à –≤—ã–±–æ—Ä: '));
        await this.handleChoice(choice, options);
    }

    async showUtilsMenu() {
        console.clear();
        this.showHeader();
        console.log(c('bright', 'üßπ –£—Ç–∏–ª–∏—Ç—ã –∏ –æ—á–∏—Å—Ç–∫–∞:') + '\n');
        
        const options = [
            { key: '1', desc: 'üóëÔ∏è  –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à —Å–±–æ—Ä–∫–∏', action: 'clear-cache' },
            { key: '2', desc: 'üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç', cmd: 'cleanup:project' },
            { key: '3', desc: 'üí• –ì–ª—É–±–æ–∫–∞—è –æ—á–∏—Å—Ç–∫–∞', cmd: 'deep-cleanup' },
            { key: '4', desc: 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∏–Ω–∞—Ä–Ω–∏–∫–∏', cmd: 'check:binaries' },
            { key: '5', desc: 'üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å watch –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (chokidar)', cmd: 'watch:install' },
            '',
            { key: 'b', desc: '‚¨ÖÔ∏è  –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', action: 'back' },
            { key: 'q', desc: '‚ùå –í—ã—Ö–æ–¥', action: 'quit' }
        ];

        options.forEach(option => {
            if (option === '') {
                console.log();
            } else {
                console.log(`   ${c('bright', option.key)}. ${option.desc}`);
            }
        });

        console.log();
        const choice = await this.prompt(c('bright', '‚û§ –í–∞—à –≤—ã–±–æ—Ä: '));
        await this.handleChoice(choice, options);
    }

    async showStatsMenu() {
        console.clear();
        this.showHeader();
        console.log(c('bright', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:') + '\n');
        
        this.showProjectStats();
        
        const options = [
            { key: '1', desc: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', action: 'refresh-stats' },
            { key: '2', desc: 'üìà –ë–µ–Ω—á–º–∞—Ä–∫ —Å–±–æ—Ä–∫–∏', action: 'benchmark' },
            { key: '3', desc: 'üîç –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤', action: 'size-analysis' },
            { key: '4', desc: 'üóÉÔ∏è  –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–µ—à–∞', action: 'cache-info' },
            '',
            { key: 'b', desc: '‚¨ÖÔ∏è  –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', action: 'back' },
            { key: 'q', desc: '‚ùå –í—ã—Ö–æ–¥', action: 'quit' }
        ];

        options.forEach(option => {
            if (option === '') {
                console.log();
            } else {
                console.log(`   ${c('bright', option.key)}. ${option.desc}`);
            }
        });

        console.log();
        const choice = await this.prompt(c('bright', '‚û§ –í–∞—à –≤—ã–±–æ—Ä: '));
        await this.handleChoice(choice, options);
    }

    async handleChoice(choice, options) {
        const option = options.find(o => o && o.key === choice.toLowerCase());
        
        if (!option) {
            console.log(c('red', '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'));
            await this.sleep(1000);
            return this.showMainMenu();
        }

        if (option.action) {
            await this.handleAction(option.action);
        } else if (option.cmd) {
            await this.runCommand(option.cmd, option.desc);
        } else if (option.submenu) {
            await this.showSubmenu(option.submenu);
        }
    }

    async handleAction(action) {
        switch (action) {
            case 'help':
                await this.showHelp();
                break;
            case 'quit':
                this.cleanup();
                process.exit(0);
                break;
            case 'back':
                await this.showMainMenu();
                break;
            case 'smart-commit':
                await this.smartCommit();
                break;
            case 'clear-cache':
                await this.clearCache();
                break;
            case 'refresh-stats':
                await this.showStatsMenu();
                break;
            case 'benchmark':
                await this.runBenchmark();
                break;
            case 'size-analysis':
                await this.sizeAnalysis();
                break;
            case 'cache-info':
                await this.cacheInfo();
                break;
            case 'full-rebuild':
                await this.fullRebuild();
                break;
            case 'prepare-publish':
                await this.preparePublish();
                break;
            case 'package-info':
                await this.showPackageInfo();
                break;
            case 'setup-token':
                await this.setupMarketplaceToken();
                break;
            case 'smart-commit-push':
                await this.smartCommitPush();
                break;
            case 'release-patch-publish':
                await this.releaseWithPublish('patch');
                break;
            case 'release-minor-publish':
                await this.releaseWithPublish('minor');
                break;
            case 'release-major-publish':
                await this.releaseWithPublish('major');
                break;
            case 'git-push':
                await this.gitPush();
                break;
        }
    }

    async showSubmenu(submenu) {
        switch (submenu) {
            case 'version':
                await this.showVersionMenu();
                break;
            case 'git':
                await this.showGitMenu();
                break;
            case 'publish':
                await this.showPublishMenu();
                break;
            case 'utils':
                await this.showUtilsMenu();
                break;
            case 'stats':
                await this.showStatsMenu();
                break;
        }
    }

    async runCommand(cmd, description) {
        console.log();
        console.log(c('blue', `üöÄ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: ${description || cmd}`));
        console.log(c('gray', `üíª npm run ${cmd}`));
        console.log('='.repeat(60));
        
        const startTime = Date.now();
        
        try {
            if (cmd === 'watch') {
                this.watchMode = true;
                await this.runWatchMode();
                return;
            }

            execSync(`npm run ${cmd}`, { stdio: 'inherit' });
            
            const duration = ((Date.now() - startTime) / 1000).toFixed(1);
            console.log('='.repeat(60));
            console.log(c('green', `‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞ ${duration}s`));
            
        } catch (error) {
            console.log('='.repeat(60));
            console.log(c('red', `‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã`));
        }
        
        await this.prompt(c('bright', '\nüìÑ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...'));
        await this.showMainMenu();
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è chokidar –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    checkChokidarDependency() {
        try {
            require.resolve('chokidar');
            return true;
        } catch (e) {
            return false;
        }
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ chokidar
    async installChokidar() {
        console.log(c('yellow', 'üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å chokidar...'));
        console.log(c('gray', 'üíª npm install --save-dev chokidar'));
        console.log('='.repeat(50));
        
        try {
            execSync('npm install --save-dev chokidar', { stdio: 'inherit' });
            console.log(c('green', '‚úÖ Chokidar —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!'));
            return true;
        } catch (error) {
            console.log(c('red', '‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ chokidar'));
            console.log(c('red', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤—Ä—É—á–Ω—É—é: npm install --save-dev chokidar'));
            return false;
        }
    }

    async runWatchMode() {
        console.log(c('yellow', '\nüëÅÔ∏è  –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ Watch —Ä–µ–∂–∏–º–∞...'));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ chokidar
        if (!this.checkChokidarDependency()) {
            console.log(c('yellow', '‚ö†Ô∏è  –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å chokidar –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'));
            console.log(c('gray', '   Watch —Ä–µ–∂–∏–º —Ç—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ file watcher –±–∏–±–ª–∏–æ—Ç–µ–∫–∏\n'));
            
            const install = await this.prompt(c('bright', 'üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å chokidar –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏? (y/n): '));
            
            if (install.toLowerCase() === 'y' || install.toLowerCase() === 'yes' || install === '') {
                const success = await this.installChokidar();
                if (!success) {
                    await this.prompt(c('bright', '\nüìÑ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...'));
                    await this.showMainMenu();
                    return;
                }
                console.log();
            } else {
                console.log(c('yellow', '\n‚è∏Ô∏è  –û—Ç–º–µ–Ω–µ–Ω–æ. –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n   npm run watch:install'));
                await this.prompt(c('bright', '\nüìÑ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...'));
                await this.showMainMenu();
                return;
            }
        }
        
        console.log(c('green', '‚úÖ Chokidar –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫–∞—é Watch —Ä–µ–∂–∏–º...'));
        console.log(c('gray', '–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n'));
        
        const child = spawn('npm', ['run', 'watch'], {
            stdio: 'inherit',
            shell: true
        });
        
        this.currentProcess = child;
        
        child.on('close', (code) => {
            this.watchMode = false;
            this.currentProcess = null;
            console.log(c('yellow', '\nüëÅÔ∏è  Watch —Ä–µ–∂–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'));
            this.showMainMenu();
        });
    }

    async smartCommit() {
        console.log();
        const message = await this.prompt(c('bright', 'üíæ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞: '));
        
        if (!message.trim()) {
            console.log(c('red', '‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'));
            await this.sleep(1000);
            return this.showGitMenu();
        }

        // –í—ã–∑—ã–≤–∞–µ–º git workflow –Ω–∞–ø—Ä—è–º—É—é —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        try {
            execSync(`npm run git:commit "${message}"`, { stdio: 'inherit' });
            console.log(c('green', '‚úÖ –£–º–Ω—ã–π –∫–æ–º–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ'));
        } catch (error) {
            console.log(c('red', '‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–∞'));
        }
        
        await this.prompt(c('bright', '\nüìÑ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...'));
        await this.showGitMenu();
    }

    async clearCache() {
        console.log();
        console.log(c('yellow', 'üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ —Å–±–æ—Ä–∫–∏...'));
        
        try {
            if (fs.existsSync('.build-cache')) {
                fs.rmSync('.build-cache', { recursive: true, force: true });
                console.log(c('green', '‚úÖ –ö–µ—à –æ—á–∏—â–µ–Ω'));
            } else {
                console.log(c('yellow', '‚ö†Ô∏è  –ö–µ—à —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'));
            }
        } catch (error) {
            console.log(c('red', `‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ${error.message}`));
        }
        
        await this.prompt(c('bright', '\nüìÑ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...'));
        await this.showUtilsMenu();
    }

    getProjectInfo() {
        try {
            const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            const hasCache = fs.existsSync('.build-cache');
            const hasChanges = this.checkGitChanges();
            
            return {
                version: packageJson.version,
                hasCache,
                hasChanges
            };
        } catch (error) {
            return {
                version: 'unknown',
                hasCache: false,
                hasChanges: false
            };
        }
    }

    checkGitChanges() {
        try {
            const result = execSync('git status --porcelain', { encoding: 'utf8' });
            return result.trim().length > 0;
        } catch {
            return false;
        }
    }

    showProjectStats() {
        console.log(c('bright', 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:'));
        
        try {
            // –†–∞–∑–º–µ—Ä target –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            const targetSize = this.getDirSize('target');
            console.log(`   –†–∞–∑–º–µ—Ä target/: ${targetSize}`);
            
            // –†–∞–∑–º–µ—Ä node_modules
            const nodeModulesSize = this.getDirSize('node_modules');
            console.log(`   –†–∞–∑–º–µ—Ä node_modules/: ${nodeModulesSize}`);
            
            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ .rs —Ñ–∞–π–ª–æ–≤
            const rustFiles = this.countFiles('src', '.rs');
            console.log(`   Rust —Ñ–∞–π–ª–æ–≤: ${rustFiles}`);
            
            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ .ts —Ñ–∞–π–ª–æ–≤
            const tsFiles = this.countFiles('vscode-extension/src', '.ts');
            console.log(`   TypeScript —Ñ–∞–π–ª–æ–≤: ${tsFiles}`);
            
            // –†–∞–∑–º–µ—Ä –∫–µ—à–∞
            const cacheSize = fs.existsSync('.build-cache') ? this.getDirSize('.build-cache') : '0 B';
            console.log(`   –†–∞–∑–º–µ—Ä –∫–µ—à–∞: ${cacheSize}`);
            
            // –°—Ç–∞—Ç—É—Å chokidar –¥–ª—è watch-—Ä–µ–∂–∏–º–∞
            const chokidarStatus = this.checkChokidarDependency() 
                ? c('green', '‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
                : c('red', '‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            console.log(`   Watch –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: ${chokidarStatus}`);
            
        } catch (error) {
            console.log(c('yellow', '   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'));
        }
        
        console.log();
    }

    getDirSize(dirPath) {
        if (!fs.existsSync(dirPath)) return '0 B';
        
        try {
            // –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            const stats = this.getDirectoryStats(dirPath);
            const sizeMB = (stats.size / (1024 * 1024)).toFixed(1);
            return `${sizeMB} MB`;
        } catch {
            return 'Unknown';
        }
    }
    
    getProfile() {
        const buildMode = process.argv[3] || 'dev-fast';
        return buildMode === 'release' ? 'dev-fast' : buildMode;
    }
    
    getDirectoryStats(dirPath) {
        let totalSize = 0;
        let fileCount = 0;
        
        const scanDirectory = (dir) => {
            try {
                const items = fs.readdirSync(dir);
                
                for (const item of items) {
                    const itemPath = path.join(dir, item);
                    try {
                        const stats = fs.statSync(itemPath);
                        
                        if (stats.isDirectory()) {
                            scanDirectory(itemPath);
                        } else {
                            totalSize += stats.size;
                            fileCount++;
                        }
                    } catch (e) {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã
                    }
                }
            } catch (e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            }
        };
        
        scanDirectory(dirPath);
        return { size: totalSize, files: fileCount };
    }

    countFiles(dirPath, extension) {
        if (!fs.existsSync(dirPath)) return 0;
        
        let count = 0;
        
        const scanDirectory = (dir) => {
            try {
                const items = fs.readdirSync(dir);
                
                for (const item of items) {
                    const itemPath = path.join(dir, item);
                    try {
                        const stats = fs.statSync(itemPath);
                        
                        if (stats.isDirectory()) {
                            scanDirectory(itemPath);
                        } else if (item.endsWith(extension)) {
                            count++;
                        }
                    } catch (e) {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã
                    }
                }
            } catch (e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            }
        };
        
        scanDirectory(dirPath);
        return count;
    }

    async runBenchmark() {
        console.log();
        console.log(c('blue', 'üìà –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞ —Å–±–æ—Ä–∫–∏...'));
        console.log('='.repeat(60));
        
        const tests = [
            { name: '–£–º–Ω–∞—è —Å–±–æ—Ä–∫–∞ (—Å –∫–µ—à–µ–º)', cmd: 'build:smart' },
            { name: 'Dev —Å–±–æ—Ä–∫–∞', cmd: 'dev' },
            { name: '–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è —Å–±–æ—Ä–∫–∞', cmd: 'rebuild:extension' }
        ];
        
        for (const test of tests) {
            console.log(c('bright', `\nüèÉ –¢–µ—Å—Ç: ${test.name}`));
            const startTime = Date.now();
            
            try {
                execSync(`npm run ${test.cmd}`, { stdio: 'ignore' });
                const duration = ((Date.now() - startTime) / 1000).toFixed(1);
                console.log(c('green', `   ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ ${duration}s`));
            } catch (error) {
                console.log(c('red', `   ‚ùå –û—à–∏–±–∫–∞`));
            }
        }
        
        console.log('='.repeat(60));
        await this.prompt(c('bright', '\nüìÑ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...'));
        await this.showStatsMenu();
    }

    async sizeAnalysis() {
        console.log();
        console.log(c('blue', 'üîç –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤...'));
        
        const paths = [
            'target/release',
            'target/dev-fast',
            'target/debug', 
            'vscode-extension/out',
            'vscode-extension/dist',
            'vscode-extension/bin'
        ];
        
        paths.forEach(p => {
            if (fs.existsSync(p)) {
                const size = this.getDirSize(p);
                console.log(`   ${p}: ${size}`);
            } else {
                console.log(`   ${p}: ${c('gray', '–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')}`);
            }
        });
        
        await this.prompt(c('bright', '\nüìÑ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...'));
        await this.showStatsMenu();
    }

    async cacheInfo() {
        console.log();
        console.log(c('blue', 'üóÉÔ∏è  –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–µ—à–∞:'));
        
        if (fs.existsSync('.build-cache')) {
            const files = fs.readdirSync('.build-cache');
            files.forEach(file => {
                const filePath = path.join('.build-cache', file);
                const stats = fs.statSync(filePath);
                const modified = stats.mtime.toLocaleString();
                console.log(`   ${file}: ${c('green', '—Å—É—â–µ—Å—Ç–≤—É–µ—Ç')} (${modified})`);
            });
        } else {
            console.log(c('yellow', '   ‚ö†Ô∏è  –ö–µ—à –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'));
        }
        
        await this.prompt(c('bright', '\nüìÑ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...'));
        await this.showStatsMenu();
    }

    async fullRebuild() {
        console.clear();
        this.showHeader();
        console.log(c('red', 'üßπ –ü–û–õ–ù–ê–Ø –ü–ï–†–ï–°–ë–û–†–ö–ê –° –û–ß–ò–°–¢–ö–û–ô') + '\n');
        
        console.log(c('yellow', '‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:'));
        console.log('   ‚Ä¢ –£–¥–∞–ª–∏—Ç –í–°–ï –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Å–±–æ—Ä–∫–∏ (target/, node_modules/out/)');
        console.log('   ‚Ä¢ –û—á–∏—Å—Ç–∏—Ç —É–º–Ω—ã–π –∫–µ—à (.build-cache/)');
        console.log('   ‚Ä¢ –ó–∞–π–º—ë—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ (~3-5 –º–∏–Ω—É—Ç)');
        console.log('   ‚Ä¢ –ó–∞–Ω–æ–≤–æ —Å–∫–∞—á–∞–µ—Ç –∏ —Å–∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏');
        console.log();
        
        const confirm = await this.prompt(c('bright', 'ü§î –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª–Ω—É—é –ø–µ—Ä–µ—Å–±–æ—Ä–∫—É? (y/N): '));
        
        if (confirm.toLowerCase() !== 'y' && confirm.toLowerCase() !== 'yes') {
            console.log(c('yellow', '\n‚è∏Ô∏è  –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'));
            await this.prompt(c('bright', '\nüìÑ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...'));
            await this.showMainMenu();
            return;
        }

        console.log();
        console.log(c('blue', 'üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –ø–µ—Ä–µ—Å–±–æ—Ä–∫—É...'));
        console.log('='.repeat(60));
        
        const startTime = Date.now();
        let success = true;

        // –≠—Ç–∞–ø 1: –û—á–∏—Å—Ç–∫–∞ Cargo –∫–µ—à–∞
        console.log(c('blue', '\nüßπ [1/6] –û—á–∏—Å—Ç–∫–∞ Cargo –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤...'));
        try {
            execSync('cargo clean', { stdio: 'inherit' });
            console.log(c('green', '‚úÖ Cargo –∫–µ—à –æ—á–∏—â–µ–Ω'));
        } catch (error) {
            console.log(c('red', '‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Cargo –∫–µ—à–∞'));
            success = false;
        }

        // –≠—Ç–∞–ø 2: –û—á–∏—Å—Ç–∫–∞ —É–º–Ω–æ–≥–æ –∫–µ—à–∞
        console.log(c('blue', '\nüßπ [2/6] –û—á–∏—Å—Ç–∫–∞ —É–º–Ω–æ–≥–æ –∫–µ—à–∞...'));
        try {
            if (fs.existsSync('.build-cache')) {
                fs.rmSync('.build-cache', { recursive: true, force: true });
                console.log(c('green', '‚úÖ –£–º–Ω—ã–π –∫–µ—à –æ—á–∏—â–µ–Ω'));
            } else {
                console.log(c('yellow', '‚ö†Ô∏è  –£–º–Ω—ã–π –∫–µ—à —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'));
            }
        } catch (error) {
            console.log(c('red', '‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —É–º–Ω–æ–≥–æ –∫–µ—à–∞'));
            success = false;
        }

        // –≠—Ç–∞–ø 3: –û—á–∏—Å—Ç–∫–∞ TypeScript –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤  
        console.log(c('blue', '\nüßπ [3/6] –û—á–∏—Å—Ç–∫–∞ TypeScript –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤...'));
        try {
            const pathsToClean = [
                'vscode-extension/out',
                'vscode-extension/dist', 
                'vscode-extension/bin'
            ];
            
            for (const pathToClean of pathsToClean) {
                if (fs.existsSync(pathToClean)) {
                    fs.rmSync(pathToClean, { recursive: true, force: true });
                    console.log(`   ‚úÖ ${pathToClean} –æ—á–∏—â–µ–Ω`);
                }
            }
            
            console.log(c('green', '‚úÖ TypeScript –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –æ—á–∏—â–µ–Ω—ã'));
        } catch (error) {
            console.log(c('red', '‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ TypeScript –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤'));
            success = false;
        }

        // –≠—Ç–∞–ø 4: –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ Rust
        console.log(c('blue', '\nü¶Ä [4/6] –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ Rust —Å –Ω—É–ª—è...'));
        try {
            execSync('cargo build --profile dev-fast --jobs 4', { stdio: 'inherit' });
            console.log(c('green', '‚úÖ Rust –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'));
        } catch (error) {
            console.log(c('red', '‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏ Rust'));
            success = false;
        }

        // –≠—Ç–∞–ø 5: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–Ω–∞—Ä–Ω–∏–∫–æ–≤
        if (success) {
            console.log(c('blue', '\nüìÅ [5/6] –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–∏–Ω–∞—Ä–Ω–∏–∫–æ–≤...'));
            try {
                execSync('node scripts/copy-essential-binaries.js dev-fast', { stdio: 'inherit' });
                console.log(c('green', '‚úÖ –ë–∏–Ω–∞—Ä–Ω–∏–∫–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã'));
            } catch (error) {
                console.log(c('red', '‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–Ω–∞—Ä–Ω–∏–∫–æ–≤'));
                success = false;
            }
        }

        // –≠—Ç–∞–ø 6: –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        if (success) {
            console.log(c('blue', '\nüì¶ [6/6] –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ VSCode —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è...'));
            try {
                execSync('cd vscode-extension && npm run compile', { stdio: 'inherit' });
                console.log(c('green', '‚úÖ VSCode —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω–æ'));
            } catch (error) {
                console.log(c('red', '‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è'));
                success = false;
            }
        }

        // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const totalTime = ((Date.now() - startTime) / 1000).toFixed(1);
        console.log('\n' + '='.repeat(60));
        
        if (success) {
            console.log(c('green', 'üéâ –ü–û–õ–ù–ê–Ø –ü–ï–†–ï–°–ë–û–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!'));
            console.log(c('green', `‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime}s`));
            console.log(c('cyan', 'üí° –¢–µ–ø–µ—Ä—å –≤—Å–µ –∫–µ—à–∏ —Å–≤–µ–∂–∏–µ –∏ –ø—Ä–æ–µ–∫—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω'));
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            try {
                const vsixFiles = fs.readdirSync('vscode-extension').filter(f => f.endsWith('.vsix'));
                if (vsixFiles.length > 0) {
                    const vsixPath = path.join('vscode-extension', vsixFiles[0]);
                    const stats = fs.statSync(vsixPath);
                    const sizeMB = (stats.size / (1024 * 1024)).toFixed(1);
                    console.log(c('cyan', `üì¶ –†–∞–∑–º–µ—Ä –Ω–æ–≤–æ–≥–æ .vsix: ${sizeMB} MB`));
                }
            } catch (e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            }
        } else {
            console.log(c('red', 'üí• –ü–û–õ–ù–ê–Ø –ü–ï–†–ï–°–ë–û–†–ö–ê –ù–ï –£–î–ê–õ–ê–°–¨'));
            console.log(c('red', `‚è±Ô∏è  –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: ${totalTime}s`)); 
            console.log(c('yellow', 'üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É'));
        }
        
        console.log('='.repeat(60));
        await this.prompt(c('bright', '\nüìÑ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...'));
        await this.showMainMenu();
    }

    async preparePublish() {
        console.log();
        console.log(c('blue', 'üèóÔ∏è  –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...'));
        console.log('='.repeat(60));
        
        const startTime = Date.now();
        let success = true;
        
        // –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Git
        console.log(c('blue', '\nüîç [1/4] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Git...'));
        try {
            const hasChanges = this.checkGitChanges();
            if (hasChanges) {
                console.log(c('yellow', '‚ö†Ô∏è  –ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è'));
                const commit = await this.prompt(c('bright', 'üíæ –°–¥–µ–ª–∞—Ç—å –∫–æ–º–º–∏—Ç –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π? (y/N): '));
                
                if (commit.toLowerCase() === 'y' || commit.toLowerCase() === 'yes') {
                    const message = await this.prompt(c('bright', 'üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞: '));
                    if (message.trim()) {
                        execSync(`git add . && git commit -m "${message}"`, { stdio: 'inherit' });
                        console.log(c('green', '‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã'));
                    }
                }
            } else {
                console.log(c('green', '‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —á–∏—Å—Ç'));
            }
        } catch (error) {
            console.log(c('yellow', '‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å Git'));
        }
        
        // –≠—Ç–∞–ø 2: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–µ—Ä—Å–∏–π
        console.log(c('blue', '\nüîÑ [2/4] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–µ—Ä—Å–∏–π...'));
        try {
            execSync('npm run version:sync', { stdio: 'inherit' });
            console.log(c('green', '‚úÖ –í–µ—Ä—Å–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã'));
        } catch (error) {
            console.log(c('red', '‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–µ—Ä—Å–∏–π'));
            success = false;
        }
        
        // –≠—Ç–∞–ø 3: –£–º–Ω–∞—è —Å–±–æ—Ä–∫–∞
        if (success) {
            console.log(c('blue', '\nüß† [3/4] –£–º–Ω–∞—è —Å–±–æ—Ä–∫–∞...'));
            try {
                execSync('npm run build:smart:release', { stdio: 'inherit' });
                console.log(c('green', '‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'));
            } catch (error) {
                console.log(c('red', '‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏'));
                success = false;
            }
        }
        
        // –≠—Ç–∞–ø 4: –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞
        if (success) {
            console.log(c('blue', '\nüì¶ [4/4] –°–æ–∑–¥–∞–Ω–∏–µ .vsix –ø–∞–∫–µ—Ç–∞...'));
            try {
                execSync('cd vscode-extension && npx @vscode/vsce package', { stdio: 'inherit' });
                console.log(c('green', '‚úÖ –ü–∞–∫–µ—Ç —Å–æ–∑–¥–∞–Ω'));
            } catch (error) {
                console.log(c('red', '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞'));
                success = false;
            }
        }
        
        // –†–µ–∑—É–ª—å—Ç–∞—Ç
        const totalTime = ((Date.now() - startTime) / 1000).toFixed(1);
        console.log('\n' + '='.repeat(60));
        
        if (success) {
            console.log(c('green', 'üéâ –ü–û–î–ì–û–¢–û–í–ö–ê –ö –ü–£–ë–õ–ò–ö–ê–¶–ò–ò –ó–ê–í–ï–†–®–ï–ù–ê!'));
            console.log(c('green', `‚è±Ô∏è  –í—Ä–µ–º—è: ${totalTime}s`));
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –ø–∞–∫–µ—Ç–µ
            await this.showPackageInfo();
        } else {
            console.log(c('red', 'üí• –ü–û–î–ì–û–¢–û–í–ö–ê –ù–ï –£–î–ê–õ–ê–°–¨'));
            console.log(c('red', `‚è±Ô∏è  –í—Ä–µ–º—è: ${totalTime}s`));
        }
        
        console.log('='.repeat(60));
        await this.prompt(c('bright', '\nüìÑ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...'));
        await this.showPublishMenu();
    }
    
    async showPackageInfo() {
        console.log('\n' + c('bright', 'üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ—Ç–µ:'));
        
        try {
            const projectInfo = this.getProjectInfo();
            console.log(`   –í–µ—Ä—Å–∏—è: ${c('green', projectInfo.version)}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .vsix —Ñ–∞–π–ª–æ–≤
            const vsixPattern = `vscode-extension/bsl-type-safety-analyzer-*.vsix`;
            const glob = require('glob');
            const vsixFiles = glob.sync(vsixPattern);
            
            if (vsixFiles.length > 0) {
                const latestFile = vsixFiles[vsixFiles.length - 1];
                const stats = fs.statSync(latestFile);
                const sizeMB = (stats.size / (1024 * 1024)).toFixed(1);
                const modified = stats.mtime.toLocaleString();
                
                console.log(`   –§–∞–π–ª: ${c('cyan', path.basename(latestFile))}`);
                console.log(`   –†–∞–∑–º–µ—Ä: ${c('yellow', sizeMB)} MB`);
                console.log(`   –°–æ–∑–¥–∞–Ω: ${c('gray', modified)}`);
                console.log(`   –ü—É—Ç—å: ${c('gray', latestFile)}`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–∫–µ—Ç–∞
                console.log(`   –°—Ç–∞—Ç—É—Å: ${c('green', '–ì–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏')}`);
            } else {
                console.log(`   –°—Ç–∞—Ç—É—Å: ${c('red', '–ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')}`);
                console.log(c('yellow', '   üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–±–æ—Ä–∫—É: npm run build:smart')); 
            }
        } catch (error) {
            console.log(c('red', `   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: ${error.message}`));
        }
    }
    
    async setupMarketplaceToken() {
        console.log('\n' + c('bright', 'üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞ VS Code Marketplace'));
        console.log('='.repeat(50));
        
        console.log(c('yellow', 'üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:'));
        console.log('1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞: https://marketplace.visualstudio.com/manage');
        console.log('2. –°–æ–∑–¥–∞–π—Ç–µ Personal Access Token —Å –ø—Ä–∞–≤–∞–º–∏ Marketplace');
        console.log('3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: npx @vscode/vsce login <–≤–∞—à-publisher-id>');
        console.log('4. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω');
        console.log();
        
        const setup = await this.prompt(c('bright', 'üöÄ –í—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–µ–π—á–∞—Å? (y/N): '));
        
        if (setup.toLowerCase() === 'y' || setup.toLowerCase() === 'yes') {
            const publisherId = await this.prompt(c('bright', 'üë§ Publisher ID: '));
            
            if (publisherId.trim()) {
                try {
                    console.log(c('blue', `üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è ${publisherId}...`));
                    execSync(`cd vscode-extension && npx @vscode/vsce login ${publisherId}`, { stdio: 'inherit' });
                    console.log(c('green', '‚úÖ –¢–æ–∫–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!'));
                } catch (error) {
                    console.log(c('red', '‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–∞'));
                }
            }
        }
        
        await this.prompt(c('bright', '\nüìÑ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...'));
        await this.showPublishMenu();
    }
    
    async smartCommitPush() {
        console.log();
        const message = await this.prompt(c('bright', 'üíæ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞: '));
        
        if (!message.trim()) {
            console.log(c('red', '‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'));
            await this.sleep(1000);
            return this.showGitMenu();
        }

        try {
            // –ö–æ–º–º–∏—Ç
            console.log(c('blue', 'üíæ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–º–∏—Ç...'));
            execSync(`git add . && git commit -m "${message}"`, { stdio: 'inherit' });
            console.log(c('green', '‚úÖ –ö–æ–º–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω'));
            
            // Push
            console.log(c('blue', 'üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...'));
            execSync('git push', { stdio: 'inherit' });
            console.log(c('green', '‚úÖ Push –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ'));
            
        } catch (error) {
            console.log(c('red', '‚ùå –û—à–∏–±–∫–∞ Git –æ–ø–µ—Ä–∞—Ü–∏–∏'));
        }
        
        await this.prompt(c('bright', '\nüìÑ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...'));
        await this.showGitMenu();
    }
    
    async releaseWithPublish(type) {
        console.log();
        console.log(c('blue', `üöÄ –†–µ–ª–∏–∑ ${type} —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π...`));
        console.log('='.repeat(60));
        
        const startTime = Date.now();
        let success = true;
        
        try {
            // 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞
            console.log(c('blue', `\nüè∑Ô∏è  [1/3] –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ ${type}...`));
            execSync(`npm run git:release ${type}`, { stdio: 'inherit' });
            console.log(c('green', `‚úÖ –†–µ–ª–∏–∑ ${type} —Å–æ–∑–¥–∞–Ω`));
            
            // 2. Push —Å —Ç–µ–≥–∞–º–∏
            console.log(c('blue', '\nüöÄ [2/3] –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Git —Å —Ç–µ–≥–∞–º–∏...'));
            execSync('git push origin main --follow-tags', { stdio: 'inherit' });
            console.log(c('green', '‚úÖ Push —Å —Ç–µ–≥–∞–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω'));
            
            // 3. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Marketplace
            console.log(c('blue', '\nüì§ [3/3] –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ VS Code Marketplace...'));
            
            const confirm = await this.prompt(c('bright', 'ü§î –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ Marketplace —Å–µ–π—á–∞—Å? (y/N): '));
            if (confirm.toLowerCase() === 'y' || confirm.toLowerCase() === 'yes') {
                execSync('npm run publish:marketplace', { stdio: 'inherit' });
                console.log(c('green', '‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ Marketplace!'));
            } else {
                console.log(c('yellow', '‚è∏Ô∏è  –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–ª–æ–∂–µ–Ω–∞'));
            }
            
        } catch (error) {
            console.log(c('red', `‚ùå –û—à–∏–±–∫–∞ —Ä–µ–ª–∏–∑–∞: ${error.message}`));
            success = false;
        }
        
        const totalTime = ((Date.now() - startTime) / 1000).toFixed(1);
        console.log('\n' + '='.repeat(60));
        
        if (success) {
            console.log(c('green', `üéâ –†–ï–õ–ò–ó ${type.toUpperCase()} –ó–ê–í–ï–†–®–ï–ù!`));
            console.log(c('green', `‚è±Ô∏è  –í—Ä–µ–º—è: ${totalTime}s`));
        } else {
            console.log(c('red', `üí• –†–ï–õ–ò–ó ${type.toUpperCase()} –ù–ï –£–î–ê–õ–°–Ø`));
        }
        
        console.log('='.repeat(60));
        await this.prompt(c('bright', '\nüìÑ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...'));
        await this.showGitMenu();
    }
    
    async gitPush() {
        console.log();
        console.log(c('blue', 'üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...'));
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            const status = execSync('git status --porcelain', { encoding: 'utf8' });
            if (status.trim().length === 0) {
                console.log(c('yellow', '‚ö†Ô∏è  –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏'));
            } else {
                console.log(c('yellow', '‚ö†Ô∏è  –ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ –∫–æ–º–º–∏—Ç.'));
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–º–º–∏—Ç—ã –¥–ª—è push
            try {
                execSync('git log @{u}..HEAD --oneline', { stdio: 'ignore' });
                execSync('git push', { stdio: 'inherit' });
                console.log(c('green', '‚úÖ Push –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ'));
            } catch {
                console.log(c('yellow', '‚ö†Ô∏è  –ù–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º'));
            }
            
        } catch (error) {
            console.log(c('red', `‚ùå –û—à–∏–±–∫–∞ push: ${error.message}`));
        }
        
        await this.prompt(c('bright', '\nüìÑ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...'));
        await this.showGitMenu();
    }

    async showHelp() {
        console.clear();
        this.showHeader();
        console.log(c('bright', '‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:') + '\n');
        
        console.log(c('green', 'üß† –£–º–Ω–∞—è —Å–±–æ—Ä–∫–∞') + ' - –±—ã—Å—Ç—Ä–∞—è —Å–±–æ—Ä–∫–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)');
        console.log(c('blue', 'üëÅÔ∏è  Watch —Ä–µ–∂–∏–º') + ' - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö');
        console.log(c('cyan', '‚ö° Dev —Å–±–æ—Ä–∫–∞') + ' - –±—ã—Å—Ç—Ä–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–µ—Å–∫–∞—è —Å–±–æ—Ä–∫–∞');
        console.log(c('yellow', 'üîß –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è') + ' - –ø–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –±–µ–∑ –∫–µ—à–∞');
        console.log(c('magenta', 'üì¶ Release —Å–±–æ—Ä–∫–∞') + ' - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–±–æ—Ä–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞');
        console.log(c('red', 'üßπ –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞') + ' - cargo clean + –ø–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ (—Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–µ—à–µ–º)');
        console.log();
        console.log(c('bright', '–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:'));
        console.log('   h - —Å–ø—Ä–∞–≤–∫–∞');
        console.log('   q - –≤—ã—Ö–æ–¥');
        console.log('   b - –Ω–∞–∑–∞–¥ (–≤ –ø–æ–¥–º–µ–Ω—é)');
        console.log('   Ctrl+C - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é');
        
        await this.prompt(c('bright', '\nüìÑ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...'));
        await this.showMainMenu();
    }

    prompt(question) {
        return new Promise(resolve => {
            this.rl.question(question, resolve);
        });
    }

    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    cleanup() {
        if (this.currentProcess) {
            this.currentProcess.kill();
        }
        this.rl.close();
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C
process.on('SIGINT', () => {
    console.log(c('yellow', '\n\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...'));
    process.exit(0);
});

// –ó–∞–ø—É—Å–∫
const app = new InteractiveDev();
app.start().catch(console.error);