#!/usr/bin/env node

const prompts = require('prompts');
const { execSync, spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

// –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
const colors = {
    reset: '\x1b[0m',
    bright: '\x1b[1m',
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m',
    gray: '\x1b[90m'
};

function c(color, text) {
    return `${colors[color] || ''}${text}${colors.reset}`;
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ BSL Type Safety Analyzer v2.0
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 39 —Ñ—É–Ω–∫—Ü–∏–π –≤ 6 –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
 */
class UniversalDevConsole {
    constructor() {
        this.version = '2.0.0';
        this.currentProcess = null;
        this.config = this.loadConfig();
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        this.setupSignalHandlers();
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    loadConfig() {
        const defaultConfig = {
            enabledCategories: ['build', 'version', 'dev', 'git', 'publish', 'utils'],
            confirmDestructiveActions: true,
            showProgressBars: true,
            autoReturnToMainMenu: false,
            logErrors: true,
            favoriteActions: [],
            customCommands: {},
            shortcuts: {
                'ctrl+c': 'exit',
                'escape': 'back'
            }
        };

        try {
            const configPath = path.join(process.cwd(), '.dev-console-config.json');
            if (fs.existsSync(configPath)) {
                const userConfig = JSON.parse(fs.readFileSync(configPath, 'utf8'));
                const mergedConfig = { ...defaultConfig, ...userConfig };
                console.log(c('green', `‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${configPath}`));
                return mergedConfig;
            }
        } catch (error) {
            console.log(c('yellow', `‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error.message}`));
            console.log(c('cyan', 'üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'));
        }
        
        return defaultConfig;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    saveConfig() {
        try {
            const configPath = path.join(process.cwd(), '.dev-console-config.json');
            fs.writeFileSync(configPath, JSON.stringify(this.config, null, 4));
            console.log(c('green', `‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${configPath}`));
            return true;
        } catch (error) {
            console.log(c('red', `‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error.message}`));
            return false;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–µ—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
     */
    isDestructiveAction(actionId) {
        const destructiveActions = [
            'clean-rebuild',
            'deep-cleanup', 
            'cargo-clean',
            'cleanup-project',
            'publish-marketplace',
            'publish-github',
            'git-release'
        ];
        return destructiveActions.includes(actionId);
    }

    /**
     * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
     */
    async confirmDestructive(actionTitle) {
        if (!this.config.confirmDestructiveActions) {
            return true;
        }

        const response = await prompts({
            type: 'confirm',
            name: 'confirm',
            message: `‚ö†Ô∏è "${actionTitle}" - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`,
            initial: false
        });

        return response.confirm || false;
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
     */
    setupSignalHandlers() {
        const cleanup = () => {
            console.log(c('yellow', '\n\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...'));
            if (this.currentProcess) {
                this.currentProcess.kill();
            }
            process.exit(0);
        };

        process.on('SIGINT', cleanup);
        process.on('SIGTERM', cleanup);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è prompts (ESC)
        process.on('SIGTSTP', () => {
            console.log(c('yellow', '\n‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'));
        });
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
     */
    showHeader() {
        console.clear();
        console.log(c('cyan', '‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó'));
        console.log(c('cyan', '‚ïë') + c('bright', '     üöÄ BSL Analyzer - Universal Dev Console v2.0             ') + c('cyan', '‚ïë'));
        console.log(c('cyan', '‚ïë') + c('green', '                39 —Ñ—É–Ω–∫—Ü–∏–π –≤ 6 –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö                     ') + c('cyan', '‚ïë'));
        console.log(c('cyan', '‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù'));
        console.log();
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–Ω—é
     */
    getCategories() {
        return [
            {
                id: 'build',
                title: 'üì¶   –°–±–æ—Ä–∫–∞ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
                icon: 'üì¶',
                description: '8 —Ñ—É–Ω–∫—Ü–∏–π —Å–±–æ—Ä–∫–∏ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
                enabled: this.config.enabledCategories.includes('build')
            },
            {
                id: 'version', 
                title: 'üîÑ   –í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
                icon: 'üîÑ',
                description: '6 —Ñ—É–Ω–∫—Ü–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏—è–º–∏',
                enabled: this.config.enabledCategories.includes('version')
            },
            {
                id: 'dev',
                title: 'üîß   –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –∫–∞—á–µ—Å—Ç–≤–æ',
                icon: 'üîß',
                description: '5 —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
                enabled: this.config.enabledCategories.includes('dev')
            },
            {
                id: 'git',
                title: 'üìã   Git –æ–ø–µ—Ä–∞—Ü–∏–∏',
                icon: 'üìã',
                description: '8 Git —Ñ—É–Ω–∫—Ü–∏–π',
                enabled: this.config.enabledCategories.includes('git')
            },
            {
                id: 'publish',
                title: 'üöÄ   –ü—É–±–ª–∏–∫–∞—Ü–∏—è',
                icon: 'üöÄ',
                description: '7 —Ñ—É–Ω–∫—Ü–∏–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏',
                enabled: this.config.enabledCategories.includes('publish')
            },
            {
                id: 'utils',
                title: '‚öôÔ∏è   –£—Ç–∏–ª–∏—Ç—ã –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞',
                icon: '‚öôÔ∏è',
                description: '5 —É—Ç–∏–ª–∏—Ç –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞',
                enabled: this.config.enabledCategories.includes('utils')
            }
        ].filter(cat => cat.enabled);
    }

    /**
     * –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
     */
    async showMainMenu() {
        while (true) {
            this.showHeader();
            
            const categories = this.getCategories();
            const choices = [
                ...categories.map(cat => ({
                    title: `${cat.title}`,
                    description: cat.description,
                    value: cat.id
                })),
                { title: '‚ùå   –í—ã—Ö–æ–¥', value: 'exit' }
            ];

            const response = await prompts({
                type: 'select',
                name: 'category',
                message: 'üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
                choices: choices,
                initial: 0
            });

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã (ESC/Ctrl+C)
            if (!response.category) {
                console.log(c('yellow', '\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!'));
                process.exit(0);
            }

            if (response.category === 'exit') {
                console.log(c('yellow', '\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!'));
                process.exit(0);
            }

            // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            await this.showCategoryMenu(response.category);
        }
    }

    /**
     * –ú–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    async showCategoryMenu(categoryId) {
        const category = this.getCategories().find(cat => cat.id === categoryId);
        if (!category) {
            console.log(c('red', '‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'));
            return;
        }

        while (true) {
            this.showHeader();
            console.log(c('bright', `${category.title}`));
            console.log(c('gray', category.description));
            console.log();

            const actions = this.getCategoryActions(categoryId);
            const choices = [
                ...actions.map(action => ({
                    title: action.title,
                    description: action.description || '',
                    value: action.id,
                    disabled: action.disabled
                })),
                { title: '‚¨ÖÔ∏è   –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', value: 'back' }
            ];

            const response = await prompts({
                type: 'select',
                name: 'action',
                message: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                choices: choices,
                initial: 0
            });

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
            if (!response.action || response.action === 'back') {
                return; // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–µ—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
            const action = actions.find(a => a.id === response.action);
            if (this.isDestructiveAction(response.action)) {
                const confirmed = await this.confirmDestructive(action?.title || response.action);
                if (!confirmed) {
                    console.log(c('yellow', '‚è∏Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞'));
                    await prompts({
                        type: 'text',
                        name: 'continue',
                        message: '–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...',
                        initial: ''
                    });
                    continue;
                }
            }
            
            await this.executeAction(categoryId, response.action);
            
            // –ê–≤—Ç–æ–≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ)
            if (!this.config.autoReturnToMainMenu) {
                const continueResponse = await prompts({
                    type: 'confirm',
                    name: 'continue',
                    message: '–û—Å—Ç–∞—Ç—å—Å—è –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏?',
                    initial: false
                });
                
                if (!continueResponse.continue) {
                    return;
                }
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    getCategoryActions(categoryId) {
        const actionsMap = {
            // üì¶ –°–±–æ—Ä–∫–∞ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (8 —Ñ—É–Ω–∫—Ü–∏–π)
            build: [
                { id: 'dev-build', title: '‚ö°    –ë—ã—Å—Ç—Ä–∞—è dev —Å–±–æ—Ä–∫–∞', description: 'npm run dev' },
                { id: 'smart-build', title: 'üß†    Smart —Å–±–æ—Ä–∫–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º', description: 'npm run build:smart' },
                { id: 'smart-dev', title: 'üß†    Smart dev —Å–±–æ—Ä–∫–∞', description: 'npm run build:smart:dev' },
                { id: 'smart-release', title: 'üß†    Smart release —Å–±–æ—Ä–∫–∞', description: 'npm run build:smart:release' },
                { id: 'release-build', title: 'üèóÔ∏è    Release —Å–±–æ—Ä–∫–∞ (–ø–æ–ª–Ω–∞—è)', description: 'npm run build:release' },
                { id: 'watch-mode', title: 'üëÅÔ∏è    Watch —Ä–µ–∂–∏–º (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)', description: '–§–∞–π–ª–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ + –∞–≤—Ç–æ–ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞' },
                { id: 'rebuild-extension', title: 'üì¶    –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è', description: 'npm run rebuild:extension' },
                { id: 'clean-rebuild', title: 'üßπ    –û—á–∏—Å—Ç–∫–∞ –∏ –ø–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞', description: 'cargo clean + npm cleanup + release' }
            ],
            
            // üîÑ –í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (6 —Ñ—É–Ω–∫—Ü–∏–π)
            version: [
                { id: 'version-patch', title: 'üî¢‚ÄÄ–£–≤–µ–ª–∏—á–∏—Ç—å patch (x.x.X)', description: 'npm run version:patch' },
                { id: 'version-minor', title: 'üî¢‚ÄÄ–£–≤–µ–ª–∏—á–∏—Ç—å minor (x.X.x)', description: 'npm run version:minor' },
                { id: 'version-major', title: 'üî¢‚ÄÄ–£–≤–µ–ª–∏—á–∏—Ç—å major (X.x.x)', description: 'npm run version:major' },
                { id: 'version-sync', title: 'üîÑ‚ÄÄ–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–µ—Ä—Å–∏–π', description: 'npm run version:sync' },
                { id: 'build-patch', title: 'üèóÔ∏è‚ÄÄ–°–±–æ—Ä–∫–∞ —Å patch –≤–µ—Ä—Å–∏–µ–π', description: 'npm run build:patch' },
                { id: 'build-minor', title: 'üèóÔ∏è‚ÄÄ–°–±–æ—Ä–∫–∞ —Å minor –≤–µ—Ä—Å–∏–µ–π', description: 'npm run build:minor' }
            ],
            
            // üîß –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –∫–∞—á–µ—Å—Ç–≤–æ (5 —Ñ—É–Ω–∫—Ü–∏–π)
            dev: [
                { id: 'run-tests', title: 'üß™‚ÄÄ–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã', description: 'cargo test' },
                { id: 'check-code', title: 'üîç‚ÄÄ–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ (clippy)', description: 'cargo clippy' },
                { id: 'format-code', title: 'üìù‚ÄÄ–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥', description: 'cargo fmt' },
                { id: 'check-binaries', title: 'üîç‚ÄÄ–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã', description: 'npm run check:binaries' },
                { id: 'project-info', title: 'üìä‚ÄÄ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ', description: '–í–µ—Ä—Å–∏–∏, –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, git —Å—Ç–∞—Ç—É—Å' }
            ],
            
            // üìã Git –æ–ø–µ—Ä–∞—Ü–∏–∏ (8 —Ñ—É–Ω–∫—Ü–∏–π)
            git: [
                { id: 'git-status', title: 'üìä‚ÄÄGit —Å—Ç–∞—Ç—É—Å', description: 'git status' },
                { id: 'smart-commit', title: 'üìù‚ÄÄ–£–º–Ω—ã–π –∫–æ–º–º–∏—Ç', description: 'git add + commit (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ)' },
                { id: 'commit-push', title: 'üì§‚ÄÄ–ö–æ–º–º–∏—Ç –∏ –ø—É—à', description: 'git add + commit + push' },
                { id: 'git-dev', title: 'üîß‚ÄÄDev workflow', description: 'npm run git:dev' },
                { id: 'git-release', title: 'üöÄ‚ÄÄRelease workflow', description: 'npm run git:release' },
                { id: 'git-commit', title: 'üíæ‚ÄÄ–ü—Ä–æ—Å—Ç–æ–π –∫–æ–º–º–∏—Ç', description: 'npm run git:commit' },
                { id: 'git-version', title: 'üè∑Ô∏è‚ÄÄVersion workflow', description: 'npm run git:version' },
                { id: 'git-log', title: 'üìú‚ÄÄ–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–∏—Ç–æ–≤', description: 'git log --oneline -10' }
            ],
            
            // üöÄ –ü—É–±–ª–∏–∫–∞—Ü–∏—è (7 —Ñ—É–Ω–∫—Ü–∏–π)
            publish: [
                { id: 'package-extension', title: 'üì¶‚ÄÄ–£–ø–∞–∫–æ–≤–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ', description: 'npm run package:extension' },
                { id: 'publish-marketplace', title: 'üè™‚ÄÄ–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ Marketplace', description: 'npm run publish:marketplace' },
                { id: 'publish-github', title: 'üêô‚ÄÄ–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–∞ GitHub', description: 'npm run publish:github' },
                { id: 'publish-check', title: 'üîç‚ÄÄ–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é', description: 'npm run publish:check' },
                { id: 'clean-packages', title: 'üßπ‚ÄÄ–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ø–∞–∫–µ—Ç—ã', description: 'npm run clean:old-packages' },
                { id: 'copy-binaries', title: 'üìã‚ÄÄ–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –±–∏–Ω–∞—Ä–Ω–∏–∫–∏', description: 'npm run copy:binaries:release' },
                { id: 'build-versioned', title: 'üèóÔ∏è‚ÄÄ–°–±–æ—Ä–∫–∞ —Å –≤–µ—Ä—Å–∏–µ–π', description: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä patch/minor/major' }
            ],
            
            // ‚öôÔ∏è –£—Ç–∏–ª–∏—Ç—ã –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (5 —Ñ—É–Ω–∫—Ü–∏–π)
            utils: [
                { id: 'cleanup-project', title: 'üßπ‚ÄÄ–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞', description: 'npm run cleanup:project' },
                { id: 'deep-cleanup', title: 'üóëÔ∏è‚ÄÄ–ì–ª—É–±–æ–∫–∞—è –æ—á–∏—Å—Ç–∫–∞', description: 'npm run deep-cleanup' },
                { id: 'watch-install', title: 'üëÅÔ∏è‚ÄÄ–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å watch –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏', description: 'npm install chokidar' },
                { id: 'cargo-clean', title: 'ü¶Ä‚ÄÄ–û—á–∏—Å—Ç–∏—Ç—å Cargo cache', description: 'cargo clean' },
                { id: 'show-logs', title: 'üìÑ‚ÄÄ–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –æ—à–∏–±–æ–∫', description: '–ü—Ä–æ—Å–º–æ—Ç—Ä error log —Ñ–∞–π–ª–∞' }
            ]
        };
        
        return actionsMap[categoryId] || [];
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
     */
    async executeAction(categoryId, actionId) {
        console.log(c('blue', `\nüîß –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: ${categoryId}/${actionId}`));
        
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        switch (`${categoryId}/${actionId}`) {
            // üì¶ –°–±–æ—Ä–∫–∞ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (8 —Ñ—É–Ω–∫—Ü–∏–π)
            case 'build/dev-build':
                return await this.runCommand('npm run dev', '–ë—ã—Å—Ç—Ä–∞—è dev —Å–±–æ—Ä–∫–∞');
            case 'build/smart-build':
                return await this.runCommand('npm run build:smart', 'Smart —Å–±–æ—Ä–∫–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º');
            case 'build/smart-dev':
                return await this.runCommand('npm run build:smart:dev', 'Smart dev —Å–±–æ—Ä–∫–∞');
            case 'build/smart-release':
                return await this.runCommand('npm run build:smart:release', 'Smart release —Å–±–æ—Ä–∫–∞');
            case 'build/release-build':
                return await this.runCommand('npm run build:release', 'Release —Å–±–æ—Ä–∫–∞ (–ø–æ–ª–Ω–∞—è)');
            case 'build/watch-mode':
                return await this.startWatchMode();
            case 'build/rebuild-extension':
                return await this.runCommand('npm run rebuild:extension', '–ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è');
            case 'build/clean-rebuild':
                return await this.cleanAndRebuild();
                
            // üîÑ –í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (6 —Ñ—É–Ω–∫—Ü–∏–π)
            case 'version/version-patch':
                return await this.runCommand('npm run version:patch', '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ patch –≤–µ—Ä—Å–∏–∏');
            case 'version/version-minor':
                return await this.runCommand('npm run version:minor', '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ minor –≤–µ—Ä—Å–∏–∏');
            case 'version/version-major':
                return await this.runCommand('npm run version:major', '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ major –≤–µ—Ä—Å–∏–∏');
            case 'version/version-sync':
                return await this.runCommand('npm run version:sync', '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–µ—Ä—Å–∏–π');
            case 'version/build-patch':
                return await this.runCommand('npm run build:patch', '–°–±–æ—Ä–∫–∞ —Å patch –≤–µ—Ä—Å–∏–µ–π');
            case 'version/build-minor':
                return await this.runCommand('npm run build:minor', '–°–±–æ—Ä–∫–∞ —Å minor –≤–µ—Ä—Å–∏–µ–π');
                
            // üîß –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –∫–∞—á–µ—Å—Ç–≤–æ (5 —Ñ—É–Ω–∫—Ü–∏–π)
            case 'dev/run-tests':
                return await this.runCommand('cargo test', '–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤');
            case 'dev/check-code':
                return await this.runCommand('cargo clippy', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ (clippy)');
            case 'dev/format-code':
                return await this.runCommand('cargo fmt', '–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞');
            case 'dev/check-binaries':
                return await this.runCommand('npm run check:binaries', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–Ω–∞—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤');
            case 'dev/project-info':
                return await this.showProjectInfo();
                
            // üìã Git –æ–ø–µ—Ä–∞—Ü–∏–∏ (8 —Ñ—É–Ω–∫—Ü–∏–π)
            case 'git/git-status':
                return await this.runCommand('git status', 'Git —Å—Ç–∞—Ç—É—Å');
            case 'git/smart-commit':
                return await this.smartCommit();
            case 'git/commit-push':
                return await this.commitAndPush();
            case 'git/git-dev':
                return await this.runCommand('npm run git:dev', 'Dev workflow');
            case 'git/git-release':
                return await this.runCommand('npm run git:release minor', 'Release workflow');
            case 'git/git-commit':
                return await this.runCommand('npm run git:commit', '–ü—Ä–æ—Å—Ç–æ–π –∫–æ–º–º–∏—Ç');
            case 'git/git-version':
                return await this.runCommand('npm run git:version', 'Version workflow');
            case 'git/git-log':
                return await this.runCommand('git log --oneline -10', '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∫–æ–º–º–∏—Ç–æ–≤');
                
            // üöÄ –ü—É–±–ª–∏–∫–∞—Ü–∏—è (7 —Ñ—É–Ω–∫—Ü–∏–π)
            case 'publish/package-extension':
                return await this.runCommand('npm run package:extension', '–£–ø–∞–∫–æ–≤–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è');
            case 'publish/publish-marketplace':
                return await this.runCommand('npm run publish:marketplace', '–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ VS Code Marketplace');
            case 'publish/publish-github':
                return await this.runCommand('npm run publish:github', '–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ GitHub');
            case 'publish/publish-check':
                return await this.runCommand('npm run publish:check', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
            case 'publish/clean-packages':
                return await this.runCommand('npm run clean:old-packages', '–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–∞–∫–µ—Ç–æ–≤');
            case 'publish/copy-binaries':
                return await this.runCommand('npm run copy:binaries:release', '–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ release –±–∏–Ω–∞—Ä–Ω–∏–∫–æ–≤');
            case 'publish/build-versioned':
                return await this.buildVersioned();
                
            // ‚öôÔ∏è –£—Ç–∏–ª–∏—Ç—ã –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (5 —Ñ—É–Ω–∫—Ü–∏–π)
            case 'utils/cleanup-project':
                return await this.runCommand('npm run cleanup:project', '–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞');
            case 'utils/deep-cleanup':
                return await this.runCommand('npm run deep-cleanup', '–ì–ª—É–±–æ–∫–∞—è –æ—á–∏—Å—Ç–∫–∞');
            case 'utils/watch-install':
                return await this.runCommand('npm run watch:install', '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ watch –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π');
            case 'utils/cargo-clean':
                return await this.runCommand('cargo clean', '–û—á–∏—Å—Ç–∫–∞ Cargo cache');
            case 'utils/show-logs':
                return await this.showErrorLogs();
                
            default:
                console.log(c('yellow', '‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –≠—Ç–∞–ø–µ 2'));
                break;
        }
        
        // –ü–∞—É–∑–∞ –¥–ª—è –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π
        await prompts({
            type: 'text',
            name: 'continue',
            message: '–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...',
            initial: ''
        });
    }
    
    /**
     * –£–º–Ω—ã–π –∫–æ–º–º–∏—Ç (–±–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
     */
    async smartCommit() {
        console.log(c('magenta', '\nüìù –£–º–Ω—ã–π –∫–æ–º–º–∏—Ç...'));
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
        await this.runCommand('git status --porcelain', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π');
        
        const response = await prompts({
            type: 'text',
            name: 'message',
            message: '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞:',
            validate: value => value.trim().length > 0 ? true : '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
        });
        
        if (!response.message) return false;
        
        await this.runCommand('git add .', '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤');
        return await this.runCommand(`git commit -m "${response.message}"`, '–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞');
    }
    
    /**
     * –ö–æ–º–º–∏—Ç –∏ –ø—É—à (–±–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
     */
    async commitAndPush() {
        console.log(c('magenta', '\nüì§ –ö–æ–º–º–∏—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞...'));
        
        await this.runCommand('git status --porcelain', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π');
        
        const response = await prompts({
            type: 'text',
            name: 'message',
            message: '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞:',
            validate: value => value.trim().length > 0 ? true : '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
        });
        
        if (!response.message) return false;
        
        await this.runCommand('git add .', '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤');
        await this.runCommand(`git commit -m "${response.message}"`, '–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞');
        return await this.runCommand('git push', '–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π');
    }

    /**
     * Watch —Ä–µ–∂–∏–º —Å —Ñ–∞–π–ª–æ–≤—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
     */
    async startWatchMode() {
        console.log(c('cyan', '\nüëÅÔ∏è –ó–∞–ø—É—Å–∫ Watch —Ä–µ–∂–∏–º–∞...'));
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ chokidar
        try {
            require('chokidar');
        } catch (error) {
            console.log(c('yellow', '‚ö†Ô∏è –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å chokidar –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'));
            
            const installResponse = await prompts({
                type: 'confirm',
                name: 'install',
                message: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å chokidar –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏?',
                initial: true
            });
            
            if (!installResponse.install) {
                console.log(c('red', '‚ùå Watch —Ä–µ–∂–∏–º —Ç—Ä–µ–±—É–µ—Ç chokidar'));
                return false;
            }
            
            await this.runCommand('npm install --save-dev chokidar', '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ chokidar');
        }
        
        console.log(c('green', '‚úÖ –ó–∞–ø—É—Å–∫ watch —Ä–µ–∂–∏–º–∞...'));
        console.log(c('gray', '–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏'));
        
        const { spawn } = require('child_process');
        const child = spawn('npm', ['run', 'watch'], {
            stdio: 'inherit',
            shell: true
        });
        
        this.currentProcess = child;
        
        return new Promise((resolve) => {
            child.on('close', (code) => {
                this.currentProcess = null;
                console.log(c('yellow', '\nüëÅÔ∏è Watch —Ä–µ–∂–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'));
                resolve(code === 0);
            });
        });
    }

    /**
     * –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞
     */
    async cleanAndRebuild() {
        console.log(c('yellow', '\nüßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞...'));
        
        const confirmResponse = await prompts({
            type: 'confirm',
            name: 'confirm',
            message: '‚ö†Ô∏è –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?',
            initial: false
        });
        
        if (!confirmResponse.confirm) {
            console.log(c('yellow', '‚è∏Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞'));
            return false;
        }
        
        console.log(c('gray', '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞...\n'));
        
        await this.runCommand('cargo clean', '–û—á–∏—Å—Ç–∫–∞ Cargo');
        await this.runCommand('npm run cleanup:project', '–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞');
        return await this.runCommand('npm run build:release', '–ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞');
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
     */
    async showProjectInfo() {
        console.log(c('cyan', '\nüìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ:'));
        console.log('='.repeat(60));
        
        try {
            const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            console.log(c('bright', `üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: ${packageJson.name}`));
            console.log(c('bright', `üî¢ –í–µ—Ä—Å–∏—è: ${packageJson.version}`));
            console.log(c('bright', `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${packageJson.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`));
            
            // Cargo.toml
            if (fs.existsSync('Cargo.toml')) {
                const cargoToml = fs.readFileSync('Cargo.toml', 'utf8');
                const versionMatch = cargoToml.match(/version\s*=\s*"([^"]+)"/);
                if (versionMatch) {
                    console.log(c('bright', `ü¶Ä Cargo –≤–µ—Ä—Å–∏—è: ${versionMatch[1]}`));
                }
            }
            
            // Git –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            try {
                const branch = execSync('git branch --show-current', { encoding: 'utf8' }).trim();
                const commits = execSync('git rev-list --count HEAD', { encoding: 'utf8' }).trim();
                const lastCommit = execSync('git log -1 --format="%h %s"', { encoding: 'utf8' }).trim();
                console.log(c('bright', `üåø –í–µ—Ç–∫–∞: ${branch}`));
                console.log(c('bright', `üìä –ö–æ–º–º–∏—Ç–æ–≤: ${commits}`));
                console.log(c('bright', `üìù –ü–æ—Å–ª–µ–¥–Ω–∏–π: ${lastCommit}`));
            } catch (error) {
                console.log(c('gray', 'üìä Git –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'));
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            const deps = packageJson.dependencies || {};
            const devDeps = packageJson.devDependencies || {};
            console.log(c('bright', `üìö –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${Object.keys(deps).length}`));
            console.log(c('bright', `üîß Dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${Object.keys(devDeps).length}`));
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ VSCode —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            const extensionPath = 'vscode-extension/package.json';
            if (fs.existsSync(extensionPath)) {
                const extPackage = JSON.parse(fs.readFileSync(extensionPath, 'utf8'));
                console.log(c('bright', `üì± VSCode —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: v${extPackage.version}`));
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞
            const cacheExists = fs.existsSync('.build-cache');
            console.log(c(cacheExists ? 'green' : 'gray', `üíæ Build cache: ${cacheExists ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`));
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ chokidar –¥–ª—è watch
            try {
                require('chokidar');
                console.log(c('green', 'üëÅÔ∏è Watch –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'));
            } catch (error) {
                console.log(c('red', 'üëÅÔ∏è Watch –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'));
            }
            
        } catch (error) {
            console.log(c('red', `‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: ${error.message}`));
        }
        
        return true;
    }

    /**
     * –°–±–æ—Ä–∫–∞ —Å –≤—ã–±–æ—Ä–æ–º –≤–µ—Ä—Å–∏–∏
     */
    async buildVersioned() {
        console.log(c('cyan', '\nüèóÔ∏è –°–±–æ—Ä–∫–∞ —Å –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º'));
        
        const versionResponse = await prompts({
            type: 'select',
            name: 'version',
            message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–µ—Ä—Å–∏–∏ –¥–ª—è —Å–±–æ—Ä–∫–∏:',
            choices: [
                { title: 'üî∏ Patch (x.x.X)', value: 'patch', description: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –º–µ–ª–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è' },
                { title: 'üîπ Minor (x.X.x)', value: 'minor', description: '–ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é' },
                { title: 'üî∫ Major (X.x.x)', value: 'major', description: '–ö—Ä—É–ø–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –º–æ–≥—É—Ç –Ω–∞—Ä—É—à–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å' }
            ],
            initial: 0
        });
        
        if (!versionResponse.version) return false;
        
        const command = `npm run build:${versionResponse.version}`;
        return await this.runCommand(command, `–°–±–æ—Ä–∫–∞ —Å ${versionResponse.version} –≤–µ—Ä—Å–∏–µ–π`);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –æ—à–∏–±–æ–∫
     */
    async showErrorLogs() {
        console.log(c('cyan', '\nüìÑ –õ–æ–≥–∏ –æ—à–∏–±–æ–∫ –∫–æ–Ω—Å–æ–ª–∏'));
        console.log('='.repeat(60));
        
        const logPath = path.join(process.cwd(), '.dev-console-errors.log');
        
        if (!fs.existsSync(logPath)) {
            console.log(c('green', '‚úÖ –õ–æ–≥ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –æ—à–∏–±–æ–∫ –Ω–µ –±—ã–ª–æ'));
            return true;
        }
        
        try {
            const logContent = fs.readFileSync(logPath, 'utf8');
            const lines = logContent.trim().split('\n');
            
            console.log(c('yellow', `üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${lines.length}`));
            console.log();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
            const recentLines = lines.slice(-10);
            recentLines.forEach((line, index) => {
                try {
                    const entry = JSON.parse(line);
                    const timestamp = new Date(entry.timestamp).toLocaleString();
                    console.log(c('red', `[${timestamp}]`));
                    console.log(c('gray', `–ö–æ–º–∞–Ω–¥–∞: ${entry.command}`));
                    console.log(c('yellow', `–û—à–∏–±–∫–∞: ${entry.error}`));
                    if (index < recentLines.length - 1) console.log();
                } catch (parseError) {
                    console.log(c('gray', line));
                }
            });
            
            if (lines.length > 10) {
                console.log(c('gray', `\n... –∏ –µ—â–µ ${lines.length - 10} –∑–∞–ø–∏—Å–µ–π`));
            }
            
            // –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥
            const clearResponse = await prompts({
                type: 'confirm',
                name: 'clear',
                message: '–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥ —Ñ–∞–π–ª?',
                initial: false
            });
            
            if (clearResponse.clear) {
                fs.writeFileSync(logPath, '');
                console.log(c('green', '‚úÖ –õ–æ–≥ —Ñ–∞–π–ª –æ—á–∏—â–µ–Ω'));
            }
            
        } catch (error) {
            console.log(c('red', `‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: ${error.message}`));
        }
        
        return true;
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
     */
    async runCommand(command, description = '') {
        console.log(c('cyan', `\nüîß ${description || command}`));
        console.log('='.repeat(60));
        
        try {
            const startTime = Date.now();
            execSync(command, { 
                cwd: process.cwd(),
                stdio: 'inherit',
                encoding: 'utf8'
            });
            const duration = ((Date.now() - startTime) / 1000).toFixed(1);
            console.log('='.repeat(60));
            console.log(c('green', `‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞ ${duration}s`));
            return true;
        } catch (error) {
            console.log('='.repeat(60));
            console.log(c('red', `‚ùå –û—à–∏–±–∫–∞: ${error.message}`));
            
            if (this.config.logErrors) {
                this.logError(command, error);
            }
            
            return false;
        }
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
     */
    logError(command, error) {
        const logEntry = {
            timestamp: new Date().toISOString(),
            command: command,
            error: error.message,
            code: error.code
        };
        
        try {
            const logPath = path.join(process.cwd(), '.dev-console-errors.log');
            fs.appendFileSync(logPath, JSON.stringify(logEntry) + '\n');
        } catch (logError) {
            // –ú–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ
     */
    getProjectInfo() {
        try {
            const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            const hasCache = fs.existsSync('.build-cache');
            let hasChanges = false;
            
            try {
                const result = execSync('git status --porcelain', { encoding: 'utf8' });
                hasChanges = result.trim().length > 0;
            } catch {
                // Git –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            }
            
            return {
                name: packageJson.name,
                version: packageJson.version,
                description: packageJson.description,
                hasCache,
                hasChanges
            };
        } catch (error) {
            return {
                name: 'unknown',
                version: 'unknown',
                description: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
                hasCache: false,
                hasChanges: false
            };
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã
     */
    isCommandAvailable(command) {
        try {
            execSync(`${command} --version`, { stdio: 'ignore' });
            return true;
        } catch {
            return false;
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Å–æ–ª–∏
     */
    async start() {
        console.log(c('bright', 'üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Universal Dev Console v2.0...'));
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
        const info = this.getProjectInfo();
        console.log(c('green', `üì¶ –ü—Ä–æ–µ–∫—Ç: ${info.name} v${info.version}`));
        
        if (info.hasChanges) {
            console.log(c('yellow', '‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è'));
        }
        
        console.log(c('blue', 'üöÄ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...\n'));
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await this.showMainMenu();
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const console_app = new UniversalDevConsole();

console_app.start().catch(error => {
    console.error(c('red', `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`));
    process.exit(1);
});