#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Check if any Rust files or extension files were changed in the last commit
CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r HEAD)

# Check if we need to rebuild extension
REBUILD_NEEDED=false

# Check for Rust source changes (that affect binaries)
if echo "$CHANGED_FILES" | grep -qE "^src/.*\.rs$|^Cargo\.(toml|lock)$"; then
    echo "ü¶Ä Rust source files changed - extension rebuild needed"
    REBUILD_NEEDED=true
fi

# Check for VSCode extension changes
if echo "$CHANGED_FILES" | grep -qE "^vscode-extension/src/.*\.ts$|^vscode-extension/package\.json$"; then
    echo "üì¶ VSCode extension files changed - rebuild needed"
    REBUILD_NEEDED=true
fi

# Rebuild if needed
if [ "$REBUILD_NEEDED" = true ]; then
    echo "üîÑ Starting automatic extension rebuild with version sync..."
    
    # Use the unified rebuild system (includes version sync check)
    npm run rebuild:extension
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Extension successfully rebuilt and synchronized"
        
        # Read current version for display
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "üì¶ Extension version: ${CURRENT_VERSION}"
        echo "üìÅ Location: vscode-extension/dist/bsl-analyzer-${CURRENT_VERSION}.vsix"
        echo "üìã To install: Ctrl+Shift+P ‚Üí Extensions: Install from VSIX"
    else
        echo "‚ùå Failed to rebuild extension"
    fi
else
    echo "‚ÑπÔ∏è  No extension rebuild needed (no relevant files changed)"
fi