import * as vscode from 'vscode';
import * as path from 'path';
import * as fs from 'fs';
import * as os from 'os';
import {
    executeBslCommand,
    getPlatformDocsArchive
} from '../utils';
import { 
    startIndexing, 
    updateIndexingProgress, 
    finishIndexing 
} from '../lsp/progress';
import { BslPlatformDocsProvider } from '../providers';

let outputChannel: vscode.OutputChannel;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
 */
export function initializePlatformDocs(channel: vscode.OutputChannel) {
    outputChannel = channel;
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
 */
export async function addPlatformDocumentation(provider: BslPlatformDocsProvider): Promise<void> {
    try {
        // 1. –°–ø—Ä–æ—Å–∏–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–µ—Ä—Å–∏—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        const version = await vscode.window.showInputBox({
            prompt: 'Enter platform version (e.g., 8.3.25)',
            placeHolder: '8.3.25',
            value: '8.3.25'
        });

        if (!version) {
            return;
        }

        // 2. –í—ã–±–µ—Ä–µ–º –∞—Ä—Ö–∏–≤ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π
        const archiveFiles = await vscode.window.showOpenDialog({
            canSelectFiles: true,
            canSelectMany: false,
            filters: {
                'Help Archives': ['zip']
            },
            openLabel: 'Select Platform Documentation Archive (shcntx or shlang)'
        });

        if (!archiveFiles || archiveFiles.length === 0) {
            return;
        }

        const firstFile = archiveFiles[0];
        if (!firstFile) {
            return;
        }
        const archivePath = firstFile.fsPath;
        const archiveDir = path.dirname(archivePath);
        const archiveName = path.basename(archivePath);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞—Ä—Ö–∏–≤–∞ –∏ –∏—â–µ–º companion –∞—Ä—Ö–∏–≤
        let shcntxPath: string | undefined;
        let shlangPath: string | undefined;
        let totalTypesCount = 0;
        
        if (archiveName.includes('shcntx')) {
            shcntxPath = archivePath;
            // –ò—â–µ–º shlang –∞—Ä—Ö–∏–≤ –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ
            const possibleShlangFiles = [
                'rebuilt.shlang_ru.zip',
                'shlang_ru.zip',
                archiveName.replace('shcntx', 'shlang')
            ];
            for (const shlangFile of possibleShlangFiles) {
                const shlangFullPath = path.join(archiveDir, shlangFile);
                if (fs.existsSync(shlangFullPath)) {
                    shlangPath = shlangFullPath;
                    outputChannel.appendLine(`üìÇ Found companion archive: ${shlangFile}`);
                    break;
                }
            }
        } else if (archiveName.includes('shlang')) {
            shlangPath = archivePath;
            // –ò—â–µ–º shcntx –∞—Ä—Ö–∏–≤ –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ
            const possibleShcntxFiles = [
                'rebuilt.shcntx_ru.zip',
                'shcntx_ru.zip',
                archiveName.replace('shlang', 'shcntx')
            ];
            for (const shcntxFile of possibleShcntxFiles) {
                const shcntxFullPath = path.join(archiveDir, shcntxFile);
                if (fs.existsSync(shcntxFullPath)) {
                    shcntxPath = shcntxFullPath;
                    outputChannel.appendLine(`üìÇ Found companion archive: ${shcntxFile}`);
                    break;
                }
            }
        }

        // 3. –í—ã–ø–æ–ª–Ω–∏–º –ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ –±–∏–Ω–∞—Ä—å —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        const stepsCount = (shcntxPath && shlangPath) ? 5 : 3; // –ë–æ–ª—å—à–µ —à–∞–≥–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±–∞ –∞—Ä—Ö–∏–≤–∞
        startIndexing(stepsCount);
        
        outputChannel.appendLine('‚ÑπÔ∏è Using force mode to replace existing documentation if present');
        
        await vscode.window.withProgress({
            location: vscode.ProgressLocation.Notification,
            title: `Adding/updating platform documentation for version ${version}...`,
            cancellable: false
        }, async (progress) => {
            try {
                let currentStep = 1;
                
                // extract_platform_docs –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –≤—Ç–æ—Ä–æ–π –∞—Ä—Ö–∏–≤ –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                // –ü–æ—ç—Ç–æ–º—É –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã–∑–≤–∞—Ç—å –æ–¥–∏–Ω —Ä–∞–∑ —Å –ª—é–±—ã–º –∏–∑ –∞—Ä—Ö–∏–≤–æ–≤
                const primaryArchive = shcntxPath || shlangPath;
                
                if (primaryArchive) {
                    updateIndexingProgress(currentStep++, 'Processing platform documentation archives...', 25);
                    progress.report({ increment: 25, message: 'Extracting platform types from archives...' });
                    
                    const extractResult = await executeBslCommand('extract_platform_docs', [
                        '--archive', primaryArchive,
                        '--platform-version', version,
                        '--force' // –í—Å–µ–≥–¥–∞ —Ñ–æ—Ä—Å–∏—Ä—É–µ–º –ø—Ä–∏ —Ä—É—á–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
                    ]);
                    
                    // –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–ø–æ–≤ –≤ –≤—ã–≤–æ–¥–µ
                    // extract_platform_docs –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–∞ –∞—Ä—Ö–∏–≤–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    const typesMatch = extractResult.match(/(\d+)\s+types/i) || 
                                      extractResult.match(/(\d+)\s+entities/i) ||
                                      extractResult.match(/Objects\s+‚îÇ\s+(\d+)/i);
                    const savedMatch = extractResult.match(/Saved\s+(\d+)\s+platform\s+types/i);
                    
                    if (savedMatch && savedMatch[1]) {
                        totalTypesCount = parseInt(savedMatch[1]);
                    } else if (typesMatch && typesMatch[1]) {
                        totalTypesCount = parseInt(typesMatch[1]);
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –æ–±–∞ –∞—Ä—Ö–∏–≤–∞
                    const hasAutoDetected = extractResult.includes('Auto-detected');
                    if (hasAutoDetected) {
                        outputChannel.appendLine(`‚úÖ Both archives processed automatically`);
                    }
                    
                    outputChannel.appendLine(`‚úÖ Platform documentation extracted: ${totalTypesCount} types`);
                }
                
                // –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
                updateIndexingProgress(currentStep++, 'Finalizing...', 95);
                progress.report({ increment: 20, message: 'Finalizing...' });
                
                finishIndexing(true);
                
                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                let message = `‚úÖ Platform documentation added for version ${version}`;
                if (shcntxPath && shlangPath) {
                    message += ` (${totalTypesCount} total types from both archives)`;
                } else if (shcntxPath) {
                    message += ` (${totalTypesCount} types from shcntx)`;
                    if (!shlangPath) {
                        message += '\n‚ö†Ô∏è Note: shlang archive not found - primitive types may be incomplete';
                    }
                } else if (shlangPath) {
                    message += ` (${totalTypesCount} primitive types from shlang)`;
                    if (!shcntxPath) {
                        message += '\n‚ö†Ô∏è Note: shcntx archive not found - object types may be incomplete';
                    }
                }
                
                vscode.window.showInformationMessage(message);
                outputChannel.appendLine(message);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å
                provider.refresh();
                
            } catch (error) {
                finishIndexing(false);
                vscode.window.showErrorMessage(`Failed to add platform documentation: ${error}`);
                outputChannel.appendLine(`Error adding platform docs: ${error}`);
            }
        });

    } catch (error) {
        vscode.window.showErrorMessage(`Failed to add platform documentation: ${error}`);
        outputChannel.appendLine(`Error: ${error}`);
    }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
 */
export async function removePlatformDocumentation(version: string, provider: BslPlatformDocsProvider): Promise<void> {
    const choice = await vscode.window.showWarningMessage(
        `Are you sure you want to remove platform documentation for version ${version}?`,
        { modal: true },
        'Remove'
    );

    if (choice === 'Remove') {
        try {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –∫ –∫–µ—à—É
            const homeDir = os.homedir();
            const cacheBasePath = path.join(homeDir, '.bsl_analyzer', 'platform_cache');
            const versionFile = path.join(cacheBasePath, `v${version}.jsonl`);
            
            outputChannel.appendLine(`Removing platform cache for version ${version}`);
            outputChannel.appendLine(`Cache file: ${versionFile}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if (fs.existsSync(versionFile)) {
                // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∫–µ—à–∞
                fs.unlinkSync(versionFile);
                outputChannel.appendLine(`‚úÖ Successfully removed cache file: ${versionFile}`);
                
                // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏
                const projectIndicesPath = path.join(homeDir, '.bsl_analyzer', 'project_indices');
                if (fs.existsSync(projectIndicesPath)) {
                    const projects = fs.readdirSync(projectIndicesPath);
                    for (const project of projects) {
                        const versionPath = path.join(projectIndicesPath, project, `v${version}`);
                        if (fs.existsSync(versionPath)) {
                            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —É–¥–∞–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤–µ—Ä—Å–∏–∏
                            fs.rmSync(versionPath, { recursive: true, force: true });
                            outputChannel.appendLine(`‚úÖ Removed project index: ${versionPath}`);
                        }
                    }
                }
                
                vscode.window.showInformationMessage(
                    `‚úÖ Platform documentation for version ${version} has been removed`
                );
            } else {
                outputChannel.appendLine(`‚ö†Ô∏è Cache file not found: ${versionFile}`);
                vscode.window.showWarningMessage(
                    `Platform documentation cache for version ${version} not found`
                );
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å
            provider.refresh();
            
        } catch (error) {
            vscode.window.showErrorMessage(`Failed to remove platform documentation: ${error}`);
            outputChannel.appendLine(`Error removing platform docs: ${error}`);
        }
    }
}

/**
 * –ü–µ—Ä–µ–ø–∞—Ä—Å–∏—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
 */
export async function parsePlatformDocumentation(version: string): Promise<void> {
    startIndexing(3); // 3 —ç—Ç–∞–ø–∞ –¥–ª—è —Ä–µ-–ø–∞—Ä—Å–∏–Ω–≥–∞
    
    await vscode.window.withProgress({
        location: vscode.ProgressLocation.Notification,
        title: `Re-parsing platform documentation for version ${version}...`,
        cancellable: false
    }, async (progress) => {
        try {
            // –≠—Ç–∞–ø 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            updateIndexingProgress(1, 'Initializing re-parse...', 15);
            progress.report({ increment: 30, message: 'Initializing re-parse...' });
            
            // –≠—Ç–∞–ø 2: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
            updateIndexingProgress(2, 'Building unified index...', 70);
            progress.report({ increment: 55, message: 'Building unified index...' });
            
            const args = [
                '--platform-version', version,
                '--force-rebuild'
            ];
            
            const platformDocsArchive = getPlatformDocsArchive();
            if (platformDocsArchive) {
                args.push('--platform-docs-archive', platformDocsArchive);
            }
            
            const result = await executeBslCommand('build_unified_index', args);

            // –≠—Ç–∞–ø 3: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            updateIndexingProgress(3, 'Finalizing...', 95);
            progress.report({ increment: 15, message: 'Finalizing...' });
            
            finishIndexing(true);

            vscode.window.showInformationMessage(
                `‚úÖ Platform documentation re-parsed successfully for version ${version}`
            );
            
            outputChannel.appendLine(`Re-parse result: ${result}`);
            
        } catch (error) {
            finishIndexing(false);
            vscode.window.showErrorMessage(`Failed to re-parse platform documentation: ${error}`);
            outputChannel.appendLine(`Error re-parsing platform docs: ${error}`);
        }
    });
}