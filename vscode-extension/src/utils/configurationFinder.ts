import * as fs from 'fs';
import * as path from 'path';
import * as vscode from 'vscode';

export interface ConfigurationInfo {
    path: string;
    name: string;
    isExtension: boolean;
    uuid?: string;
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ 1–° –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
 */
export async function findConfigurations(rootPath: string): Promise<ConfigurationInfo[]> {
    const configurations: ConfigurationInfo[] = [];
    
    try {
        const entries = await fs.promises.readdir(rootPath, { withFileTypes: true });
        
        for (const entry of entries) {
            if (entry.isDirectory()) {
                const configPath = path.join(rootPath, entry.name);
                const configXmlPath = path.join(configPath, 'Configuration.xml');
                
                if (fs.existsSync(configXmlPath)) {
                    const configInfo = await analyzeConfiguration(configXmlPath);
                    if (configInfo) {
                        configurations.push({
                            ...configInfo,
                            path: configPath,
                            name: entry.name
                        });
                    }
                }
            }
        }
    } catch (error) {
        console.error(`Error scanning for configurations: ${error}`);
    }
    
    return configurations;
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç Configuration.xml –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
async function analyzeConfiguration(xmlPath: string): Promise<{ isExtension: boolean; uuid?: string } | null> {
    try {
        const content = await fs.promises.readFile(xmlPath, 'utf-8');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
        const isExtension = content.includes('<ConfigurationExtensionPurpose>');
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º UUID –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const uuidMatch = content.match(/<Configuration[^>]*uuid="([^"]+)"/);
        const uuid = uuidMatch ? uuidMatch[1] : undefined;
        
        return { isExtension, uuid };
    } catch (error) {
        console.error(`Error analyzing configuration: ${error}`);
        return null;
    }
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ workspace
 */
export async function findMainConfiguration(): Promise<ConfigurationInfo | null> {
    const workspaceFolders = vscode.workspace.workspaceFolders;
    if (!workspaceFolders || workspaceFolders.length === 0) {
        return null;
    }
    
    for (const folder of workspaceFolders) {
        // –ò—â–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –∫–æ—Ä–Ω–µ workspace
        let configurations = await findConfigurations(folder.uri.fsPath);
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –∫–æ—Ä–Ω–µ, –∏—â–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
        if (configurations.length === 0) {
            const standardDirs = ['conf', 'src', 'configuration', '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è'];
            for (const dir of standardDirs) {
                const dirPath = path.join(folder.uri.fsPath, dir);
                if (fs.existsSync(dirPath)) {
                    configurations = await findConfigurations(dirPath);
                    if (configurations.length > 0) break;
                }
            }
        }
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–Ω–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
        const mainConfigs = configurations.filter(c => !c.isExtension);
        
        if (mainConfigs.length > 0) {
            // –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é
            // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞
            return mainConfigs[0];
        }
    }
    
    return null;
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
export async function selectConfiguration(configurations: ConfigurationInfo[]): Promise<ConfigurationInfo | null> {
    const items = configurations.map(config => ({
        label: config.name,
        description: config.isExtension ? 'üì¶ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ' : 'üè¢ –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è',
        detail: config.path,
        config
    }));
    
    const selected = await vscode.window.showQuickPick(items, {
        placeHolder: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏',
        title: 'BSL Analyzer: –í—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏'
    });
    
    return selected ? selected.config : null;
}

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
export async function autoDetectConfiguration(outputChannel?: vscode.OutputChannel): Promise<string | null> {
    outputChannel?.appendLine('üîç Searching for 1C configuration in workspace...');
    
    const mainConfig = await findMainConfiguration();
    
    if (mainConfig) {
        outputChannel?.appendLine(`‚úÖ Found main configuration: ${mainConfig.name} at ${mainConfig.path}`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        const config = vscode.workspace.getConfiguration('bslAnalyzer');
        await config.update('configurationPath', mainConfig.path, vscode.ConfigurationTarget.Workspace);
        
        return mainConfig.path;
    } else {
        outputChannel?.appendLine('‚ùå No 1C configuration found in workspace');
        
        // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é
        const result = await vscode.window.showInformationMessage(
            '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 1–° –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏',
            '–í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É',
            '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'
        );
        
        if (result === '–í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É') {
            const uri = await vscode.window.showOpenDialog({
                canSelectFolders: true,
                canSelectFiles: false,
                canSelectMany: false,
                openLabel: '–í—ã–±—Ä–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é',
                title: '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π 1–°'
            });
            
            if (uri && uri.length > 0) {
                const configPath = uri[0].fsPath;
                const config = vscode.workspace.getConfiguration('bslAnalyzer');
                await config.update('configurationPath', configPath, vscode.ConfigurationTarget.Workspace);
                return configPath;
            }
        }
    }
    
    return null;
}