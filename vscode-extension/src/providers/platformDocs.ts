import * as vscode from 'vscode';
import * as path from 'path';
import * as fs from 'fs';

/**
 * –≠–ª–µ–º–µ–Ω—Ç –¥–µ—Ä–µ–≤–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
 */
export class PlatformDocItem extends vscode.TreeItem {
    constructor(
        public readonly label: string,
        public readonly collapsibleState: vscode.TreeItemCollapsibleState,
        public readonly version: string,
        contextValue?: string,
        public readonly typesCount?: string,
        public readonly archiveName?: string,
        public readonly lastParsed?: string
    ) {
        super(label, collapsibleState);
        if (contextValue) {
            this.contextValue = contextValue;
        }
        
        if (version && contextValue === 'version') {
            this.tooltip = `Platform ${version}: ${typesCount || '?'} types`;
        }
    }
}

/**
 * Provider –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
 */
export class BslPlatformDocsProvider implements vscode.TreeDataProvider<PlatformDocItem> {
    private _onDidChangeTreeData: vscode.EventEmitter<PlatformDocItem | undefined | null | void> = new vscode.EventEmitter<PlatformDocItem | undefined | null | void>();
    readonly onDidChangeTreeData: vscode.Event<PlatformDocItem | undefined | null | void> = this._onDidChangeTreeData.event;
    
    private outputChannel: vscode.OutputChannel | undefined;

    constructor(outputChannel?: vscode.OutputChannel) {
        this.outputChannel = outputChannel;
    }

    refresh(): void {
        this._onDidChangeTreeData.fire();
    }

    getTreeItem(element: PlatformDocItem): vscode.TreeItem {
        return element;
    }

    getChildren(element?: PlatformDocItem): Thenable<PlatformDocItem[]> {
        if (!element) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏–∑ –∫–µ—à–∞
            return this.getAvailablePlatformVersions();
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏
            const details: PlatformDocItem[] = [];
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–ø–æ–≤
            details.push(new PlatformDocItem(`‚ÑπÔ∏è Types: ${element.typesCount || 'Unknown'}`, vscode.TreeItemCollapsibleState.None, element.version, 'info'));
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä—Ö–∏–≤–∞—Ö
            if (element.archiveName === 'Both archives') {
                details.push(new PlatformDocItem(`üìÇ Archive: shcntx_ru.zip`, vscode.TreeItemCollapsibleState.None, element.version, 'info'));
                details.push(new PlatformDocItem(`üìÇ Archive: shlang_ru.zip`, vscode.TreeItemCollapsibleState.None, element.version, 'info'));
                details.push(new PlatformDocItem(`‚úÖ Status: Complete`, vscode.TreeItemCollapsibleState.None, element.version, 'info'));
            } else if (element.archiveName === 'shcntx_ru.zip') {
                details.push(new PlatformDocItem(`üìÇ Archive: ${element.archiveName}`, vscode.TreeItemCollapsibleState.None, element.version, 'info'));
                details.push(new PlatformDocItem(`‚ö†Ô∏è Missing: shlang_ru.zip`, vscode.TreeItemCollapsibleState.None, element.version, 'info'));
            } else if (element.archiveName === 'shlang_ru.zip') {
                details.push(new PlatformDocItem(`üìÇ Archive: ${element.archiveName}`, vscode.TreeItemCollapsibleState.None, element.version, 'info'));
                details.push(new PlatformDocItem(`‚ö†Ô∏è Missing: shcntx_ru.zip`, vscode.TreeItemCollapsibleState.None, element.version, 'info'));
            } else {
                details.push(new PlatformDocItem(`üì¶ Archive: ${element.archiveName || 'N/A'}`, vscode.TreeItemCollapsibleState.None, element.version, 'info'));
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—É –ø–∞—Ä—Å–∏–Ω–≥–∞
            details.push(new PlatformDocItem(`üïí Parsed: ${element.lastParsed || 'Never'}`, vscode.TreeItemCollapsibleState.None, element.version, 'info'));
            
            return Promise.resolve(details);
        }
    }

    private async getAvailablePlatformVersions(): Promise<PlatformDocItem[]> {
        const items: PlatformDocItem[] = [];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–µ—à–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        const homedir = require('os').homedir();
        const cacheDir = path.join(homedir, '.bsl_analyzer', 'platform_cache');
        
        if (fs.existsSync(cacheDir)) {
            // –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π –∏–∑ –∫–µ—à–∞
            const files = fs.readdirSync(cacheDir);
            const versionFiles = files.filter(f => f.match(/^v[\d.]+\.jsonl$/));
            
            for (const versionFile of versionFiles) {
                const version = versionFile.replace('v', '').replace('.jsonl', '');
                
                // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–ø–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
                let typesCount = '?';
                let archiveInfo = 'Unknown';
                try {
                    const filePath = path.join(cacheDir, versionFile);
                    const content = fs.readFileSync(filePath, 'utf-8');
                    const lines = content.trim().split('\n');
                    typesCount = lines.length.toLocaleString();
                    
                    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∞—Ä—Ö–∏–≤–æ–≤
                    let hasObjectTypes = false;
                    let hasPrimitiveTypes = false;
                    
                    for (const line of lines.slice(0, 100)) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å—Ç—Ä–æ–∫
                        try {
                            const entity = JSON.parse(line);
                            if (entity.name) {
                                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç–Ω—ã–µ —Ç–∏–ø—ã (–∏–∑ shcntx)
                                if (entity.name.includes('–ú–∞—Å—Å–∏–≤') || entity.name.includes('Array') ||
                                    entity.name.includes('–¢–∞–±–ª–∏—Ü–∞–ó–Ω–∞—á–µ–Ω–∏–π') || entity.name.includes('ValueTable')) {
                                    hasObjectTypes = true;
                                }
                                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–µ —Ç–∏–ø—ã (–∏–∑ shlang)
                                if (entity.name === '–ß–∏—Å–ª–æ' || entity.name === 'Number' ||
                                    entity.name === '–°—Ç—Ä–æ–∫–∞' || entity.name === 'String' ||
                                    entity.name === '–ë—É–ª–µ–≤–æ' || entity.name === 'Boolean') {
                                    hasPrimitiveTypes = true;
                                }
                            }
                        } catch (e) {
                            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
                        }
                    }
                    
                    if (hasObjectTypes && hasPrimitiveTypes) {
                        archiveInfo = 'Both archives';
                    } else if (hasObjectTypes) {
                        archiveInfo = 'shcntx_ru.zip';
                    } else if (hasPrimitiveTypes) {
                        archiveInfo = 'shlang_ru.zip';
                    }
                    
                } catch (e) {
                    this.outputChannel?.appendLine(`Error reading platform cache: ${e}`);
                }
                
                const lastModified = fs.statSync(path.join(cacheDir, versionFile)).mtime.toLocaleDateString();
                
                items.push(
                    new PlatformDocItem(
                        `üìã Platform ${version}`,
                        vscode.TreeItemCollapsibleState.Expanded,
                        version,
                        'version',
                        typesCount,
                        archiveInfo,
                        lastModified
                    )
                );
            }
        }
        
        // –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        items.push(
            new PlatformDocItem('‚ûï Add Platform Documentation...', vscode.TreeItemCollapsibleState.None, '', 'add-docs')
        );
        
        return items;
    }
}