import * as vscode from 'vscode';
import { 
    TypeInfoParams, 
    ValidateMethodParams, 
    IndexingProgressParams
} from '../types';
import {
    LanguageClient,
    LanguageClientOptions,
    ServerOptions,
    TransportKind,
    RevealOutputChannelOn,
    Trace,
    ExecutableOptions
} from 'vscode-languageclient/node';
import { getBinaryPath } from '../utils/binaryPath';
import { BslAnalyzerConfig } from '../config/configHelper';
import { updateStatusBar } from './progress';
import * as fs from 'fs';

let client: LanguageClient | null = null;
let outputChannel: vscode.OutputChannel;
let healthCheckInterval: NodeJS.Timeout | null = null;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å LSP –∫–ª–∏–µ–Ω—Ç–∞
 */
export function initializeLspClient(channel: vscode.OutputChannel) {
    outputChannel = channel;
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç LSP —Å–µ—Ä–≤–µ—Ä
 */
export async function startLanguageClient(context: vscode.ExtensionContext): Promise<void> {
    const serverMode = BslAnalyzerConfig.serverMode;
    const tcpPort = BslAnalyzerConfig.serverTcpPort;
    const traceLevel = BslAnalyzerConfig.serverTrace;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º getBinaryPath –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ LSP —Å–µ—Ä–≤–µ—Ä—É
    let serverPath: string;
    try {
        // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ –±–∏–Ω–∞—Ä–Ω–∏–∫–æ–≤
        serverPath = getBinaryPath('lsp_server', context);
        outputChannel.appendLine(`üöÄ LSP server path resolved: ${serverPath}`);
    } catch (error: unknown) {
        const errorMessage = error instanceof Error ? error.message : String(error);
        outputChannel.appendLine(`‚ùå Failed to locate LSP server: ${errorMessage}`);
        vscode.window.showWarningMessage(
            'BSL Analyzer: LSP server not found. Extension features will be limited.',
            'Show Details'
        ).then(selection => {
            if (selection === 'Show Details') {
                outputChannel.show();
            }
        });
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if (!fs.existsSync(serverPath)) {
        outputChannel.appendLine(`‚ùå LSP server file not found: ${serverPath}`);
        vscode.window.showWarningMessage(
            'BSL Analyzer: LSP server binary not found. Please build the project first.',
            'Open Build Instructions'
        ).then(selection => {
            if (selection === 'Open Build Instructions') {
                vscode.env.openExternal(vscode.Uri.parse('https://github.com/bsl-analyzer-team/bsl-type-safety-analyzer#building'));
            }
        });
        return;
    }
    
    outputChannel.appendLine(`üîß Starting LSP server in ${serverMode} mode...`);
    outputChannel.appendLine(`üìç Server path: ${serverPath}`);
    
    // Server options configuration
    let serverOptions: ServerOptions;
    
    if (serverMode === 'stdio') {
        // STDIO mode - –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∫–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å
        const execOptions: ExecutableOptions = {
            env: { 
                ...process.env,
                RUST_LOG: 'info', // Use 'info' as default log level
                RUST_BACKTRACE: '1'
            }
        };
        
        serverOptions = {
            run: {
                command: serverPath,
                args: ['lsp'],
                options: execOptions
            },
            debug: {
                command: serverPath,
                args: ['lsp', '--debug'],
                options: execOptions
            }
        };
    } else {
        // TCP mode - –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
        outputChannel.appendLine(`üì° Connecting to LSP server on port ${tcpPort}...`);
        serverOptions = {
            run: {
                transport: TransportKind.socket,
                port: tcpPort
            } as any,
            debug: {
                transport: TransportKind.socket,
                port: tcpPort
            } as any
        };
    }
    
    // Client options configuration
    const clientOptions: LanguageClientOptions = {
        documentSelector: [
            { scheme: 'file', language: 'bsl' },
            { scheme: 'untitled', language: 'bsl' }
        ],
        synchronize: {
            fileEvents: [
                vscode.workspace.createFileSystemWatcher('**/*.bsl'),
                vscode.workspace.createFileSystemWatcher('**/*.os'),
                vscode.workspace.createFileSystemWatcher('**/Configuration.xml')
            ],
            configurationSection: 'bslAnalyzer'
        },
        outputChannel: outputChannel,
        revealOutputChannelOn: RevealOutputChannelOn.Never,
        traceOutputChannel: outputChannel,
        middleware: {
            // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º workspace-related notifications
            workspace: {
                configuration: (params, token, next) => {
                    outputChannel.appendLine(`üìä Configuration request: ${JSON.stringify(params)}`);
                    return next(params, token);
                }
            }
        }
    };
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
    if (traceLevel && traceLevel !== 'off') {
        // Convert string to Trace enum
        if (traceLevel === 'messages') {
            (clientOptions as any).trace = Trace.Messages;
        } else if (traceLevel === 'verbose') {
            (clientOptions as any).trace = Trace.Verbose;
        }
    }
    
    // Create the language client
    client = new LanguageClient(
        'bslAnalyzer',
        'BSL Type Safety Analyzer',
        serverOptions,
        clientOptions
    );
    
    // Start the client
    try {
        outputChannel.appendLine('üöÄ Starting LSP client...');
        await client.start();
        outputChannel.appendLine('‚úÖ LSP client started successfully');
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ custom requests
        registerCustomHandlers();
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
        client.onNotification('bsl/indexingProgress', (params: IndexingProgressParams) => {
            handleIndexingProgress(params);
        });
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        client.onDidChangeState((event) => {
            outputChannel.appendLine(`üìä LSP Client state changed: ${event.oldState} -> ${event.newState}`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            vscode.commands.executeCommand('bslAnalyzer.refreshOverview');
            
            // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª—é—á–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ
            if (event.newState === 1) { // Stopped state
                outputChannel.appendLine('‚ö†Ô∏è LSP server disconnected unexpectedly');
                vscode.window.showWarningMessage(
                    'BSL Analyzer: Language server disconnected',
                    'Restart Server'
                ).then(selection => {
                    if (selection === 'Restart Server') {
                        vscode.commands.executeCommand('bslAnalyzer.restartServer');
                    }
                });
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–∞—Ä
                updateStatusBar('$(error) BSL Analyzer: Disconnected');
            } else if (event.newState === 2) { // Running state
                updateStatusBar('$(database) BSL Analyzer: Ready');
            }
        });
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
        vscode.commands.executeCommand('bslAnalyzer.refreshOverview');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
        startHealthCheck();
        
    } catch (error) {
        outputChannel.appendLine(`‚ùå Failed to start LSP client: ${error}`);
        vscode.window.showErrorMessage(`Failed to start BSL Analyzer: ${error}`);
        updateStatusBar('$(error) BSL Analyzer: Failed to start');
    }
}

/**
 * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç LSP —Å–µ—Ä–≤–µ—Ä
 */
export async function stopLanguageClient(): Promise<void> {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º health check
    stopHealthCheck();
    
    if (client) {
        outputChannel.appendLine('üõë Stopping LSP client...');
        try {
            await client.stop();
            outputChannel.appendLine('‚úÖ LSP client stopped');
        } catch (error) {
            outputChannel.appendLine(`‚ö†Ô∏è Error stopping LSP client: ${error}`);
        }
        client = null;
    }
}

/**
 * –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç LSP —Å–µ—Ä–≤–µ—Ä
 */
export async function restartLanguageClient(context: vscode.ExtensionContext): Promise<void> {
    outputChannel.appendLine('üîÑ Restarting LSP server...');
    await stopLanguageClient();
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
    vscode.commands.executeCommand('bslAnalyzer.refreshOverview');
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
    await new Promise(resolve => setTimeout(resolve, 500));
    await startLanguageClient(context);
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫–ª–∏–µ–Ω—Ç LSP
 */
export function getLanguageClient(): LanguageClient | null {
    return client;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ LSP –∫–ª–∏–µ–Ω—Ç
 */
export function isClientRunning(): boolean {
    return client !== null && client.isRunning();
}

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
 */
function registerCustomHandlers() {
    if (!client) return;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–ø–µ
    client.onRequest('bsl/typeInfo', async (params: TypeInfoParams) => {
        outputChannel.appendLine(`üìã Type info request: ${JSON.stringify(params)}`);
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞
        return null;
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–µ—Ç–æ–¥–∞
    client.onRequest('bsl/validateMethod', async (params: ValidateMethodParams) => {
        outputChannel.appendLine(`‚úì Method validation request: ${JSON.stringify(params)}`);
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞
        return null;
    });
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
 */
function handleIndexingProgress(params: IndexingProgressParams) {
    outputChannel.appendLine(`üìä Indexing progress: Step ${params.step}/${params.totalSteps} - ${params.message} (${params.percentage}%)`);
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å UI —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–∑–≤–∞—Ç—å event emitter –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è status bar
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
 */
export async function sendCustomRequest<T = unknown>(method: string, params?: unknown): Promise<T> {
    if (!client || !client.isRunning()) {
        throw new Error('LSP client is not running');
    }
    
    try {
        const result = await client.sendRequest(method, params);
        return result as T;
    } catch (error) {
        outputChannel.appendLine(`‚ùå Custom request failed: ${error}`);
        throw error;
    }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
 */
export function sendCustomNotification(method: string, params?: unknown): void {
    if (!client || !client.isRunning()) {
        outputChannel.appendLine(`‚ö†Ô∏è Cannot send notification: LSP client is not running`);
        return;
    }
    
    client.sendNotification(method, params);
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è LSP —Å–µ—Ä–≤–µ—Ä–∞
 */
function startHealthCheck(): void {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    stopHealthCheck();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    healthCheckInterval = setInterval(() => {
        if (client) {
            const isRunning = client.isRunning();
            if (!isRunning) {
                outputChannel.appendLine('‚ö†Ô∏è Health check: LSP client is not running');
                updateStatusBar('$(error) BSL Analyzer: Disconnected');
                vscode.commands.executeCommand('bslAnalyzer.refreshOverview');
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
                stopHealthCheck();
                vscode.window.showWarningMessage(
                    'BSL Analyzer: Language server stopped unexpectedly',
                    'Restart Server',
                    'Dismiss'
                ).then(selection => {
                    if (selection === 'Restart Server') {
                        vscode.commands.executeCommand('bslAnalyzer.restartServer');
                    }
                });
            }
        }
    }, 30000); // 30 —Å–µ–∫—É–Ω–¥
}

/**
 * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
 */
function stopHealthCheck(): void {
    if (healthCheckInterval) {
        clearInterval(healthCheckInterval);
        healthCheckInterval = null;
    }
}